{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/android-chrome-192x192.png","path":"images/android-chrome-192x192.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/android-chrome-512x512.png","path":"images/android-chrome-512x512.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/mstile-150x150.png","path":"images/mstile-150x150.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"e106e96b92ac59445b3714ba7c62abd103df0024","modified":1604369157161},{"_id":"source/404.md","hash":"16974e2bc90de8f53368423a81312c6dc17b7d4f","modified":1604369157153},{"_id":"source/_posts/Executors线程池.md","hash":"28cca0b36c0cff44b960772a9242a39a879f9e62","modified":1604369157154},{"_id":"source/_posts/MVC模式.md","hash":"2b414fa8d9dc1bdff99bdbc92b98136bca2614ed","modified":1604644771550},{"_id":"source/_posts/String-intern-方法解读.md","hash":"ae0146c45b883f83c70f0e296c170d7953b6a04b","modified":1605701258270},{"_id":"source/_posts/hello-world.md","hash":"4bcf1169a5c4b4ceb24a4e69e61bb9203f59a76e","modified":1604369157155},{"_id":"source/_posts/hexo使用记录.md","hash":"0194daf1f4e4fc0ef12068d171b1cfe3d2875dc7","modified":1604369157155},{"_id":"source/_posts/java日记.md","hash":"7f4d812e6557ab316ce24fff08bf52b7be688dbf","modified":1605679717869},{"_id":"source/_posts/业务代表模式.md","hash":"02564a76a75d6f926c0b5c84d9281193a51ab61f","modified":1604647814179},{"_id":"source/_posts/中介者模式.md","hash":"85dfeb1ed245ef6aaadcc23a43b7e5c4612ca95b","modified":1604554028256},{"_id":"source/_posts/享元模式.md","hash":"64b5fc8525513ab6b8adfb03cd97f23dc7d7d5d8","modified":1604369157158},{"_id":"source/_posts/代理模式.md","hash":"1ed1e6cb51a248a8bcf082b1ff591932283d4566","modified":1604396352213},{"_id":"source/_posts/单例模式.md","hash":"cef555bdcb711d3b2bf42640ffdc55e89ba4d24d","modified":1604653635707},{"_id":"source/_posts/命令模式.md","hash":"5286310ec1e10ccc14f94f56ac096955785bebe8","modified":1604458228772},{"_id":"source/_posts/原型模式.md","hash":"2c4bbc1ee465984ea6edee09b1014487347ef1e5","modified":1604369157158},{"_id":"source/_posts/备忘录模式.md","hash":"8627e23e525681c0b09e532c5c4bb7c783928251","modified":1604556165547},{"_id":"source/_posts/外观模式.md","hash":"7238d9a0a16251aef3f58de1c36211f49d97145e","modified":1604394187673},{"_id":"source/_posts/工厂模式.md","hash":"d0b8289737842ffb130b7ed4ab314b5a4fd6fae9","modified":1604369157159},{"_id":"source/_posts/建造者模式.md","hash":"94cf97749da55e3683bff951b059f39106820e86","modified":1604369157159},{"_id":"source/_posts/抽象工厂模式.md","hash":"0133ccc6aa01b98074e975c7a49100c7186a48be","modified":1604394172470},{"_id":"source/_posts/桥接模式.md","hash":"f9acd3ea8b2468ada0e5810e4e77bcd21d33b634","modified":1604386688118},{"_id":"source/_posts/模板模式.md","hash":"40aa23fe7cdbf91d69d7fc191cb3a2f7e7a8d0eb","modified":1604630335113},{"_id":"source/_posts/深入理解java虚拟机（一）：内存分配策略.md","hash":"3c6660eb936ed9bcc1857f4000af76277a8d8846","modified":1605790346132},{"_id":"source/_posts/状态模式.md","hash":"23fb551dfb1524b99bbc73d998415bec07fa4b88","modified":1604565584935},{"_id":"source/_posts/空对象模式.md","hash":"c2819540450230bf015b0183b643ca7c25876d97","modified":1604567259134},{"_id":"source/_posts/策略模式.md","hash":"36bf0668db9222a6805051ce4893ac99648f0709","modified":1604629100461},{"_id":"source/_posts/装饰器模式.md","hash":"1c2e2e983c62be7ae5723b139b86100af8def774","modified":1604369157160},{"_id":"source/_posts/组合模式.md","hash":"826eea0d29addfa960ac5b8c7d1dcde70f51fa3c","modified":1604393210720},{"_id":"source/_posts/观察者模式.md","hash":"20c794c65ddea032db04e6952c4425170b1ea5e6","modified":1604559822479},{"_id":"source/_posts/解释器模式.md","hash":"5d29adb700e2a9e6f8627a90c6f717a5f6395689","modified":1604542307804},{"_id":"source/_posts/设计模式总结.md","hash":"df0c5f0bc04ba0e6c9c61a04d8a09bee810815b2","modified":1604662364941},{"_id":"source/_posts/访问者模式.md","hash":"cc48797186501a6c219aae06750cfaf3885addcd","modified":1604642722414},{"_id":"source/_posts/责任链模式.md","hash":"0292c2257750ad0134581ff007e8509b9d730f03","modified":1604405818429},{"_id":"source/_posts/过滤器模式.md","hash":"45fb9ff1978e115ceb8a3704daa4ed4a8c0eb8a5","modified":1604391778538},{"_id":"source/_posts/迭代器模式.md","hash":"4d3223c298b3cb7825c96b52012c8531eb9fd937","modified":1604544358507},{"_id":"source/contact/index.md","hash":"94b333f9de85fd4583411ed10e2271264ad46675","modified":1604904262402},{"_id":"source/about/index.md","hash":"76de185689fc0b8daf6a90663e530785f7936d41","modified":1604904237022},{"_id":"source/_posts/适配器模式.md","hash":"99440b5dfbdb057b64933809c1d5a20be3cd2600","modified":1604384114640},{"_id":"source/friends/index.md","hash":"f06e3d4862382461683e45d3efa4f57ad9a0990b","modified":1604904281208},{"_id":"source/tags/index.md","hash":"01ee2ed120bce9c49371bea4c158700d314ff7a2","modified":1604369157162},{"_id":"source/_posts/hexo使用记录/image-20201027162208507.png","hash":"2304baa3f1d61c7696b09433bfcb5c2848d89cef","modified":1604369157157},{"_id":"source/_posts/hexo使用记录/image-20201027162349781.png","hash":"6790dff65777ca2d90601cee480fa794d5a5395f","modified":1604369157157},{"_id":"source/_data/friends.json","hash":"b7f6186e35c40653a8349eb641922d770189bdf6","modified":1604904372400},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1604369157218},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1604369157219},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1604369157219},{"_id":"themes/next/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1604369157219},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1604369157220},{"_id":"themes/next/_config.yml","hash":"f5eee996029b53c6628f81a4e9bc452099b5b82a","modified":1604369620454},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1604369157220},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1604369157223},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1604369157222},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1604369157237},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1604369157287},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1604369157224},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1604369157225},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1604369157225},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1604369157226},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1604369157227},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1604369157226},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1604369157237},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1604369157238},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1604369157228},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1604369157238},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1604369157239},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1604369157239},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1604369157239},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1604369157240},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1604369157241},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1604369157241},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1604369157242},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1604369157243},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1604369157242},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1604369157243},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1604369157244},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1604369157245},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1604369157245},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1604369157244},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1604369157246},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1604369157247},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1604369157246},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1604369157246},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1604369157247},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1604369157248},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1604369157284},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1604369157285},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1604369157285},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1604369157286},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1604369157287},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1604369157286},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1604369157229},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1604369157299},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1604369157229},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1604369157230},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1604369157227},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1604369157221},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1604369157228},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1604369157232},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1604369157233},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1604369157234},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1604369157230},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1604369157233},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1604369157231},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1604369157249},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1604369157249},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1604369157235},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1604369157235},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1604369157234},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1604369157249},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1604369157250},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1604369157236},{"_id":"themes/next/layout/_partials/footer.swig","hash":"a77645d511848b294d44bb5ea6b2417fb2bae11c","modified":1604369157250},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1604369157257},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1604369157256},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1604369157263},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1604369157264},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1604369157264},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1604369157265},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1604369157267},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1604369157271},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1604369157268},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1604369157276},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1604369157278},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1604369157278},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1604369157289},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1604369157296},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1604369157296},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1604369157296},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1604369157297},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1604369157295},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1604369157298},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1604369157298},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1604369157298},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1604369157299},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1604369157300},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1604369157300},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1604369157301},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1604369157300},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1604369157302},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1604369157301},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1604369157303},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1604369157302},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1604369157303},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1604369157302},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1604369157336},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1604369157304},{"_id":"themes/next/source/images/android-chrome-192x192.png","hash":"01d75947282acf98919c2f31f4df17757261c180","modified":1604369157350},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1604369157348},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1604369157351},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1604369157349},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1604369157352},{"_id":"themes/next/source/images/apple-touch-icon.png","hash":"05b572e0bcd8e818c31f49777aefffc51754c1f9","modified":1604369157352},{"_id":"themes/next/source/images/avatar.jpg","hash":"b98a55111d9024939957fa5266bb47438c33ae50","modified":1604369157353},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1604369157353},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1604369157354},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1604369157355},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1604369157354},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1604369157356},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1604369157356},{"_id":"themes/next/source/images/favicon-16x16.png","hash":"10466a4116e1a6d9909649324054e5fafaf7ccbd","modified":1604369157357},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1604369157355},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1604369157356},{"_id":"themes/next/source/images/favicon.ico","hash":"c0ec85732c6e04af8afe645ac27e66769a70d554","modified":1604369157358},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1604369157357},{"_id":"themes/next/source/images/favicon-32x32.png","hash":"72d82a682c577913f4dba67c8791925f85858609","modified":1604369157358},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1604369157360},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1604369157359},{"_id":"themes/next/source/images/mstile-150x150.png","hash":"7e74348b41a01bdb59ee5c40431c7f90126e0513","modified":1604369157359},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1604369157360},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1604369157361},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1604369157362},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1604369157253},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1604369157361},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1604369157254},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1604369157254},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1604369157255},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1604369157363},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1604369157364},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1604369157255},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1604369157252},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1604369157251},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1604369157257},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1604369157261},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1604369157257},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1604369157262},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1604369157263},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1604369157258},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1604369157262},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1604369157260},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1604369157259},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1604369157260},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1604369157265},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1604369157260},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1604369157266},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1604369157266},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1604369157267},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1604369157267},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1604369157270},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1604369157269},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1604369157271},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1604369157270},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1604369157274},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1604369157272},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1604369157273},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"cc4ebfa9b6e08371c8d766ee0fd539566d0f3efd","modified":1604369157275},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1604369157274},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1604369157275},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1604369157274},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1604369157276},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1604369157277},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1604369157281},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1604369157277},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1604369157278},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1604369157281},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1604369157282},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1604369157282},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1604369157283},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1604369157279},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1604369157280},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1604369157283},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1604369157284},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1604369157279},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1604369157292},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1604369157290},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1604369157290},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1604369157293},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1604369157293},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1604369157294},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1604369157291},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1604369157293},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1604369157294},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1604369157295},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1604369157295},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1604369157347},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1604369157348},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1604369157347},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1604369157346},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1604369157348},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1604369157363},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1604369157362},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1604369157305},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1604369157305},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1604369157313},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1604369157305},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1604369157320},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1604369157320},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1604369157369},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1604369157369},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1604369157326},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1604369157327},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1604369157327},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1604369157337},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1604369157331},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1604369157330},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1604369157330},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1604369157331},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1604369157335},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1604369157337},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1604369157339},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1604369157338},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1604369157339},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1604369157340},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1604369157340},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1604369157341},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1604369157341},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1604369157342},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1604369157342},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1604369157343},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1604369157342},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1604369157344},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1604369157345},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1604369157344},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1604369157345},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1604369157345},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1604369157367},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1604369157308},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1604369157309},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1604369157309},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1604369157309},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1604369157310},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1604369157310},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1604369157310},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1604369157311},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1604369157365},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1604369157311},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1604369157311},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1604369157312},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1604369157312},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1604369157306},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1604369157306},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1604369157312},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1604369157307},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1604369157308},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1604369157313},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1604369157314},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1604369157307},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1604369157314},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1604369157315},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1604369157315},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1604369157316},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1604369157317},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1604369157318},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1604369157318},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1604369157318},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1604369157319},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1604369157319},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1604369157321},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1604369157322},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1604369157321},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1604369157322},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1604369157322},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1604369157323},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1604369157324},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1604369157324},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1604369157326},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1604369157325},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1604369157328},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1604369157329},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1604369157329},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1604369157329},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1604369157332},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1604369157332},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1604369157332},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1604369157334},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1604369157333},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1604369157335},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1604369157334},{"_id":"themes/next/source/images/android-chrome-512x512.png","hash":"7dfeb605519dc3b57180a7c047e01298c6d67cfa","modified":1604369157351},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1604369157317},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1604369157367},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1604369157366},{"_id":"public/atom.xml","hash":"2e1c6895fad764193ea3ce62959434abb8425c9a","modified":1605790348748},{"_id":"public/search.xml","hash":"dc04eb3775705ceecef82eaf13c4282a8eae44b9","modified":1605790348748},{"_id":"public/404.html","hash":"82fc7af6c2ca1d603fedf24181f5ed24aa23fdde","modified":1605790348748},{"_id":"public/contact/index.html","hash":"07431976fe3d3136320b49720034a0388efd1f1d","modified":1605790348748},{"_id":"public/categories/index.html","hash":"e24959d18cdef74df0dde67bb602f90579367849","modified":1605790348748},{"_id":"public/friends/index.html","hash":"7cc37dc4d60bbd77c83e69f92def1062d7488f6f","modified":1605790348748},{"_id":"public/about/index.html","hash":"d624a45b2ff24c5b4936893d0655c1fa884813e8","modified":1605790348748},{"_id":"public/tags/index.html","hash":"49670a74e219214ecb66fe4bc7096bcbd3f37e68","modified":1605790348748},{"_id":"public/categories/文档操作/index.html","hash":"e561f3d40e46314c0ac9ecbd0e7bb8fa94da0d0f","modified":1605790348748},{"_id":"public/categories/文档操作/hexo/index.html","hash":"0a71ed8d19e8ab1a5741138108fd5f4fc5fd306e","modified":1605790348748},{"_id":"public/2020/11/19/深入理解java虚拟机（一）：内存分配策略/index.html","hash":"9adc736a65eeda4bbdcc4de269222a9c2471f34c","modified":1605790348748},{"_id":"public/2020/11/18/String-intern-方法解读/index.html","hash":"94a91fc2461829a690ff843cdc7bac1152fdb639","modified":1605790348748},{"_id":"public/2020/11/06/设计模式总结/index.html","hash":"196791d80a0807558654322275084e37fdd3fe27","modified":1605790348748},{"_id":"public/2020/11/06/单例模式/index.html","hash":"8ba2ccf076b8f2506d3aa70a338a36cbfcb2a949","modified":1605790348748},{"_id":"public/2020/11/09/java日记/index.html","hash":"dda2765965fa994bc2df1451bf1b4bf3731c186c","modified":1605790348748},{"_id":"public/2020/11/06/业务代表模式/index.html","hash":"e6008ab35eb66b467ec26da23198ab69c5bcbfc7","modified":1605790348748},{"_id":"public/2020/11/06/MVC模式/index.html","hash":"bcd59da5be0a85a22176ce6435373c03caa9476d","modified":1605790348748},{"_id":"public/2020/11/06/访问者模式/index.html","hash":"a76d66000879d680c73a5eae224bc724a6b98135","modified":1605790348748},{"_id":"public/2020/11/06/策略模式/index.html","hash":"4cfb50145c19fc2a2a561711e32f6895e3ccc2fc","modified":1605790348748},{"_id":"public/2020/11/05/空对象模式/index.html","hash":"403b3880bc5ff059d54af5f04b9f7f7f7d85e6a0","modified":1605790348748},{"_id":"public/2020/11/06/模板模式/index.html","hash":"6967f5e832414b70b54c5784b155048427161422","modified":1605790348748},{"_id":"public/2020/11/05/状态模式/index.html","hash":"142d0c83adc53f98ba34a22098bf0ae99ce2263a","modified":1605790348748},{"_id":"public/2020/11/05/观察者模式/index.html","hash":"8dae1a7b33ae479b0316ecc047c562403009f7ce","modified":1605790348748},{"_id":"public/2020/11/05/备忘录模式/index.html","hash":"e7ef89b8a49cde4a94ebf79411d966e689e347b6","modified":1605790348748},{"_id":"public/2020/11/05/迭代器模式/index.html","hash":"bf201d9f20c0b7c618d2bbd17ccebb832edbd8a2","modified":1605790348748},{"_id":"public/2020/11/05/解释器模式/index.html","hash":"260b502574a51d1b8b1d26598702510691a99085","modified":1605790348748},{"_id":"public/2020/11/05/中介者模式/index.html","hash":"9699a9c2fc7c9c94234edb660b6a14c8501a26b1","modified":1605790348748},{"_id":"public/2020/11/04/命令模式/index.html","hash":"52640f171c5217c1f8ed8501c12998a2550e696a","modified":1605790348748},{"_id":"public/2020/11/03/责任链模式/index.html","hash":"b61ba4be5b9af7727e6ff76dfc665300289bdb02","modified":1605790348748},{"_id":"public/2020/11/03/代理模式/index.html","hash":"7f53e8994883f64845eec567057f571517a38bcc","modified":1605790348748},{"_id":"public/2020/11/03/组合模式/index.html","hash":"f24b8258bac638d569059583188187734a6c2071","modified":1605790348748},{"_id":"public/2020/11/03/过滤器模式/index.html","hash":"c059c4d9a42b92352aabd006f53bfe3c7083fc02","modified":1605790348748},{"_id":"public/2020/11/03/外观模式/index.html","hash":"ec3fc10789083fbe9ce8cd0e30ed71d8f78dd6a7","modified":1605790348748},{"_id":"public/2020/11/03/桥接模式/index.html","hash":"926365f623e331132463e04e584ee053b2e30924","modified":1605790348748},{"_id":"public/2020/11/03/适配器模式/index.html","hash":"7a06431fc11e6facce04895d8b7cd5d530a13fe5","modified":1605790348748},{"_id":"public/2020/11/02/原型模式/index.html","hash":"c055b3aed04fdff61521de628a596eb7c448201d","modified":1605790348748},{"_id":"public/2020/11/01/抽象工厂模式/index.html","hash":"f473bb3b138b98ce736d6d67fc86deffedae25ba","modified":1605790348748},{"_id":"public/2020/10/31/工厂模式/index.html","hash":"7e6270a575fa19885755396d01a444589f7fca2b","modified":1605790348748},{"_id":"public/2020/11/02/建造者模式/index.html","hash":"62433859d0407c229dfe18a2d1f2a704a3a6bf39","modified":1605790348748},{"_id":"public/2020/10/31/享元模式/index.html","hash":"2420cc0bbadd49c247c40d89461640a98e53777c","modified":1605790348748},{"_id":"public/2020/10/31/装饰器模式/index.html","hash":"697eb9474b6853ea131810457043372b03f7878c","modified":1605790348748},{"_id":"public/2020/10/27/hexo使用记录/index.html","hash":"083516f9029914cdc29d65a71f909bcf057de408","modified":1605790348748},{"_id":"public/archives/index.html","hash":"a73144281ad71ab93563c6e3520c38ec5cec5705","modified":1605790348748},{"_id":"public/2020/10/28/Executors线程池/index.html","hash":"6ce581a9f337d6528920a3ceca107e47d65626ce","modified":1605790348748},{"_id":"public/2020/10/27/hello-world/index.html","hash":"8749e4137a0e57dcffa0c08c7171f0d4f9ab313b","modified":1605790348748},{"_id":"public/archives/page/2/index.html","hash":"94c00659c6645dbad56f23433e1f0a9ffe4d0ca1","modified":1605790348748},{"_id":"public/archives/page/3/index.html","hash":"6bc126e624d931f792fcf39810f88b58bac0521c","modified":1605790348748},{"_id":"public/archives/page/4/index.html","hash":"602458cf98b50f4bd189deba7ce3df7c0c36aa4a","modified":1605790348748},{"_id":"public/archives/2020/index.html","hash":"06b147f1482e60b53190e92ce159619f9de26983","modified":1605790348748},{"_id":"public/archives/2020/page/2/index.html","hash":"f234f009a21cf0eb66a8938b86f63c1b15ee5b53","modified":1605790348748},{"_id":"public/archives/2020/page/3/index.html","hash":"3d04b0c71f515a726bde237a3bbf43d7b689080c","modified":1605790348748},{"_id":"public/archives/2020/10/index.html","hash":"32b9259a0db87353cf717b55cfedcd7cc042239f","modified":1605790348748},{"_id":"public/archives/2020/page/4/index.html","hash":"e1d0fbe512a4714510ae914f8e5400faf85c7cd0","modified":1605790348748},{"_id":"public/archives/2020/11/index.html","hash":"bbe47e04161805de13180b4d54596e3fcf14bec2","modified":1605790348748},{"_id":"public/archives/2020/11/page/2/index.html","hash":"3d71f1d0e0eb2be79db1152620816344350a5bf7","modified":1605790348748},{"_id":"public/archives/2020/11/page/3/index.html","hash":"ed5f48bacf8c3df742ecc6f05be6c3698d381afe","modified":1605790348748},{"_id":"public/index.html","hash":"dc584561b7d36d04b67866192939cdd2993c2a89","modified":1605790348748},{"_id":"public/page/2/index.html","hash":"2581e710609bebbb92c4f83664963746eeda9607","modified":1605790348748},{"_id":"public/page/4/index.html","hash":"72df743b153c9af47977c4a25d541b4c93dafcbe","modified":1605790348748},{"_id":"public/page/3/index.html","hash":"58f9f29ca96adcbb639c7c8c5e42b6432855114b","modified":1605790348748},{"_id":"public/tags/java/index.html","hash":"54f21f392b119a960123cafb1110e2a1af41e945","modified":1605790348748},{"_id":"public/tags/java/page/2/index.html","hash":"f3367fd5ada3d9ac8e7cca9a3f022cb54b9be201","modified":1605790348748},{"_id":"public/tags/java/page/3/index.html","hash":"8dc976eeded161a6d79c32774b5e1238cd3876ab","modified":1605790348748},{"_id":"public/tags/java/page/4/index.html","hash":"39d8752aacd5e9eb2a939ad361a670d5c3942bab","modified":1605790348748},{"_id":"public/tags/设计模式/index.html","hash":"07ec53c9d3d56f6950a54ba03486894c9add8ac1","modified":1605790348748},{"_id":"public/tags/设计模式/page/2/index.html","hash":"caa5308c2dc4a5e0b74323fb59f0be604783858a","modified":1605790348748},{"_id":"public/tags/设计模式/page/3/index.html","hash":"4aad077f203b20e38c7c96a37a2ca671d354ef54","modified":1605790348748},{"_id":"public/tags/hexo/index.html","hash":"7825623e4a3736b540c6e74102cc8fa8153fbfda","modified":1605790348748},{"_id":"public/tags/问题记录/index.html","hash":"3e81fd1961f195551d4764659dcd5057cfd88de3","modified":1605790348748},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1605790348748},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1605790348748},{"_id":"public/images/android-chrome-192x192.png","hash":"01d75947282acf98919c2f31f4df17757261c180","modified":1605790348748},{"_id":"public/images/apple-touch-icon.png","hash":"05b572e0bcd8e818c31f49777aefffc51754c1f9","modified":1605790348748},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1605790348748},{"_id":"public/images/avatar.jpg","hash":"b98a55111d9024939957fa5266bb47438c33ae50","modified":1605790348748},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1605790348748},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1605790348748},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1605790348748},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1605790348748},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1605790348748},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1605790348748},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1605790348748},{"_id":"public/images/favicon-16x16.png","hash":"10466a4116e1a6d9909649324054e5fafaf7ccbd","modified":1605790348748},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1605790348748},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1605790348748},{"_id":"public/images/favicon.ico","hash":"c0ec85732c6e04af8afe645ac27e66769a70d554","modified":1605790348748},{"_id":"public/images/mstile-150x150.png","hash":"7e74348b41a01bdb59ee5c40431c7f90126e0513","modified":1605790348748},{"_id":"public/images/favicon-32x32.png","hash":"72d82a682c577913f4dba67c8791925f85858609","modified":1605790348748},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1605790348748},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1605790348748},{"_id":"public/2020/10/27/hexo使用记录/image-20201027162208507.png","hash":"2304baa3f1d61c7696b09433bfcb5c2848d89cef","modified":1605790348748},{"_id":"public/2020/10/27/hexo使用记录/image-20201027162349781.png","hash":"6790dff65777ca2d90601cee480fa794d5a5395f","modified":1605790348748},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1605790348748},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1605790348748},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1605790348748},{"_id":"public/images/android-chrome-512x512.png","hash":"7dfeb605519dc3b57180a7c047e01298c6d67cfa","modified":1605790348748},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1605790348748},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1605790348748},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1605790348748},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1605790348748},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1605790348748},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1605790348748},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1605790348748},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1605790348748},{"_id":"public/css/main.css","hash":"a999ae19f7ef0f51dde18e4a56840876a02d80a7","modified":1605790348748},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1605790348748},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1605790348748},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1605790348748},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1605790348748}],"Category":[{"name":"文档操作","_id":"ckhou44wc000frcwo49op0x62"},{"name":"hexo","parent":"ckhou44wc000frcwo49op0x62","_id":"ckhou44wg000nrcwodth8foqe"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}],"Page":[{"_content":"\\---\ntitle: 404 Not Found\ndate: 2020-10-27 10:41:27\n\n\n<center>\n对不起，您所访问的页面不存在或者已删除。\n您可以<a href=\"https://radio93.github.io>\">点击此处</a>返回首页。\n</center>\n\n<blockquote class=\"blockquote-center\">\n    radio93\n</blockquote>","source":"404.md","raw":"\\---\ntitle: 404 Not Found\ndate: 2020-10-27 10:41:27\n\n\n<center>\n对不起，您所访问的页面不存在或者已删除。\n您可以<a href=\"https://radio93.github.io>\">点击此处</a>返回首页。\n</center>\n\n<blockquote class=\"blockquote-center\">\n    radio93\n</blockquote>","date":"2020-11-03T02:05:57.153Z","updated":"2020-11-03T02:05:57.153Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ckhou44vz0000rcwo35xocsfy","content":"<p>-–<br>title: 404 Not Found<br>date: 2020-10-27 10:41:27</p>\n<center>\n对不起，您所访问的页面不存在或者已删除。\n您可以<a href=\"https://radio93.github.io>\">点击此处</a>返回首页。\n</center>\n\n<blockquote class=\"blockquote-center\">\n    radio93\n</blockquote>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>-–<br>title: 404 Not Found<br>date: 2020-10-27 10:41:27</p>\n<center>\n对不起，您所访问的页面不存在或者已删除。\n您可以<a href=\"https://radio93.github.io>\">点击此处</a>返回首页。\n</center>\n\n<blockquote class=\"blockquote-center\">\n    radio93\n</blockquote>"},{"title":"contact","date":"2020-11-09T06:44:16.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-11-09 14:44:16\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2020-11-09T06:44:22.402Z","path":"contact/index.html","comments":1,"_id":"ckhou44w40002rcwoct836vf0","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-11-09T06:43:40.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-11-09 14:43:40\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2020-11-09T06:43:57.022Z","path":"about/index.html","comments":1,"_id":"ckhou44w70005rcwo5hx46ndg","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"categories","date":"2020-10-27T02:02:49.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-10-27 10:02:49\ntype: categories\ncomments: false\n---\n","updated":"2020-11-03T02:05:57.161Z","path":"categories/index.html","layout":"page","_id":"ckhou44w80007rcwo8i7x1n8x","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"friends","date":"2020-11-09T06:44:32.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-11-09 14:44:32\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2020-11-09T06:44:41.208Z","path":"friends/index.html","comments":1,"_id":"ckhou44w90009rcwo551xhxus","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-10-27T02:05:29.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-10-27 10:05:29\ntype: tags\ncomments: false\n---\n","updated":"2020-11-03T02:05:57.162Z","path":"tags/index.html","layout":"page","_id":"ckhou44wb000drcwogryc2c4i","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""}],"Post":[{"title":"Executors线程池","date":"2020-10-28T06:21:17.000Z","_content":"\n##### newCachedThreadPool\n\n创建一个可缓存的线程池\n\n> 如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。\n\n示例：\n\n```java\npublic static ExecutorService executor = Executors.newCachedThreadPool();\nexecutor.submit(new Runnable() {\n\tpublic void run () {\n\t\t//TODO\n\t}\n});\n```\n\n##### newFixedThreadPool\n\n创建固定大小的线程池\n\n>每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。\n\n示例：\n\n```java\npackage test;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class FixedThreadPoolDemo extends Thread {\n    private int index;\n\n    public FixedThreadPoolDemo(int index) {\n        this.index = index;\n    }\n\n    public static void main(String[] args) {\n        ExecutorService service = Executors.newFixedThreadPool(2);\n        for (int i = 0; i < 5; i++) {\n            service.execute(new FixedThreadPoolDemo(i));\n        }\n        System.out.println(\"finish\");\n        service.shutdown();\n    }\n\n    public void run() {\n        try {\n            System.out.println(Thread.currentThread().getName());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n运行结果：\n\n```java\nfinish\npool-1-thread-2\npool-1-thread-1\npool-1-thread-1\npool-1-thread-1\npool-1-thread-2\n```\n\n##### newSingleThreadExecutor\n\n创建一个单线程的线程池\n\n>   这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。\n\n示例：\n\n```java\npackage test;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingleThreadPoolDemo extends Thread {\n    private int index;\n\n    public SingleThreadPoolDemo(int index) {\n        this.index = index;\n    }\n\n    public static void main(String[] args) {\n        ExecutorService service = Executors.newSingleThreadExecutor();\n        for (int i = 0; i < 5; i++) {\n            service.execute(new SingleThreadPoolDemo(i));\n        }\n        System.out.println(\"finish\");\n        service.shutdown();\n    }\n\n    public void run() {\n        try {\n            System.out.println(Thread.currentThread().getName());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n运行结果：\n\n```java\nfinish\npool-1-thread-1\npool-1-thread-1\npool-1-thread-1\npool-1-thread-1\npool-1-thread-1\n```\n\n##### newScheduledThreadPool\n\n创建一个周期任务线程池\n\n>此线程池支持定时以及周期性执行任务的需求\n\n示例：\n\n```java\npackage test;\n\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class ScheduledThreadPoolDemo {\n    public static void main(String[] args) {\n        ScheduledExecutorService service = Executors.newScheduledThreadPool(1);\n        service.schedule(() -> System.out.println(Thread.currentThread().getName()), 2, TimeUnit.SECONDS);\n    }\n\n}\n```\n\n运行结果(该程序表示延迟2s执行)：\n\n```\npool-1-thread-1\n```\n\n##### scheduleAtFixedRate\n\n周期线程中的定时任务\n\n示例：\n\n```java\npackage test;\n\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class ScheduledThreadPoolDemo {\n    public static void main(String[] args) {\n        ScheduledExecutorService service = Executors.newScheduledThreadPool(1);\n        service.scheduleAtFixedRate(() -> System.out.println(Thread.currentThread().getName()), 5, 2,TimeUnit.SECONDS);\n    }\n\n}\n```\n\n运行结果(该程序表示程序启动5s后，每隔2s执行一次)：\n\n```java\npool-1-thread-1\npool-1-thread-1\npool-1-thread-1\n.\n.\n.\n```\n\n##### scheduleWithFixedDelay\n\n周期线程中的定时任务\n\n示例：\n\n```java\npackage test;\n\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class ScheduledThreadPoolDemo {\n    public static void main(String[] args) {\n        ScheduledExecutorService service = Executors.newScheduledThreadPool(1);\n        service.scheduleWithFixedDelay(() -> System.out.println(Thread.currentThread().getName()), 5, 2,TimeUnit.SECONDS);\n    }\n\n}\n```\n\n运行结果\n\n```java\npool-1-thread-1\npool-1-thread-1\npool-1-thread-1\n.\n.\n.\n```\n\n> 说明：scheduleAtFixedRate和scheduleWithFixedDelay的区别在于前者是时间间隔过后，再检查任务是否结束，如果结束了，立即执行下个任务，后者是先等待任务结束，然后再等待时间间隔过后再执行。\n\n##### newSingleThreadScheduledExecutor\n\n定时任务\n\n示例：\n\n```java\npackage test;\n\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class SingleThreadScheduledPoolDemo {\n    public static void main(String[] args) {\n        ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();\n        service.scheduleAtFixedRate(() -> System.out.println(Thread.currentThread().getName()), 5, 2,TimeUnit.SECONDS);\n    }\n\n}\n```\n\n运行结果(该程序表示程序启动5s后，每隔2s执行一次)：\n\n```java\npool-1-thread-1\npool-1-thread-1\npool-1-thread-1\n.\n.\n.\n```\n\n> ScheduledExecutorService执行的周期任务，如果执行过程中抛出了异常，那么任务就会停止，周期也会停止。","source":"_posts/Executors线程池.md","raw":"---\ntitle: Executors线程池\ndate: 2020-10-28 14:21:17\ntags:\n- java\n---\n\n##### newCachedThreadPool\n\n创建一个可缓存的线程池\n\n> 如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。\n\n示例：\n\n```java\npublic static ExecutorService executor = Executors.newCachedThreadPool();\nexecutor.submit(new Runnable() {\n\tpublic void run () {\n\t\t//TODO\n\t}\n});\n```\n\n##### newFixedThreadPool\n\n创建固定大小的线程池\n\n>每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。\n\n示例：\n\n```java\npackage test;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class FixedThreadPoolDemo extends Thread {\n    private int index;\n\n    public FixedThreadPoolDemo(int index) {\n        this.index = index;\n    }\n\n    public static void main(String[] args) {\n        ExecutorService service = Executors.newFixedThreadPool(2);\n        for (int i = 0; i < 5; i++) {\n            service.execute(new FixedThreadPoolDemo(i));\n        }\n        System.out.println(\"finish\");\n        service.shutdown();\n    }\n\n    public void run() {\n        try {\n            System.out.println(Thread.currentThread().getName());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n运行结果：\n\n```java\nfinish\npool-1-thread-2\npool-1-thread-1\npool-1-thread-1\npool-1-thread-1\npool-1-thread-2\n```\n\n##### newSingleThreadExecutor\n\n创建一个单线程的线程池\n\n>   这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。\n\n示例：\n\n```java\npackage test;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingleThreadPoolDemo extends Thread {\n    private int index;\n\n    public SingleThreadPoolDemo(int index) {\n        this.index = index;\n    }\n\n    public static void main(String[] args) {\n        ExecutorService service = Executors.newSingleThreadExecutor();\n        for (int i = 0; i < 5; i++) {\n            service.execute(new SingleThreadPoolDemo(i));\n        }\n        System.out.println(\"finish\");\n        service.shutdown();\n    }\n\n    public void run() {\n        try {\n            System.out.println(Thread.currentThread().getName());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n运行结果：\n\n```java\nfinish\npool-1-thread-1\npool-1-thread-1\npool-1-thread-1\npool-1-thread-1\npool-1-thread-1\n```\n\n##### newScheduledThreadPool\n\n创建一个周期任务线程池\n\n>此线程池支持定时以及周期性执行任务的需求\n\n示例：\n\n```java\npackage test;\n\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class ScheduledThreadPoolDemo {\n    public static void main(String[] args) {\n        ScheduledExecutorService service = Executors.newScheduledThreadPool(1);\n        service.schedule(() -> System.out.println(Thread.currentThread().getName()), 2, TimeUnit.SECONDS);\n    }\n\n}\n```\n\n运行结果(该程序表示延迟2s执行)：\n\n```\npool-1-thread-1\n```\n\n##### scheduleAtFixedRate\n\n周期线程中的定时任务\n\n示例：\n\n```java\npackage test;\n\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class ScheduledThreadPoolDemo {\n    public static void main(String[] args) {\n        ScheduledExecutorService service = Executors.newScheduledThreadPool(1);\n        service.scheduleAtFixedRate(() -> System.out.println(Thread.currentThread().getName()), 5, 2,TimeUnit.SECONDS);\n    }\n\n}\n```\n\n运行结果(该程序表示程序启动5s后，每隔2s执行一次)：\n\n```java\npool-1-thread-1\npool-1-thread-1\npool-1-thread-1\n.\n.\n.\n```\n\n##### scheduleWithFixedDelay\n\n周期线程中的定时任务\n\n示例：\n\n```java\npackage test;\n\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class ScheduledThreadPoolDemo {\n    public static void main(String[] args) {\n        ScheduledExecutorService service = Executors.newScheduledThreadPool(1);\n        service.scheduleWithFixedDelay(() -> System.out.println(Thread.currentThread().getName()), 5, 2,TimeUnit.SECONDS);\n    }\n\n}\n```\n\n运行结果\n\n```java\npool-1-thread-1\npool-1-thread-1\npool-1-thread-1\n.\n.\n.\n```\n\n> 说明：scheduleAtFixedRate和scheduleWithFixedDelay的区别在于前者是时间间隔过后，再检查任务是否结束，如果结束了，立即执行下个任务，后者是先等待任务结束，然后再等待时间间隔过后再执行。\n\n##### newSingleThreadScheduledExecutor\n\n定时任务\n\n示例：\n\n```java\npackage test;\n\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class SingleThreadScheduledPoolDemo {\n    public static void main(String[] args) {\n        ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();\n        service.scheduleAtFixedRate(() -> System.out.println(Thread.currentThread().getName()), 5, 2,TimeUnit.SECONDS);\n    }\n\n}\n```\n\n运行结果(该程序表示程序启动5s后，每隔2s执行一次)：\n\n```java\npool-1-thread-1\npool-1-thread-1\npool-1-thread-1\n.\n.\n.\n```\n\n> ScheduledExecutorService执行的周期任务，如果执行过程中抛出了异常，那么任务就会停止，周期也会停止。","slug":"Executors线程池","published":1,"updated":"2020-11-03T02:05:57.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44w10001rcwo1xek36vs","content":"<h5 id=\"newCachedThreadPool\"><a href=\"#newCachedThreadPool\" class=\"headerlink\" title=\"newCachedThreadPool\"></a>newCachedThreadPool</h5><p>创建一个可缓存的线程池</p>\n<blockquote>\n<p>如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class=\"line\">executor.submit(<span class=\"keyword\">new</span> Runnable() {</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span> <span class=\"params\">()</span> </span>{</span><br><span class=\"line\">\t\t<span class=\"comment\">//TODO</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"newFixedThreadPool\"><a href=\"#newFixedThreadPool\" class=\"headerlink\" title=\"newFixedThreadPool\"></a>newFixedThreadPool</h5><p>创建固定大小的线程池</p>\n<blockquote>\n<p>每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FixedThreadPoolDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FixedThreadPoolDemo</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.index = index;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        ExecutorService service = Executors.newFixedThreadPool(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) {</span><br><span class=\"line\">            service.execute(<span class=\"keyword\">new</span> FixedThreadPoolDemo(i));</span><br><span class=\"line\">        }</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"finish\"</span>);</span><br><span class=\"line\">        service.shutdown();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">try</span> {</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        } <span class=\"keyword\">catch</span> (Exception e) {</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finish</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"newSingleThreadExecutor\"><a href=\"#newSingleThreadExecutor\" class=\"headerlink\" title=\"newSingleThreadExecutor\"></a>newSingleThreadExecutor</h5><p>创建一个单线程的线程池</p>\n<blockquote>\n<p>  这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleThreadPoolDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SingleThreadPoolDemo</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.index = index;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        ExecutorService service = Executors.newSingleThreadExecutor();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) {</span><br><span class=\"line\">            service.execute(<span class=\"keyword\">new</span> SingleThreadPoolDemo(i));</span><br><span class=\"line\">        }</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"finish\"</span>);</span><br><span class=\"line\">        service.shutdown();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">try</span> {</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        } <span class=\"keyword\">catch</span> (Exception e) {</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finish</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"newScheduledThreadPool\"><a href=\"#newScheduledThreadPool\" class=\"headerlink\" title=\"newScheduledThreadPool\"></a>newScheduledThreadPool</h5><p>创建一个周期任务线程池</p>\n<blockquote>\n<p>此线程池支持定时以及周期性执行任务的需求</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduledThreadPoolDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\">        service.schedule(() -&gt; System.out.println(Thread.currentThread().getName()), <span class=\"number\">2</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果(该程序表示延迟2s执行)：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-1-thread-1</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"scheduleAtFixedRate\"><a href=\"#scheduleAtFixedRate\" class=\"headerlink\" title=\"scheduleAtFixedRate\"></a>scheduleAtFixedRate</h5><p>周期线程中的定时任务</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduledThreadPoolDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\">        service.scheduleAtFixedRate(() -&gt; System.out.println(Thread.currentThread().getName()), <span class=\"number\">5</span>, <span class=\"number\">2</span>,TimeUnit.SECONDS);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果(该程序表示程序启动5s后，每隔2s执行一次)：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"scheduleWithFixedDelay\"><a href=\"#scheduleWithFixedDelay\" class=\"headerlink\" title=\"scheduleWithFixedDelay\"></a>scheduleWithFixedDelay</h5><p>周期线程中的定时任务</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduledThreadPoolDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\">        service.scheduleWithFixedDelay(() -&gt; System.out.println(Thread.currentThread().getName()), <span class=\"number\">5</span>, <span class=\"number\">2</span>,TimeUnit.SECONDS);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>说明：scheduleAtFixedRate和scheduleWithFixedDelay的区别在于前者是时间间隔过后，再检查任务是否结束，如果结束了，立即执行下个任务，后者是先等待任务结束，然后再等待时间间隔过后再执行。</p>\n</blockquote>\n<h5 id=\"newSingleThreadScheduledExecutor\"><a href=\"#newSingleThreadScheduledExecutor\" class=\"headerlink\" title=\"newSingleThreadScheduledExecutor\"></a>newSingleThreadScheduledExecutor</h5><p>定时任务</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleThreadScheduledPoolDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</span><br><span class=\"line\">        service.scheduleAtFixedRate(() -&gt; System.out.println(Thread.currentThread().getName()), <span class=\"number\">5</span>, <span class=\"number\">2</span>,TimeUnit.SECONDS);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果(该程序表示程序启动5s后，每隔2s执行一次)：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>ScheduledExecutorService执行的周期任务，如果执行过程中抛出了异常，那么任务就会停止，周期也会停止。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h5 id=\"newCachedThreadPool\"><a href=\"#newCachedThreadPool\" class=\"headerlink\" title=\"newCachedThreadPool\"></a>newCachedThreadPool</h5><p>创建一个可缓存的线程池</p>\n<blockquote>\n<p>如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class=\"line\">executor.submit(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//TODO</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"newFixedThreadPool\"><a href=\"#newFixedThreadPool\" class=\"headerlink\" title=\"newFixedThreadPool\"></a>newFixedThreadPool</h5><p>创建固定大小的线程池</p>\n<blockquote>\n<p>每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FixedThreadPoolDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FixedThreadPoolDemo</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.index = index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ExecutorService service = Executors.newFixedThreadPool(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            service.execute(<span class=\"keyword\">new</span> FixedThreadPoolDemo(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;finish&quot;</span>);</span><br><span class=\"line\">        service.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finish</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"newSingleThreadExecutor\"><a href=\"#newSingleThreadExecutor\" class=\"headerlink\" title=\"newSingleThreadExecutor\"></a>newSingleThreadExecutor</h5><p>创建一个单线程的线程池</p>\n<blockquote>\n<p>  这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleThreadPoolDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SingleThreadPoolDemo</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.index = index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ExecutorService service = Executors.newSingleThreadExecutor();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            service.execute(<span class=\"keyword\">new</span> SingleThreadPoolDemo(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;finish&quot;</span>);</span><br><span class=\"line\">        service.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finish</span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"newScheduledThreadPool\"><a href=\"#newScheduledThreadPool\" class=\"headerlink\" title=\"newScheduledThreadPool\"></a>newScheduledThreadPool</h5><p>创建一个周期任务线程池</p>\n<blockquote>\n<p>此线程池支持定时以及周期性执行任务的需求</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduledThreadPoolDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\">        service.schedule(() -&gt; System.out.println(Thread.currentThread().getName()), <span class=\"number\">2</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果(该程序表示延迟2s执行)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-1-thread-1</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"scheduleAtFixedRate\"><a href=\"#scheduleAtFixedRate\" class=\"headerlink\" title=\"scheduleAtFixedRate\"></a>scheduleAtFixedRate</h5><p>周期线程中的定时任务</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduledThreadPoolDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\">        service.scheduleAtFixedRate(() -&gt; System.out.println(Thread.currentThread().getName()), <span class=\"number\">5</span>, <span class=\"number\">2</span>,TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果(该程序表示程序启动5s后，每隔2s执行一次)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"scheduleWithFixedDelay\"><a href=\"#scheduleWithFixedDelay\" class=\"headerlink\" title=\"scheduleWithFixedDelay\"></a>scheduleWithFixedDelay</h5><p>周期线程中的定时任务</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduledThreadPoolDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\">        service.scheduleWithFixedDelay(() -&gt; System.out.println(Thread.currentThread().getName()), <span class=\"number\">5</span>, <span class=\"number\">2</span>,TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>说明：scheduleAtFixedRate和scheduleWithFixedDelay的区别在于前者是时间间隔过后，再检查任务是否结束，如果结束了，立即执行下个任务，后者是先等待任务结束，然后再等待时间间隔过后再执行。</p>\n</blockquote>\n<h5 id=\"newSingleThreadScheduledExecutor\"><a href=\"#newSingleThreadScheduledExecutor\" class=\"headerlink\" title=\"newSingleThreadScheduledExecutor\"></a>newSingleThreadScheduledExecutor</h5><p>定时任务</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleThreadScheduledPoolDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</span><br><span class=\"line\">        service.scheduleAtFixedRate(() -&gt; System.out.println(Thread.currentThread().getName()), <span class=\"number\">5</span>, <span class=\"number\">2</span>,TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果(该程序表示程序启动5s后，每隔2s执行一次)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">pool-<span class=\"number\">1</span>-thread-<span class=\"number\">1</span></span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ScheduledExecutorService执行的周期任务，如果执行过程中抛出了异常，那么任务就会停止，周期也会停止。</p>\n</blockquote>\n"},{"title":"MVC模式","date":"2020-11-06T06:13:27.000Z","_content":"\n# MVC模式\n\n>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。\n>\n>**Model（模型）** - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。\n>\n>**View（视图）** - 视图代表模型包含的数据的可视化。\n>\n>**Controller（控制器）** - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。\n\n##### 示例演示：\n\n1. 新建一个model\n\n   ```java\n   package test.mvc;\n   \n   import lombok.Data;\n   \n   @Data\n   public class PeopleModel {\n   \n       private Integer id;\n       private String name;\n   }\n   ```\n\n2. 新建view\n\n   ```java\n   package test.mvc;\n   \n   public class PeopleView {\n       void showPeople(PeopleModel model) {\n           System.out.println(model.toString());\n       }\n   }\n   ```\n\n3. 新建controller\n\n   ```java\n   package test.mvc;\n   \n   public class PeopleController {\n       private PeopleModel model;\n       private PeopleView view;\n   \n       public PeopleController(PeopleModel model, PeopleView view) {\n           this.model = model;\n           this.view = view;\n       }\n   \n       public void setPeopleId(Integer id){\n           model.setId(id);\n       }\n   \n       public Integer getPeopleId(){\n           return model.getId();\n       }\n   \n       public void setPeopleName(String name){\n           model.setName(name);\n       }\n   \n       public String getPeopleName(){\n           return model.getName();\n       }\n       void showPeople(){\n           view.showPeople(model);\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.mvc;\n   \n   public class MvcDemo {\n       static PeopleModel getModel() {\n           PeopleModel model = new PeopleModel();\n           model.setId(1);\n           model.setName(\"abc\");\n           return model;\n       }\n   \n       public static void main(String[] args) {\n           //模拟数据库取值\n           PeopleModel model = getModel();\n           //创建视图\n           PeopleView view = new PeopleView();\n           //把people信息输出给控制台\n           PeopleController controller = new PeopleController(model, view);\n           controller.showPeople();\n   \n           //更新数据\n           controller.setPeopleId(2);\n           controller.setPeopleName(\"def\");\n           //再次输出\n           controller.showPeople();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   PeopleModel(id=1, name=abc)\n   PeopleModel(id=2, name=def)\n   ```\n\n##### 说明：\n\n> MVC模式是典型的前后端数据交互模式。","source":"_posts/MVC模式.md","raw":"---\ntitle: MVC模式\ndate: 2020-11-06 14:13:27\ntags:\n- java\n- 设计模式\n---\n\n# MVC模式\n\n>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。\n>\n>**Model（模型）** - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。\n>\n>**View（视图）** - 视图代表模型包含的数据的可视化。\n>\n>**Controller（控制器）** - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。\n\n##### 示例演示：\n\n1. 新建一个model\n\n   ```java\n   package test.mvc;\n   \n   import lombok.Data;\n   \n   @Data\n   public class PeopleModel {\n   \n       private Integer id;\n       private String name;\n   }\n   ```\n\n2. 新建view\n\n   ```java\n   package test.mvc;\n   \n   public class PeopleView {\n       void showPeople(PeopleModel model) {\n           System.out.println(model.toString());\n       }\n   }\n   ```\n\n3. 新建controller\n\n   ```java\n   package test.mvc;\n   \n   public class PeopleController {\n       private PeopleModel model;\n       private PeopleView view;\n   \n       public PeopleController(PeopleModel model, PeopleView view) {\n           this.model = model;\n           this.view = view;\n       }\n   \n       public void setPeopleId(Integer id){\n           model.setId(id);\n       }\n   \n       public Integer getPeopleId(){\n           return model.getId();\n       }\n   \n       public void setPeopleName(String name){\n           model.setName(name);\n       }\n   \n       public String getPeopleName(){\n           return model.getName();\n       }\n       void showPeople(){\n           view.showPeople(model);\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.mvc;\n   \n   public class MvcDemo {\n       static PeopleModel getModel() {\n           PeopleModel model = new PeopleModel();\n           model.setId(1);\n           model.setName(\"abc\");\n           return model;\n       }\n   \n       public static void main(String[] args) {\n           //模拟数据库取值\n           PeopleModel model = getModel();\n           //创建视图\n           PeopleView view = new PeopleView();\n           //把people信息输出给控制台\n           PeopleController controller = new PeopleController(model, view);\n           controller.showPeople();\n   \n           //更新数据\n           controller.setPeopleId(2);\n           controller.setPeopleName(\"def\");\n           //再次输出\n           controller.showPeople();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   PeopleModel(id=1, name=abc)\n   PeopleModel(id=2, name=def)\n   ```\n\n##### 说明：\n\n> MVC模式是典型的前后端数据交互模式。","slug":"MVC模式","published":1,"updated":"2020-11-06T06:39:31.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44w40003rcwodpke1lr3","content":"<h1 id=\"MVC模式\"><a href=\"#MVC模式\" class=\"headerlink\" title=\"MVC模式\"></a>MVC模式</h1><blockquote>\n<p>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。</p>\n<p><strong>Model（模型）</strong> - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</p>\n<p><strong>View（视图）</strong> - 视图代表模型包含的数据的可视化。</p>\n<p><strong>Controller（控制器）</strong> - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>新建一个model</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleModel</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>新建view</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleView</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPeople</span><span class=\"params\">(PeopleModel model)</span> </span>{</span><br><span class=\"line\">        System.out.println(model.toString());</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>新建controller</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleController</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PeopleModel model;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PeopleView view;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleController</span><span class=\"params\">(PeopleModel model, PeopleView view)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.model = model;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.view = view;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPeopleId</span><span class=\"params\">(Integer id)</span></span>{</span><br><span class=\"line\">        model.setId(id);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getPeopleId</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> model.getId();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPeopleName</span><span class=\"params\">(String name)</span></span>{</span><br><span class=\"line\">        model.setName(name);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPeopleName</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> model.getName();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPeople</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">        view.showPeople(model);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MvcDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> PeopleModel <span class=\"title\">getModel</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        PeopleModel model = <span class=\"keyword\">new</span> PeopleModel();</span><br><span class=\"line\">        model.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">        model.setName(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> model;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        <span class=\"comment\">//模拟数据库取值</span></span><br><span class=\"line\">        PeopleModel model = getModel();</span><br><span class=\"line\">        <span class=\"comment\">//创建视图</span></span><br><span class=\"line\">        PeopleView view = <span class=\"keyword\">new</span> PeopleView();</span><br><span class=\"line\">        <span class=\"comment\">//把people信息输出给控制台</span></span><br><span class=\"line\">        PeopleController controller = <span class=\"keyword\">new</span> PeopleController(model, view);</span><br><span class=\"line\">        controller.showPeople();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//更新数据</span></span><br><span class=\"line\">        controller.setPeopleId(<span class=\"number\">2</span>);</span><br><span class=\"line\">        controller.setPeopleName(<span class=\"string\">\"def\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//再次输出</span></span><br><span class=\"line\">        controller.showPeople();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PeopleModel(id=<span class=\"number\">1</span>, name=abc)</span><br><span class=\"line\">PeopleModel(id=<span class=\"number\">2</span>, name=def)</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>MVC模式是典型的前后端数据交互模式。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"MVC模式\"><a href=\"#MVC模式\" class=\"headerlink\" title=\"MVC模式\"></a>MVC模式</h1><blockquote>\n<p>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。</p>\n<p><strong>Model（模型）</strong> - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</p>\n<p><strong>View（视图）</strong> - 视图代表模型包含的数据的可视化。</p>\n<p><strong>Controller（控制器）</strong> - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>新建一个model</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleModel</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建view</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPeople</span><span class=\"params\">(PeopleModel model)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(model.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PeopleModel model;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PeopleView view;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleController</span><span class=\"params\">(PeopleModel model, PeopleView view)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.model = model;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.view = view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPeopleId</span><span class=\"params\">(Integer id)</span></span>&#123;</span><br><span class=\"line\">        model.setId(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getPeopleId</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> model.getId();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPeopleName</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        model.setName(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPeopleName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> model.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPeople</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        view.showPeople(model);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MvcDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> PeopleModel <span class=\"title\">getModel</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        PeopleModel model = <span class=\"keyword\">new</span> PeopleModel();</span><br><span class=\"line\">        model.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">        model.setName(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> model;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//模拟数据库取值</span></span><br><span class=\"line\">        PeopleModel model = getModel();</span><br><span class=\"line\">        <span class=\"comment\">//创建视图</span></span><br><span class=\"line\">        PeopleView view = <span class=\"keyword\">new</span> PeopleView();</span><br><span class=\"line\">        <span class=\"comment\">//把people信息输出给控制台</span></span><br><span class=\"line\">        PeopleController controller = <span class=\"keyword\">new</span> PeopleController(model, view);</span><br><span class=\"line\">        controller.showPeople();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//更新数据</span></span><br><span class=\"line\">        controller.setPeopleId(<span class=\"number\">2</span>);</span><br><span class=\"line\">        controller.setPeopleName(<span class=\"string\">&quot;def&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//再次输出</span></span><br><span class=\"line\">        controller.showPeople();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PeopleModel(id=<span class=\"number\">1</span>, name=abc)</span><br><span class=\"line\">PeopleModel(id=<span class=\"number\">2</span>, name=def)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>MVC模式是典型的前后端数据交互模式。</p>\n</blockquote>\n"},{"title":"String.intern()方法解读","date":"2020-11-18T08:58:56.000Z","_content":"\n首先因为jdk1.7对该方法进行了改动，所以我们只分析1.7的现象。\n\n在分析这个方法前，我们先来看看HotSpot的**字符串常量池**\n\n他的存在，是为了减小对象的创建，我们不要把它想的过于复杂，比如我们在程序中写了一个`String a = \"abc\";`那么这个abc就会存储在字符串常量池中，下次再遇到这个，就不会再创建一个abc了，而是直接去字符串常量池中去找，所以`String a = \"abc\";`和`String b = \"abc\";`这两个变量，`a==b`是`true`的。因为他们都指向同一个字符串常量池。（字符串常量池1.7之前在方法区，1.7之后被挪到了堆，方法区也被挪到了元空间）。\n\n简单了解了一下字符串常量池后，我们再来看一个经典的面试题\n\n### String s1 = new String(\"abc\");这句话创建了几个字符串对象？\n\n答案是 1个或者2个，为啥呢，如果**字符串常量池**中已存在字符串常量（或者引用，后面再说）“abc”，则只会在**堆**空间创建一个字符串常量“abc”。如果池中没有字符串常量“abc”，那么它将首先在池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。\n\n比如下面这个示例\n\n```java\n@Test\npublic void test1() {\n    String s1 = new String(\"abc\");// 堆内存的地址值\n    String s2 = \"abc\";\n    System.out.println(s1 == s2);// 输出 false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。\n}\n```\n\n这个如果比较好懂，我们就再接着看一个稍微复杂一点的\n\n```java\n @Test\npublic void test2() {\n    String str1 = \"str\";\n    String str2 = \"ing\";\n\n    String str3 = \"str\" + \"ing\";//常量池中的对象\n    String str4 = str1 + str2; //在堆上创建的新的对象\n    String str5 = \"string\";//常量池中的对象\n    System.out.println(str3 == str4);//false\n    System.out.println(str3 == str5);//true\n    System.out.println(str4 == str5);//false\n}\n```\n\n我们来解读一下这个test，第一行str1和第二行str2 毫无疑问，在字符串常量池中产生，第三行和第四行有什么区别呢，第三行 两个字符串常量相加，依然在字符串常量池，第四行了两个变量相加，那么就会在堆中产生了。这里我们做一个说明：\n\n>String str3 = \"str\" + \"ing\"; 在编译期间，这种拼接会被优化，编译器直接帮你拼好，所以str3相当于直接赋值为“string”\n>\n>而相加的过程中一旦出现了对象，就不会做优化，因为这是一个对象，内存不是确定的，没有写死，无法实现优化。而且在相加的过程中，java会先new出一个StringBuilder，然后调用append()方法来将+号两遍的字符串拼接起来，然后toString()之后返回给=号左边的变量，也就是说，最后得到的是一个new出来的字符串\n\n这样一来，结果就很好理解了。\n\n我们再看一个例子\n\n```java\n@Test\npublic void intern4() {\n    String a=\"a\";\n    String ab =a+\"b\";\n    System.out.println(ab == \"ab\");//false\n}\n```\n\n我们分析一下，ab是堆，“ab”是常量池，所以false很合理，如果我们吧a变成final的，那么结果就是true了。\n\n```java\n@Test\npublic void intern4() {\n    final String a=\"a\";\n    String ab1 =a+\"b\";\n    System.out.println(ab1 == \"ab\");//true\n}\n```\n\n这就是我们刚才所说的优化了，因为a是final不可变的，所以编译的时候，a+\"b\"=\"a\"+\"b\"=\"ab\";\n\n为啥说intern要先举一下上面的例子呢，因为String的intern方法就是针对这个来设计的优化。\n\n**intern是一个本地方法，它的作用是如果字符串常量池中已经包含一个等于此String对象的字符串，则返回代表池中这个字符串的String对象的引用；否则，会将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。**\n\njdk1.7后，如果对象只存在堆中，会拷贝对象的引用到常量池中\n\n了解了基本定义之后，我们再来看下面这个例子\n\n```java\n@Test\npublic void test3(){\n    String s1 = new String(\"计算机\");\n    String s2 = s1.intern();\n    String s3 = \"计算机\";\n    System.out.println(s1 == s2);//false，因为一个是堆内存中的String对象,一个是常量池中的 String 对象，\n    System.out.println(s3 == s2);//true，因为两个都是常量池中的String对象\n}\n```\n\n第一行会在字符串常量池和堆中分别创建两个对象，s1指向堆中的引用，没有问题，s1.intern()指向常量池，此时常量池中已经有了“计算机”，所以s2此时就等于常量池中的引用，s3直接指向常量池。\n\n看了这个简单的例子后，我们稍微看个复杂点的\n\n```java\n@Test\npublic void intern3() {\n    String str1 = new String(\"abc\") + new String(\"def\");\n    System.out.println(str1.intern() == str1);//true\n    System.out.println(str1 == \"abcdef\");//true\n}\n```\n\n这个时候我们可能会有疑问str1 == \"abcdef\" 怎么可能为true呢，一个是堆，一个是常量池。我们一步步看，第一句话，我们分析一下，创建了几个对象。\n\n答案是5个，常量池中有两个，分别是abc和def，堆中有三个，abc，def和abcdef，这个没啥疑问吧，然后第二行，调用了str1.intern()。这个时候发生了什么，它去常量池中找abcdef，发现没有，做了个什么操作呢，把堆中的引用存到了常量池中，（1.7之前是拷贝值，1.7之后是拷贝引用，因为都在堆里面了，为了优化，没必要存两份了）。这个时候，常量池中存在了abcdef，这个abcdef就是str1中堆的值。所以 这个时候我们再来比较str1和abcdef，其实都是指的堆。我们把这个例子加一句话\n\n```java\n@Test\npublic void intern3() {\n    String str2 = \"abcdef\";\n    String str1 = new String(\"abc\") + new String(\"def\");\n    System.out.println(str1.intern() == str1);//false\n    System.out.println(str1 == \"abcdef\");//false\n}\n```\n\n我们只在第一行加一句话，其他的都不动。结果却是翻天覆地的。如果你对intern有了一个差不多的了解后，我们再来分析一下，第一句话，在常量池中创建了一个abcdef，第二句话效果不变，我们再来看第三句话，此时str1.intern()去常量池中找，发现有了一个常量了，这个时候 它就指向了常量池中的abcdef了，所以结果不难理解了。\n\n了解了这个之后，我们再来看一个有趣的例子\n\n```java\n@Test\npublic void intern() {\n    String str1 = new StringBuilder(\"计算机\").append(\"软件\").toString();\n    String str2 = new StringBuilder(\"ja\").append(\"va\").toString();\n\n    System.out.println(str1.intern() == str1);\n    System.out.println(str2.intern() == str2);\n}\n```\n\n根据我们刚才的推测，这俩应该都是true，因为都是指向的堆中的引用。但是实际上，结果是：\n\n```java\ntrue\nfalse\n```\n\n为啥第二个是false呢，这是因为“java”是个关键字， 这个字符串在执行StringBuilder.toString()之前就已经出现过了，字符串常量池中已经有它的引用，不符合intern()方法要求“首次遇到”的原则，“计算机软件”这个字符串则是首次出现的，因此结果返回true。\n\n最后，我们再看一个例子\n\n```java\n@Test\npublic void intern2() {\n    String a=\"a\";\n    String b=\"b\";\n    String ab1 = new String(a+b);\n    String ab2 = new String(a+b);\n    System.out.println(ab1.intern() == ab1);//true\n    System.out.println(ab2.intern() == ab2);//false\n    System.out.println(ab1.intern() == ab2.intern());//true\n}\n```\n\n这个例子再次给我们证明了，如果常量池中不存在，存储对象的引用，所以第一个是true，第二个ab2.intern()的时候，发现已经存在了ab1的引用，所以指向了ab1，这两行，谁在前面，谁是true。\n\n\n\n","source":"_posts/String-intern-方法解读.md","raw":"---\ntitle: String.intern()方法解读\ndate: 2020-11-18 16:58:56\ntags:\n- java\n---\n\n首先因为jdk1.7对该方法进行了改动，所以我们只分析1.7的现象。\n\n在分析这个方法前，我们先来看看HotSpot的**字符串常量池**\n\n他的存在，是为了减小对象的创建，我们不要把它想的过于复杂，比如我们在程序中写了一个`String a = \"abc\";`那么这个abc就会存储在字符串常量池中，下次再遇到这个，就不会再创建一个abc了，而是直接去字符串常量池中去找，所以`String a = \"abc\";`和`String b = \"abc\";`这两个变量，`a==b`是`true`的。因为他们都指向同一个字符串常量池。（字符串常量池1.7之前在方法区，1.7之后被挪到了堆，方法区也被挪到了元空间）。\n\n简单了解了一下字符串常量池后，我们再来看一个经典的面试题\n\n### String s1 = new String(\"abc\");这句话创建了几个字符串对象？\n\n答案是 1个或者2个，为啥呢，如果**字符串常量池**中已存在字符串常量（或者引用，后面再说）“abc”，则只会在**堆**空间创建一个字符串常量“abc”。如果池中没有字符串常量“abc”，那么它将首先在池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。\n\n比如下面这个示例\n\n```java\n@Test\npublic void test1() {\n    String s1 = new String(\"abc\");// 堆内存的地址值\n    String s2 = \"abc\";\n    System.out.println(s1 == s2);// 输出 false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。\n}\n```\n\n这个如果比较好懂，我们就再接着看一个稍微复杂一点的\n\n```java\n @Test\npublic void test2() {\n    String str1 = \"str\";\n    String str2 = \"ing\";\n\n    String str3 = \"str\" + \"ing\";//常量池中的对象\n    String str4 = str1 + str2; //在堆上创建的新的对象\n    String str5 = \"string\";//常量池中的对象\n    System.out.println(str3 == str4);//false\n    System.out.println(str3 == str5);//true\n    System.out.println(str4 == str5);//false\n}\n```\n\n我们来解读一下这个test，第一行str1和第二行str2 毫无疑问，在字符串常量池中产生，第三行和第四行有什么区别呢，第三行 两个字符串常量相加，依然在字符串常量池，第四行了两个变量相加，那么就会在堆中产生了。这里我们做一个说明：\n\n>String str3 = \"str\" + \"ing\"; 在编译期间，这种拼接会被优化，编译器直接帮你拼好，所以str3相当于直接赋值为“string”\n>\n>而相加的过程中一旦出现了对象，就不会做优化，因为这是一个对象，内存不是确定的，没有写死，无法实现优化。而且在相加的过程中，java会先new出一个StringBuilder，然后调用append()方法来将+号两遍的字符串拼接起来，然后toString()之后返回给=号左边的变量，也就是说，最后得到的是一个new出来的字符串\n\n这样一来，结果就很好理解了。\n\n我们再看一个例子\n\n```java\n@Test\npublic void intern4() {\n    String a=\"a\";\n    String ab =a+\"b\";\n    System.out.println(ab == \"ab\");//false\n}\n```\n\n我们分析一下，ab是堆，“ab”是常量池，所以false很合理，如果我们吧a变成final的，那么结果就是true了。\n\n```java\n@Test\npublic void intern4() {\n    final String a=\"a\";\n    String ab1 =a+\"b\";\n    System.out.println(ab1 == \"ab\");//true\n}\n```\n\n这就是我们刚才所说的优化了，因为a是final不可变的，所以编译的时候，a+\"b\"=\"a\"+\"b\"=\"ab\";\n\n为啥说intern要先举一下上面的例子呢，因为String的intern方法就是针对这个来设计的优化。\n\n**intern是一个本地方法，它的作用是如果字符串常量池中已经包含一个等于此String对象的字符串，则返回代表池中这个字符串的String对象的引用；否则，会将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。**\n\njdk1.7后，如果对象只存在堆中，会拷贝对象的引用到常量池中\n\n了解了基本定义之后，我们再来看下面这个例子\n\n```java\n@Test\npublic void test3(){\n    String s1 = new String(\"计算机\");\n    String s2 = s1.intern();\n    String s3 = \"计算机\";\n    System.out.println(s1 == s2);//false，因为一个是堆内存中的String对象,一个是常量池中的 String 对象，\n    System.out.println(s3 == s2);//true，因为两个都是常量池中的String对象\n}\n```\n\n第一行会在字符串常量池和堆中分别创建两个对象，s1指向堆中的引用，没有问题，s1.intern()指向常量池，此时常量池中已经有了“计算机”，所以s2此时就等于常量池中的引用，s3直接指向常量池。\n\n看了这个简单的例子后，我们稍微看个复杂点的\n\n```java\n@Test\npublic void intern3() {\n    String str1 = new String(\"abc\") + new String(\"def\");\n    System.out.println(str1.intern() == str1);//true\n    System.out.println(str1 == \"abcdef\");//true\n}\n```\n\n这个时候我们可能会有疑问str1 == \"abcdef\" 怎么可能为true呢，一个是堆，一个是常量池。我们一步步看，第一句话，我们分析一下，创建了几个对象。\n\n答案是5个，常量池中有两个，分别是abc和def，堆中有三个，abc，def和abcdef，这个没啥疑问吧，然后第二行，调用了str1.intern()。这个时候发生了什么，它去常量池中找abcdef，发现没有，做了个什么操作呢，把堆中的引用存到了常量池中，（1.7之前是拷贝值，1.7之后是拷贝引用，因为都在堆里面了，为了优化，没必要存两份了）。这个时候，常量池中存在了abcdef，这个abcdef就是str1中堆的值。所以 这个时候我们再来比较str1和abcdef，其实都是指的堆。我们把这个例子加一句话\n\n```java\n@Test\npublic void intern3() {\n    String str2 = \"abcdef\";\n    String str1 = new String(\"abc\") + new String(\"def\");\n    System.out.println(str1.intern() == str1);//false\n    System.out.println(str1 == \"abcdef\");//false\n}\n```\n\n我们只在第一行加一句话，其他的都不动。结果却是翻天覆地的。如果你对intern有了一个差不多的了解后，我们再来分析一下，第一句话，在常量池中创建了一个abcdef，第二句话效果不变，我们再来看第三句话，此时str1.intern()去常量池中找，发现有了一个常量了，这个时候 它就指向了常量池中的abcdef了，所以结果不难理解了。\n\n了解了这个之后，我们再来看一个有趣的例子\n\n```java\n@Test\npublic void intern() {\n    String str1 = new StringBuilder(\"计算机\").append(\"软件\").toString();\n    String str2 = new StringBuilder(\"ja\").append(\"va\").toString();\n\n    System.out.println(str1.intern() == str1);\n    System.out.println(str2.intern() == str2);\n}\n```\n\n根据我们刚才的推测，这俩应该都是true，因为都是指向的堆中的引用。但是实际上，结果是：\n\n```java\ntrue\nfalse\n```\n\n为啥第二个是false呢，这是因为“java”是个关键字， 这个字符串在执行StringBuilder.toString()之前就已经出现过了，字符串常量池中已经有它的引用，不符合intern()方法要求“首次遇到”的原则，“计算机软件”这个字符串则是首次出现的，因此结果返回true。\n\n最后，我们再看一个例子\n\n```java\n@Test\npublic void intern2() {\n    String a=\"a\";\n    String b=\"b\";\n    String ab1 = new String(a+b);\n    String ab2 = new String(a+b);\n    System.out.println(ab1.intern() == ab1);//true\n    System.out.println(ab2.intern() == ab2);//false\n    System.out.println(ab1.intern() == ab2.intern());//true\n}\n```\n\n这个例子再次给我们证明了，如果常量池中不存在，存储对象的引用，所以第一个是true，第二个ab2.intern()的时候，发现已经存在了ab1的引用，所以指向了ab1，这两行，谁在前面，谁是true。\n\n\n\n","slug":"String-intern-方法解读","published":1,"updated":"2020-11-18T12:07:38.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44w70006rcwo1gvx8vfn","content":"<p>首先因为jdk1.7对该方法进行了改动，所以我们只分析1.7的现象。</p>\n<p>在分析这个方法前，我们先来看看HotSpot的<strong>字符串常量池</strong></p>\n<p>他的存在，是为了减小对象的创建，我们不要把它想的过于复杂，比如我们在程序中写了一个<code>String a = \"abc\";</code>那么这个abc就会存储在字符串常量池中，下次再遇到这个，就不会再创建一个abc了，而是直接去字符串常量池中去找，所以<code>String a = \"abc\";</code>和<code>String b = \"abc\";</code>这两个变量，<code>a==b</code>是<code>true</code>的。因为他们都指向同一个字符串常量池。（字符串常量池1.7之前在方法区，1.7之后被挪到了堆，方法区也被挪到了元空间）。</p>\n<p>简单了解了一下字符串常量池后，我们再来看一个经典的面试题</p>\n<h3 id=\"String-s1-new-String-“abc”-这句话创建了几个字符串对象？\"><a href=\"#String-s1-new-String-“abc”-这句话创建了几个字符串对象？\" class=\"headerlink\" title=\"String s1 = new String(“abc”);这句话创建了几个字符串对象？\"></a>String s1 = new String(“abc”);这句话创建了几个字符串对象？</h3><p>答案是 1个或者2个，为啥呢，如果<strong>字符串常量池</strong>中已存在字符串常量（或者引用，后面再说）“abc”，则只会在<strong>堆</strong>空间创建一个字符串常量“abc”。如果池中没有字符串常量“abc”，那么它将首先在池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。</p>\n<p>比如下面这个示例</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>);<span class=\"comment\">// 堆内存的地址值</span></span><br><span class=\"line\">    String s2 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">    System.out.println(s1 == s2);<span class=\"comment\">// 输出 false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这个如果比较好懂，我们就再接着看一个稍微复杂一点的</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    String str1 = <span class=\"string\">\"str\"</span>;</span><br><span class=\"line\">    String str2 = <span class=\"string\">\"ing\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String str3 = <span class=\"string\">\"str\"</span> + <span class=\"string\">\"ing\"</span>;<span class=\"comment\">//常量池中的对象</span></span><br><span class=\"line\">    String str4 = str1 + str2; <span class=\"comment\">//在堆上创建的新的对象</span></span><br><span class=\"line\">    String str5 = <span class=\"string\">\"string\"</span>;<span class=\"comment\">//常量池中的对象</span></span><br><span class=\"line\">    System.out.println(str3 == str4);<span class=\"comment\">//false</span></span><br><span class=\"line\">    System.out.println(str3 == str5);<span class=\"comment\">//true</span></span><br><span class=\"line\">    System.out.println(str4 == str5);<span class=\"comment\">//false</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>我们来解读一下这个test，第一行str1和第二行str2 毫无疑问，在字符串常量池中产生，第三行和第四行有什么区别呢，第三行 两个字符串常量相加，依然在字符串常量池，第四行了两个变量相加，那么就会在堆中产生了。这里我们做一个说明：</p>\n<blockquote>\n<p>String str3 = “str” + “ing”; 在编译期间，这种拼接会被优化，编译器直接帮你拼好，所以str3相当于直接赋值为“string”</p>\n<p>而相加的过程中一旦出现了对象，就不会做优化，因为这是一个对象，内存不是确定的，没有写死，无法实现优化。而且在相加的过程中，java会先new出一个StringBuilder，然后调用append()方法来将+号两遍的字符串拼接起来，然后toString()之后返回给=号左边的变量，也就是说，最后得到的是一个new出来的字符串</p>\n</blockquote>\n<p>这样一来，结果就很好理解了。</p>\n<p>我们再看一个例子</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">intern4</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    String a=<span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">    String ab =a+<span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">    System.out.println(ab == <span class=\"string\">\"ab\"</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>我们分析一下，ab是堆，“ab”是常量池，所以false很合理，如果我们吧a变成final的，那么结果就是true了。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">intern4</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String a=<span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">    String ab1 =a+<span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">    System.out.println(ab1 == <span class=\"string\">\"ab\"</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这就是我们刚才所说的优化了，因为a是final不可变的，所以编译的时候，a+”b”=”a”+”b”=”ab”;</p>\n<p>为啥说intern要先举一下上面的例子呢，因为String的intern方法就是针对这个来设计的优化。</p>\n<p><strong>intern是一个本地方法，它的作用是如果字符串常量池中已经包含一个等于此String对象的字符串，则返回代表池中这个字符串的String对象的引用；否则，会将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。</strong></p>\n<p>jdk1.7后，如果对象只存在堆中，会拷贝对象的引用到常量池中</p>\n<p>了解了基本定义之后，我们再来看下面这个例子</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">    String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"计算机\"</span>);</span><br><span class=\"line\">    String s2 = s1.intern();</span><br><span class=\"line\">    String s3 = <span class=\"string\">\"计算机\"</span>;</span><br><span class=\"line\">    System.out.println(s1 == s2);<span class=\"comment\">//false，因为一个是堆内存中的String对象,一个是常量池中的 String 对象，</span></span><br><span class=\"line\">    System.out.println(s3 == s2);<span class=\"comment\">//true，因为两个都是常量池中的String对象</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>第一行会在字符串常量池和堆中分别创建两个对象，s1指向堆中的引用，没有问题，s1.intern()指向常量池，此时常量池中已经有了“计算机”，所以s2此时就等于常量池中的引用，s3直接指向常量池。</p>\n<p>看了这个简单的例子后，我们稍微看个复杂点的</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">intern3</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    String str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"def\"</span>);</span><br><span class=\"line\">    System.out.println(str1.intern() == str1);<span class=\"comment\">//true</span></span><br><span class=\"line\">    System.out.println(str1 == <span class=\"string\">\"abcdef\"</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这个时候我们可能会有疑问str1 == “abcdef” 怎么可能为true呢，一个是堆，一个是常量池。我们一步步看，第一句话，我们分析一下，创建了几个对象。</p>\n<p>答案是5个，常量池中有两个，分别是abc和def，堆中有三个，abc，def和abcdef，这个没啥疑问吧，然后第二行，调用了str1.intern()。这个时候发生了什么，它去常量池中找abcdef，发现没有，做了个什么操作呢，把堆中的引用存到了常量池中，（1.7之前是拷贝值，1.7之后是拷贝引用，因为都在堆里面了，为了优化，没必要存两份了）。这个时候，常量池中存在了abcdef，这个abcdef就是str1中堆的值。所以 这个时候我们再来比较str1和abcdef，其实都是指的堆。我们把这个例子加一句话</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">intern3</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    String str2 = <span class=\"string\">\"abcdef\"</span>;</span><br><span class=\"line\">    String str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"def\"</span>);</span><br><span class=\"line\">    System.out.println(str1.intern() == str1);<span class=\"comment\">//false</span></span><br><span class=\"line\">    System.out.println(str1 == <span class=\"string\">\"abcdef\"</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>我们只在第一行加一句话，其他的都不动。结果却是翻天覆地的。如果你对intern有了一个差不多的了解后，我们再来分析一下，第一句话，在常量池中创建了一个abcdef，第二句话效果不变，我们再来看第三句话，此时str1.intern()去常量池中找，发现有了一个常量了，这个时候 它就指向了常量池中的abcdef了，所以结果不难理解了。</p>\n<p>了解了这个之后，我们再来看一个有趣的例子</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">intern</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    String str1 = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"计算机\"</span>).append(<span class=\"string\">\"软件\"</span>).toString();</span><br><span class=\"line\">    String str2 = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"ja\"</span>).append(<span class=\"string\">\"va\"</span>).toString();</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(str1.intern() == str1);</span><br><span class=\"line\">    System.out.println(str2.intern() == str2);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>根据我们刚才的推测，这俩应该都是true，因为都是指向的堆中的引用。但是实际上，结果是：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>为啥第二个是false呢，这是因为“java”是个关键字， 这个字符串在执行StringBuilder.toString()之前就已经出现过了，字符串常量池中已经有它的引用，不符合intern()方法要求“首次遇到”的原则，“计算机软件”这个字符串则是首次出现的，因此结果返回true。</p>\n<p>最后，我们再看一个例子</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">intern2</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    String a=<span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">    String b=<span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">    String ab1 = <span class=\"keyword\">new</span> String(a+b);</span><br><span class=\"line\">    String ab2 = <span class=\"keyword\">new</span> String(a+b);</span><br><span class=\"line\">    System.out.println(ab1.intern() == ab1);<span class=\"comment\">//true</span></span><br><span class=\"line\">    System.out.println(ab2.intern() == ab2);<span class=\"comment\">//false</span></span><br><span class=\"line\">    System.out.println(ab1.intern() == ab2.intern());<span class=\"comment\">//true</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这个例子再次给我们证明了，如果常量池中不存在，存储对象的引用，所以第一个是true，第二个ab2.intern()的时候，发现已经存在了ab1的引用，所以指向了ab1，这两行，谁在前面，谁是true。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>首先因为jdk1.7对该方法进行了改动，所以我们只分析1.7的现象。</p>\n<p>在分析这个方法前，我们先来看看HotSpot的<strong>字符串常量池</strong></p>\n<p>他的存在，是为了减小对象的创建，我们不要把它想的过于复杂，比如我们在程序中写了一个<code>String a = &quot;abc&quot;;</code>那么这个abc就会存储在字符串常量池中，下次再遇到这个，就不会再创建一个abc了，而是直接去字符串常量池中去找，所以<code>String a = &quot;abc&quot;;</code>和<code>String b = &quot;abc&quot;;</code>这两个变量，<code>a==b</code>是<code>true</code>的。因为他们都指向同一个字符串常量池。（字符串常量池1.7之前在方法区，1.7之后被挪到了堆，方法区也被挪到了元空间）。</p>\n<p>简单了解了一下字符串常量池后，我们再来看一个经典的面试题</p>\n<h3 id=\"String-s1-new-String-“abc”-这句话创建了几个字符串对象？\"><a href=\"#String-s1-new-String-“abc”-这句话创建了几个字符串对象？\" class=\"headerlink\" title=\"String s1 = new String(“abc”);这句话创建了几个字符串对象？\"></a>String s1 = new String(“abc”);这句话创建了几个字符串对象？</h3><p>答案是 1个或者2个，为啥呢，如果<strong>字符串常量池</strong>中已存在字符串常量（或者引用，后面再说）“abc”，则只会在<strong>堆</strong>空间创建一个字符串常量“abc”。如果池中没有字符串常量“abc”，那么它将首先在池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。</p>\n<p>比如下面这个示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;abc&quot;</span>);<span class=\"comment\">// 堆内存的地址值</span></span><br><span class=\"line\">    String s2 = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">    System.out.println(s1 == s2);<span class=\"comment\">// 输出 false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个如果比较好懂，我们就再接着看一个稍微复杂一点的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String str1 = <span class=\"string\">&quot;str&quot;</span>;</span><br><span class=\"line\">    String str2 = <span class=\"string\">&quot;ing&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String str3 = <span class=\"string\">&quot;str&quot;</span> + <span class=\"string\">&quot;ing&quot;</span>;<span class=\"comment\">//常量池中的对象</span></span><br><span class=\"line\">    String str4 = str1 + str2; <span class=\"comment\">//在堆上创建的新的对象</span></span><br><span class=\"line\">    String str5 = <span class=\"string\">&quot;string&quot;</span>;<span class=\"comment\">//常量池中的对象</span></span><br><span class=\"line\">    System.out.println(str3 == str4);<span class=\"comment\">//false</span></span><br><span class=\"line\">    System.out.println(str3 == str5);<span class=\"comment\">//true</span></span><br><span class=\"line\">    System.out.println(str4 == str5);<span class=\"comment\">//false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们来解读一下这个test，第一行str1和第二行str2 毫无疑问，在字符串常量池中产生，第三行和第四行有什么区别呢，第三行 两个字符串常量相加，依然在字符串常量池，第四行了两个变量相加，那么就会在堆中产生了。这里我们做一个说明：</p>\n<blockquote>\n<p>String str3 = “str” + “ing”; 在编译期间，这种拼接会被优化，编译器直接帮你拼好，所以str3相当于直接赋值为“string”</p>\n<p>而相加的过程中一旦出现了对象，就不会做优化，因为这是一个对象，内存不是确定的，没有写死，无法实现优化。而且在相加的过程中，java会先new出一个StringBuilder，然后调用append()方法来将+号两遍的字符串拼接起来，然后toString()之后返回给=号左边的变量，也就是说，最后得到的是一个new出来的字符串</p>\n</blockquote>\n<p>这样一来，结果就很好理解了。</p>\n<p>我们再看一个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">intern4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String a=<span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\">    String ab =a+<span class=\"string\">&quot;b&quot;</span>;</span><br><span class=\"line\">    System.out.println(ab == <span class=\"string\">&quot;ab&quot;</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们分析一下，ab是堆，“ab”是常量池，所以false很合理，如果我们吧a变成final的，那么结果就是true了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">intern4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String a=<span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\">    String ab1 =a+<span class=\"string\">&quot;b&quot;</span>;</span><br><span class=\"line\">    System.out.println(ab1 == <span class=\"string\">&quot;ab&quot;</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这就是我们刚才所说的优化了，因为a是final不可变的，所以编译的时候，a+”b”=”a”+”b”=”ab”;</p>\n<p>为啥说intern要先举一下上面的例子呢，因为String的intern方法就是针对这个来设计的优化。</p>\n<p><strong>intern是一个本地方法，它的作用是如果字符串常量池中已经包含一个等于此String对象的字符串，则返回代表池中这个字符串的String对象的引用；否则，会将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。</strong></p>\n<p>jdk1.7后，如果对象只存在堆中，会拷贝对象的引用到常量池中</p>\n<p>了解了基本定义之后，我们再来看下面这个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;计算机&quot;</span>);</span><br><span class=\"line\">    String s2 = s1.intern();</span><br><span class=\"line\">    String s3 = <span class=\"string\">&quot;计算机&quot;</span>;</span><br><span class=\"line\">    System.out.println(s1 == s2);<span class=\"comment\">//false，因为一个是堆内存中的String对象,一个是常量池中的 String 对象，</span></span><br><span class=\"line\">    System.out.println(s3 == s2);<span class=\"comment\">//true，因为两个都是常量池中的String对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一行会在字符串常量池和堆中分别创建两个对象，s1指向堆中的引用，没有问题，s1.intern()指向常量池，此时常量池中已经有了“计算机”，所以s2此时就等于常量池中的引用，s3直接指向常量池。</p>\n<p>看了这个简单的例子后，我们稍微看个复杂点的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">intern3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;abc&quot;</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;def&quot;</span>);</span><br><span class=\"line\">    System.out.println(str1.intern() == str1);<span class=\"comment\">//true</span></span><br><span class=\"line\">    System.out.println(str1 == <span class=\"string\">&quot;abcdef&quot;</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个时候我们可能会有疑问str1 == “abcdef” 怎么可能为true呢，一个是堆，一个是常量池。我们一步步看，第一句话，我们分析一下，创建了几个对象。</p>\n<p>答案是5个，常量池中有两个，分别是abc和def，堆中有三个，abc，def和abcdef，这个没啥疑问吧，然后第二行，调用了str1.intern()。这个时候发生了什么，它去常量池中找abcdef，发现没有，做了个什么操作呢，把堆中的引用存到了常量池中，（1.7之前是拷贝值，1.7之后是拷贝引用，因为都在堆里面了，为了优化，没必要存两份了）。这个时候，常量池中存在了abcdef，这个abcdef就是str1中堆的值。所以 这个时候我们再来比较str1和abcdef，其实都是指的堆。我们把这个例子加一句话</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">intern3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String str2 = <span class=\"string\">&quot;abcdef&quot;</span>;</span><br><span class=\"line\">    String str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;abc&quot;</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;def&quot;</span>);</span><br><span class=\"line\">    System.out.println(str1.intern() == str1);<span class=\"comment\">//false</span></span><br><span class=\"line\">    System.out.println(str1 == <span class=\"string\">&quot;abcdef&quot;</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们只在第一行加一句话，其他的都不动。结果却是翻天覆地的。如果你对intern有了一个差不多的了解后，我们再来分析一下，第一句话，在常量池中创建了一个abcdef，第二句话效果不变，我们再来看第三句话，此时str1.intern()去常量池中找，发现有了一个常量了，这个时候 它就指向了常量池中的abcdef了，所以结果不难理解了。</p>\n<p>了解了这个之后，我们再来看一个有趣的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">intern</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String str1 = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">&quot;计算机&quot;</span>).append(<span class=\"string\">&quot;软件&quot;</span>).toString();</span><br><span class=\"line\">    String str2 = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">&quot;ja&quot;</span>).append(<span class=\"string\">&quot;va&quot;</span>).toString();</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(str1.intern() == str1);</span><br><span class=\"line\">    System.out.println(str2.intern() == str2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据我们刚才的推测，这俩应该都是true，因为都是指向的堆中的引用。但是实际上，结果是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>为啥第二个是false呢，这是因为“java”是个关键字， 这个字符串在执行StringBuilder.toString()之前就已经出现过了，字符串常量池中已经有它的引用，不符合intern()方法要求“首次遇到”的原则，“计算机软件”这个字符串则是首次出现的，因此结果返回true。</p>\n<p>最后，我们再看一个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">intern2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String a=<span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\">    String b=<span class=\"string\">&quot;b&quot;</span>;</span><br><span class=\"line\">    String ab1 = <span class=\"keyword\">new</span> String(a+b);</span><br><span class=\"line\">    String ab2 = <span class=\"keyword\">new</span> String(a+b);</span><br><span class=\"line\">    System.out.println(ab1.intern() == ab1);<span class=\"comment\">//true</span></span><br><span class=\"line\">    System.out.println(ab2.intern() == ab2);<span class=\"comment\">//false</span></span><br><span class=\"line\">    System.out.println(ab1.intern() == ab2.intern());<span class=\"comment\">//true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个例子再次给我们证明了，如果常量池中不存在，存储对象的引用，所以第一个是true，第二个ab2.intern()的时候，发现已经存在了ab1的引用，所以指向了ab1，这两行，谁在前面，谁是true。</p>\n"},{"title":"Hello World","date":"2020-10-27T06:44:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2020-10-27 14:44:00\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2020-11-03T02:05:57.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44w80008rcwogc48funs","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"hexo使用记录","date":"2020-10-27T06:44:00.000Z","_content":"\n##### 快捷键\n\n```bash\nCtrl+B对选中字体加粗\n$$+Enter 公式\n```\n\n##### [Hexo](https://hexo.io/zh-cn/docs/)\n\n```bash\n$ hexo new 新博客名字\n#编译md文件为静态页面\n$ hexo generate\n#推送public文件夹到main，github收到main发生变化，会自动重启，需要等待一会\n$ hexo deploy\n#编辑+部署\n$ hexo g -d\n\n$ hexo new page \"页面名称\"\n\n```\n\nsource源码维护，方便不同计算机维护博客\n\n```bash\n更新本地源码到source\ngit init\ngit checkout -b source\ngit add -A\ngit commit -m \"init blog\"\ngit remote add origin git@github.com:radio93/radio93.github.io.git\ngit push origin source\n```\n\n\n\n##### 新环境博客维护\n\n```bash\n#从git上的source分支down下来的源码\n$ cd 项目\n#Hexo 3.0 把服务器独立成了个别模块，必须先安装 hexo-server 才能使用\n$ npm install hexo-server --save\n#编译博客源码为静态页面\n$ hexo generate\n#尝试启动博客 默认端口4000\n$ hexo server\n#如果端口冲突 可以修改端口\n$ hexo server -p 5000\n\n```\n\n##### 常见问题\n\n###### \t如果radio93.github.io无法访问，需要修改此处，博客主页在main下的index.html\n\n![](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201027162208507.png?x-oss-process=style/radio93)\n\n\n\n\n\n###### \t项目名称需要和github名称保持一致\n\n![](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201027162349781.png?x-oss-process=style/radio93)\n\n\n\n###### 如果Gitalk控制台总是报错，可以查看下\\themes\\next\\layout\\_third-party\\comments\\gitalk.swig中的链接是否最新，因为原域名已被更新\n\ngitalk.swig源码如下：\n\n```js\n{%- if page.comments %}\n{%- set gitalk_css_uri = theme.vendors.gitalk_css or 'https://unpkg.com/gitalk/dist/gitalk.css' %}\n<link rel=\"stylesheet\" href=\"{{ gitalk_css_uri }}\">\n\n{%- set gitalk_js_uri = theme.vendors.gitalk_js or 'https://unpkg.com/gitalk/dist/gitalk.min.js' %}\n\n<script>\nNexT.utils.loadComments(document.querySelector('#gitalk-container'), () => {\n  NexT.utils.getScript('{{ gitalk_js_uri }}', () => {\n    var gitalk = new Gitalk({\n      clientID    : '{{ theme.gitalk.client_id }}',\n      clientSecret: '{{ theme.gitalk.client_secret }}',\n      repo        : '{{ theme.gitalk.repo }}',\n      owner       : '{{ theme.gitalk.github_id }}',\n      admin       : ['{{ theme.gitalk.admin_user }}'],\n      id          : '{{ gitalk_md5(page.path) }}',\n      {%- if theme.gitalk.language == '' %}\n        language: window.navigator.language || window.navigator.userLanguage,\n      {% else %}\n        language: '{{ theme.gitalk.language }}',\n      {%- endif %}\n      distractionFreeMode: {{ theme.gitalk.distraction_free_mode }}\n    });\n    gitalk.render('gitalk-container');\n  }, window.Gitalk);\n});\n</script>\n{%- endif %}\n\n```\n\n","source":"_posts/hexo使用记录.md","raw":"---\ntitle: hexo使用记录\ndate: 2020-10-27 14:44:00\ntags:\n- hexo\n- 问题记录\ncategories:\n- 文档操作\n- hexo\n---\n\n##### 快捷键\n\n```bash\nCtrl+B对选中字体加粗\n$$+Enter 公式\n```\n\n##### [Hexo](https://hexo.io/zh-cn/docs/)\n\n```bash\n$ hexo new 新博客名字\n#编译md文件为静态页面\n$ hexo generate\n#推送public文件夹到main，github收到main发生变化，会自动重启，需要等待一会\n$ hexo deploy\n#编辑+部署\n$ hexo g -d\n\n$ hexo new page \"页面名称\"\n\n```\n\nsource源码维护，方便不同计算机维护博客\n\n```bash\n更新本地源码到source\ngit init\ngit checkout -b source\ngit add -A\ngit commit -m \"init blog\"\ngit remote add origin git@github.com:radio93/radio93.github.io.git\ngit push origin source\n```\n\n\n\n##### 新环境博客维护\n\n```bash\n#从git上的source分支down下来的源码\n$ cd 项目\n#Hexo 3.0 把服务器独立成了个别模块，必须先安装 hexo-server 才能使用\n$ npm install hexo-server --save\n#编译博客源码为静态页面\n$ hexo generate\n#尝试启动博客 默认端口4000\n$ hexo server\n#如果端口冲突 可以修改端口\n$ hexo server -p 5000\n\n```\n\n##### 常见问题\n\n###### \t如果radio93.github.io无法访问，需要修改此处，博客主页在main下的index.html\n\n![](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201027162208507.png?x-oss-process=style/radio93)\n\n\n\n\n\n###### \t项目名称需要和github名称保持一致\n\n![](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201027162349781.png?x-oss-process=style/radio93)\n\n\n\n###### 如果Gitalk控制台总是报错，可以查看下\\themes\\next\\layout\\_third-party\\comments\\gitalk.swig中的链接是否最新，因为原域名已被更新\n\ngitalk.swig源码如下：\n\n```js\n{%- if page.comments %}\n{%- set gitalk_css_uri = theme.vendors.gitalk_css or 'https://unpkg.com/gitalk/dist/gitalk.css' %}\n<link rel=\"stylesheet\" href=\"{{ gitalk_css_uri }}\">\n\n{%- set gitalk_js_uri = theme.vendors.gitalk_js or 'https://unpkg.com/gitalk/dist/gitalk.min.js' %}\n\n<script>\nNexT.utils.loadComments(document.querySelector('#gitalk-container'), () => {\n  NexT.utils.getScript('{{ gitalk_js_uri }}', () => {\n    var gitalk = new Gitalk({\n      clientID    : '{{ theme.gitalk.client_id }}',\n      clientSecret: '{{ theme.gitalk.client_secret }}',\n      repo        : '{{ theme.gitalk.repo }}',\n      owner       : '{{ theme.gitalk.github_id }}',\n      admin       : ['{{ theme.gitalk.admin_user }}'],\n      id          : '{{ gitalk_md5(page.path) }}',\n      {%- if theme.gitalk.language == '' %}\n        language: window.navigator.language || window.navigator.userLanguage,\n      {% else %}\n        language: '{{ theme.gitalk.language }}',\n      {%- endif %}\n      distractionFreeMode: {{ theme.gitalk.distraction_free_mode }}\n    });\n    gitalk.render('gitalk-container');\n  }, window.Gitalk);\n});\n</script>\n{%- endif %}\n\n```\n\n","slug":"hexo使用记录","published":1,"updated":"2020-11-03T02:05:57.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44w9000arcwo91iu3fxl","content":"<h5 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h5><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+B对选中字体加粗</span><br><span class=\"line\">$$+Enter 公式</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a><a href=\"https://hexo.io/zh-cn/docs/\">Hexo</a></h5><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new 新博客名字</span><br><span class=\"line\"><span class=\"comment\">#编译md文件为静态页面</span></span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\"><span class=\"comment\">#推送public文件夹到main，github收到main发生变化，会自动重启，需要等待一会</span></span><br><span class=\"line\">$ hexo deploy</span><br><span class=\"line\"><span class=\"comment\">#编辑+部署</span></span><br><span class=\"line\">$ hexo g -d</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo new page <span class=\"string\">\"页面名称\"</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p>source源码维护，方便不同计算机维护博客</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">更新本地源码到<span class=\"built_in\">source</span></span><br><span class=\"line\">git init</span><br><span class=\"line\">git checkout -b <span class=\"built_in\">source</span></span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">\"init blog\"</span></span><br><span class=\"line\">git remote add origin git@github.com:radio93/radio93.github.io.git</span><br><span class=\"line\">git push origin <span class=\"built_in\">source</span></span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h5 id=\"新环境博客维护\"><a href=\"#新环境博客维护\" class=\"headerlink\" title=\"新环境博客维护\"></a>新环境博客维护</h5><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#从git上的source分支down下来的源码</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> 项目</span><br><span class=\"line\"><span class=\"comment\">#Hexo 3.0 把服务器独立成了个别模块，必须先安装 hexo-server 才能使用</span></span><br><span class=\"line\">$ npm install hexo-server --save</span><br><span class=\"line\"><span class=\"comment\">#编译博客源码为静态页面</span></span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\"><span class=\"comment\">#尝试启动博客 默认端口4000</span></span><br><span class=\"line\">$ hexo server</span><br><span class=\"line\"><span class=\"comment\">#如果端口冲突 可以修改端口</span></span><br><span class=\"line\">$ hexo server -p 5000</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h5><h6 id=\"如果radio93-github-io无法访问，需要修改此处，博客主页在main下的index-html\"><a href=\"#如果radio93-github-io无法访问，需要修改此处，博客主页在main下的index-html\" class=\"headerlink\" title=\"如果radio93.github.io无法访问，需要修改此处，博客主页在main下的index.html\"></a>如果radio93.github.io无法访问，需要修改此处，博客主页在main下的index.html</h6><p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201027162208507.png?x-oss-process=style/radio93\"></p>\n<h6 id=\"项目名称需要和github名称保持一致\"><a href=\"#项目名称需要和github名称保持一致\" class=\"headerlink\" title=\"项目名称需要和github名称保持一致\"></a>项目名称需要和github名称保持一致</h6><p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201027162349781.png?x-oss-process=style/radio93\"></p>\n<h6 id=\"如果Gitalk控制台总是报错，可以查看下-themes-next-layout-third-party-comments-gitalk-swig中的链接是否最新，因为原域名已被更新\"><a href=\"#如果Gitalk控制台总是报错，可以查看下-themes-next-layout-third-party-comments-gitalk-swig中的链接是否最新，因为原域名已被更新\" class=\"headerlink\" title=\"如果Gitalk控制台总是报错，可以查看下\\themes\\next\\layout_third-party\\comments\\gitalk.swig中的链接是否最新，因为原域名已被更新\"></a>如果Gitalk控制台总是报错，可以查看下\\themes\\next\\layout_third-party\\comments\\gitalk.swig中的链接是否最新，因为原域名已被更新</h6><p>gitalk.swig源码如下：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{%- <span class=\"keyword\">if</span> page.comments %}</span><br><span class=\"line\">{%- set gitalk_css_uri = theme.vendors.gitalk_css or <span class=\"string\">'https://unpkg.com/gitalk/dist/gitalk.css'</span> %}</span><br><span class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"{{ gitalk_css_uri }}\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">{%- set gitalk_js_uri = theme.vendors.gitalk_js or <span class=\"string\">'https://unpkg.com/gitalk/dist/gitalk.min.js'</span> %}</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">NexT.utils.loadComments(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#gitalk-container'</span>), <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  NexT.utils.getScript(<span class=\"string\">'{{ gitalk_js_uri }}'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gitalk = <span class=\"keyword\">new</span> Gitalk({</span><br><span class=\"line\">      clientID    : <span class=\"string\">'{{ theme.gitalk.client_id }}'</span>,</span><br><span class=\"line\">      clientSecret: <span class=\"string\">'{{ theme.gitalk.client_secret }}'</span>,</span><br><span class=\"line\">      repo        : <span class=\"string\">'{{ theme.gitalk.repo }}'</span>,</span><br><span class=\"line\">      owner       : <span class=\"string\">'{{ theme.gitalk.github_id }}'</span>,</span><br><span class=\"line\">      admin       : [<span class=\"string\">'{{ theme.gitalk.admin_user }}'</span>],</span><br><span class=\"line\">      id          : <span class=\"string\">'{{ gitalk_md5(page.path) }}'</span>,</span><br><span class=\"line\">      {%- <span class=\"keyword\">if</span> theme.gitalk.language == <span class=\"string\">''</span> %}</span><br><span class=\"line\">        language: <span class=\"built_in\">window</span>.navigator.language || <span class=\"built_in\">window</span>.navigator.userLanguage,</span><br><span class=\"line\">      {% <span class=\"keyword\">else</span> %}</span><br><span class=\"line\">        language: <span class=\"string\">'{{ theme.gitalk.language }}'</span>,</span><br><span class=\"line\">      {%- endif %}</span><br><span class=\"line\">      distractionFreeMode: {{ theme.gitalk.distraction_free_mode }}</span><br><span class=\"line\">    });</span><br><span class=\"line\">    gitalk.render(<span class=\"string\">'gitalk-container'</span>);</span><br><span class=\"line\">  }, <span class=\"built_in\">window</span>.Gitalk);</span><br><span class=\"line\">});</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">{%- endif %}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h5 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+B对选中字体加粗</span><br><span class=\"line\">$$+Enter 公式</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a><a href=\"https://hexo.io/zh-cn/docs/\">Hexo</a></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new 新博客名字</span><br><span class=\"line\"><span class=\"comment\">#编译md文件为静态页面</span></span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\"><span class=\"comment\">#推送public文件夹到main，github收到main发生变化，会自动重启，需要等待一会</span></span><br><span class=\"line\">$ hexo deploy</span><br><span class=\"line\"><span class=\"comment\">#编辑+部署</span></span><br><span class=\"line\">$ hexo g -d</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo new page <span class=\"string\">&quot;页面名称&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>source源码维护，方便不同计算机维护博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">更新本地源码到<span class=\"built_in\">source</span></span><br><span class=\"line\">git init</span><br><span class=\"line\">git checkout -b <span class=\"built_in\">source</span></span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;init blog&quot;</span></span><br><span class=\"line\">git remote add origin git@github.com:radio93/radio93.github.io.git</span><br><span class=\"line\">git push origin <span class=\"built_in\">source</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"新环境博客维护\"><a href=\"#新环境博客维护\" class=\"headerlink\" title=\"新环境博客维护\"></a>新环境博客维护</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#从git上的source分支down下来的源码</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> 项目</span><br><span class=\"line\"><span class=\"comment\">#Hexo 3.0 把服务器独立成了个别模块，必须先安装 hexo-server 才能使用</span></span><br><span class=\"line\">$ npm install hexo-server --save</span><br><span class=\"line\"><span class=\"comment\">#编译博客源码为静态页面</span></span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\"><span class=\"comment\">#尝试启动博客 默认端口4000</span></span><br><span class=\"line\">$ hexo server</span><br><span class=\"line\"><span class=\"comment\">#如果端口冲突 可以修改端口</span></span><br><span class=\"line\">$ hexo server -p 5000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h5><h6 id=\"如果radio93-github-io无法访问，需要修改此处，博客主页在main下的index-html\"><a href=\"#如果radio93-github-io无法访问，需要修改此处，博客主页在main下的index-html\" class=\"headerlink\" title=\"如果radio93.github.io无法访问，需要修改此处，博客主页在main下的index.html\"></a>如果radio93.github.io无法访问，需要修改此处，博客主页在main下的index.html</h6><p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201027162208507.png?x-oss-process=style/radio93\"></p>\n<h6 id=\"项目名称需要和github名称保持一致\"><a href=\"#项目名称需要和github名称保持一致\" class=\"headerlink\" title=\"项目名称需要和github名称保持一致\"></a>项目名称需要和github名称保持一致</h6><p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201027162349781.png?x-oss-process=style/radio93\"></p>\n<h6 id=\"如果Gitalk控制台总是报错，可以查看下-themes-next-layout-third-party-comments-gitalk-swig中的链接是否最新，因为原域名已被更新\"><a href=\"#如果Gitalk控制台总是报错，可以查看下-themes-next-layout-third-party-comments-gitalk-swig中的链接是否最新，因为原域名已被更新\" class=\"headerlink\" title=\"如果Gitalk控制台总是报错，可以查看下\\themes\\next\\layout_third-party\\comments\\gitalk.swig中的链接是否最新，因为原域名已被更新\"></a>如果Gitalk控制台总是报错，可以查看下\\themes\\next\\layout_third-party\\comments\\gitalk.swig中的链接是否最新，因为原域名已被更新</h6><p>gitalk.swig源码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%- <span class=\"keyword\">if</span> page.comments %&#125;</span><br><span class=\"line\">&#123;%- set gitalk_css_uri = theme.vendors.gitalk_css or <span class=\"string\">&#x27;https://unpkg.com/gitalk/dist/gitalk.css&#x27;</span> %&#125;</span><br><span class=\"line\">&lt;link rel=<span class=\"string\">&quot;stylesheet&quot;</span> href=<span class=\"string\">&quot;&#123;&#123; gitalk_css_uri &#125;&#125;&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%- set gitalk_js_uri = theme.vendors.gitalk_js or <span class=\"string\">&#x27;https://unpkg.com/gitalk/dist/gitalk.min.js&#x27;</span> %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">NexT.utils.loadComments(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#gitalk-container&#x27;</span>), <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  NexT.utils.getScript(<span class=\"string\">&#x27;&#123;&#123; gitalk_js_uri &#125;&#125;&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gitalk = <span class=\"keyword\">new</span> Gitalk(&#123;</span><br><span class=\"line\">      clientID    : <span class=\"string\">&#x27;&#123;&#123; theme.gitalk.client_id &#125;&#125;&#x27;</span>,</span><br><span class=\"line\">      clientSecret: <span class=\"string\">&#x27;&#123;&#123; theme.gitalk.client_secret &#125;&#125;&#x27;</span>,</span><br><span class=\"line\">      repo        : <span class=\"string\">&#x27;&#123;&#123; theme.gitalk.repo &#125;&#125;&#x27;</span>,</span><br><span class=\"line\">      owner       : <span class=\"string\">&#x27;&#123;&#123; theme.gitalk.github_id &#125;&#125;&#x27;</span>,</span><br><span class=\"line\">      admin       : [<span class=\"string\">&#x27;&#123;&#123; theme.gitalk.admin_user &#125;&#125;&#x27;</span>],</span><br><span class=\"line\">      id          : <span class=\"string\">&#x27;&#123;&#123; gitalk_md5(page.path) &#125;&#125;&#x27;</span>,</span><br><span class=\"line\">      &#123;%- <span class=\"keyword\">if</span> theme.gitalk.language == <span class=\"string\">&#x27;&#x27;</span> %&#125;</span><br><span class=\"line\">        language: <span class=\"built_in\">window</span>.navigator.language || <span class=\"built_in\">window</span>.navigator.userLanguage,</span><br><span class=\"line\">      &#123;% <span class=\"keyword\">else</span> %&#125;</span><br><span class=\"line\">        language: <span class=\"string\">&#x27;&#123;&#123; theme.gitalk.language &#125;&#125;&#x27;</span>,</span><br><span class=\"line\">      &#123;%- endif %&#125;</span><br><span class=\"line\">      distractionFreeMode: &#123;&#123; theme.gitalk.distraction_free_mode &#125;&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    gitalk.render(<span class=\"string\">&#x27;gitalk-container&#x27;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"built_in\">window</span>.Gitalk);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&#123;%- endif %&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"中介者模式","date":"2020-11-05T05:23:25.000Z","_content":"\n# 中介者模式\n\n> 中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合， 使代码易于维护。中介者模式属于行为型模式。\n\n##### 示例演示：\n\n1. 创建一个people类，并将其中的say方法单独提取\n\n   ```java\n   package test.mediator;\n   \n   import lombok.Data;\n   \n   @Data\n   public class People {\n       private String name;\n   \n       public People(String name) {\n           this.name = name;\n       }\n   \n       public void say(String message) {\n           Say.say(this, message);\n       }\n   }\n   ```\n\n   ```java\n   package test.mediator;\n   \n   import java.util.Date;\n   \n   public class Say {\n   \n       public static void say(People people, String message) {\n           System.out.println(new Date().toString() + \" [\" + people.getName() + \"]:\" + message);\n       }\n   }\n   ```\n\n2. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.mediator;\n   \n   public class MediatorDemo {\n       public static void main(String[] args) {\n           People people1 = new People(\"people1\");\n           People people2 = new People(\"people2\");\n           people1.say(\"hello1\");\n           people2.say(\"hello2\");\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   Thu Nov 05 11:43:05 CST 2020 [people1]:hello1\n   Thu Nov 05 11:43:05 CST 2020 [people2]:hello2\n   ```\n\n##### 说明：\n\n>**优点：** 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。\n>\n>**缺点：**中介者会庞大，变得复杂难以维护。","source":"_posts/中介者模式.md","raw":"---\ntitle: 中介者模式\ndate: 2020-11-05 13:23:25\ntags:\n- java\n- 设计模式\n---\n\n# 中介者模式\n\n> 中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合， 使代码易于维护。中介者模式属于行为型模式。\n\n##### 示例演示：\n\n1. 创建一个people类，并将其中的say方法单独提取\n\n   ```java\n   package test.mediator;\n   \n   import lombok.Data;\n   \n   @Data\n   public class People {\n       private String name;\n   \n       public People(String name) {\n           this.name = name;\n       }\n   \n       public void say(String message) {\n           Say.say(this, message);\n       }\n   }\n   ```\n\n   ```java\n   package test.mediator;\n   \n   import java.util.Date;\n   \n   public class Say {\n   \n       public static void say(People people, String message) {\n           System.out.println(new Date().toString() + \" [\" + people.getName() + \"]:\" + message);\n       }\n   }\n   ```\n\n2. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.mediator;\n   \n   public class MediatorDemo {\n       public static void main(String[] args) {\n           People people1 = new People(\"people1\");\n           People people2 = new People(\"people2\");\n           people1.say(\"hello1\");\n           people2.say(\"hello2\");\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   Thu Nov 05 11:43:05 CST 2020 [people1]:hello1\n   Thu Nov 05 11:43:05 CST 2020 [people2]:hello2\n   ```\n\n##### 说明：\n\n>**优点：** 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。\n>\n>**缺点：**中介者会庞大，变得复杂难以维护。","slug":"中介者模式","published":1,"updated":"2020-11-05T05:27:08.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wb000ercwoe4wu9r9u","content":"<h1 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h1><blockquote>\n<p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合， 使代码易于维护。中介者模式属于行为型模式。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>创建一个people类，并将其中的say方法单独提取</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.mediator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">(String name)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(String message)</span> </span>{</span><br><span class=\"line\">        Say.say(<span class=\"keyword\">this</span>, message);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.mediator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Say</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(People people, String message)</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Date().toString() + <span class=\"string\">\" [\"</span> + people.getName() + <span class=\"string\">\"]:\"</span> + message);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.mediator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediatorDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        People people1 = <span class=\"keyword\">new</span> People(<span class=\"string\">\"people1\"</span>);</span><br><span class=\"line\">        People people2 = <span class=\"keyword\">new</span> People(<span class=\"string\">\"people2\"</span>);</span><br><span class=\"line\">        people1.say(<span class=\"string\">\"hello1\"</span>);</span><br><span class=\"line\">        people2.say(<span class=\"string\">\"hello2\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thu Nov <span class=\"number\">05</span> <span class=\"number\">11</span>:<span class=\"number\">43</span>:<span class=\"number\">05</span> CST <span class=\"number\">2020</span> [people1]:hello1</span><br><span class=\"line\">Thu Nov <span class=\"number\">05</span> <span class=\"number\">11</span>:<span class=\"number\">43</span>:<span class=\"number\">05</span> CST <span class=\"number\">2020</span> [people2]:hello2</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。</p>\n<p><strong>缺点：</strong>中介者会庞大，变得复杂难以维护。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h1><blockquote>\n<p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合， 使代码易于维护。中介者模式属于行为型模式。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>创建一个people类，并将其中的say方法单独提取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.mediator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        Say.say(<span class=\"keyword\">this</span>, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.mediator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Say</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(People people, String message)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Date().toString() + <span class=\"string\">&quot; [&quot;</span> + people.getName() + <span class=\"string\">&quot;]:&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.mediator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediatorDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        People people1 = <span class=\"keyword\">new</span> People(<span class=\"string\">&quot;people1&quot;</span>);</span><br><span class=\"line\">        People people2 = <span class=\"keyword\">new</span> People(<span class=\"string\">&quot;people2&quot;</span>);</span><br><span class=\"line\">        people1.say(<span class=\"string\">&quot;hello1&quot;</span>);</span><br><span class=\"line\">        people2.say(<span class=\"string\">&quot;hello2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thu Nov <span class=\"number\">05</span> <span class=\"number\">11</span>:<span class=\"number\">43</span>:<span class=\"number\">05</span> CST <span class=\"number\">2020</span> [people1]:hello1</span><br><span class=\"line\">Thu Nov <span class=\"number\">05</span> <span class=\"number\">11</span>:<span class=\"number\">43</span>:<span class=\"number\">05</span> CST <span class=\"number\">2020</span> [people2]:hello2</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。</p>\n<p><strong>缺点：</strong>中介者会庞大，变得复杂难以维护。</p>\n</blockquote>\n"},{"title":"业务代表模式","date":"2020-11-06T07:25:27.000Z","_content":"\n# 业务代表模式\n\n>业务代表模式（Business Delegate Pattern）用于对表示层和业务层解耦。它基本上是用来减少通信或对表示层代码中的业务层代码的远程查询功能。在业务层中我们有以下实体。\n>\n>**客户端（Client）** - 表示层代码可以是 JSP、servlet 或 UI java 代码。\n>\n>**业务代表（Business Delegate）** - 一个为客户端实体提供的入口类，它提供了对业务服务方法的访问。\n>\n>**查询服务（LookUp Service）** - 查找服务对象负责获取相关的业务实现，并提供业务对象对业务代表对象的访问。\n>\n>**业务服务（Business Service）** - 业务服务接口。实现了该业务服务的实体类，提供了实际的业务实现逻辑。\n\n##### 示例演示：\n\n1. 创建peopleService接口\n\n   ```java\n   package test.business;\n   \n   public interface PeopleService {\n       void doSomething();\n   }\n   ```\n\n2. 创建两个服务实体类\n\n   ```java\n   package test.business;\n   \n   public class EatService implements PeopleService{\n       @Override\n       public void doSomething() {\n           System.out.println(\"eat...\");\n       }\n   }\n   ```\n\n   ```java\n   package test.business;\n   \n   public class SleepService implements PeopleService{\n       @Override\n       public void doSomething() {\n           System.out.println(\"sleep...\");\n       }\n   }\n   ```\n\n3. 创建查询服务\n\n   ```java\n   package test.business;\n   \n   public class BusinessSeach {\n   \n       public PeopleService seach(String serviceType) {\n           if (serviceType.equalsIgnoreCase(\"eat\")) {\n               return new EatService();\n           } else {\n               return new SleepService();\n           }\n       }\n   \n   }\n   ```\n\n4. 创建业务代表\n\n   ```java\n   package test.business;\n   \n   public class BusinessDelegate {\n       private BusinessSeach businessSeach = new BusinessSeach();\n       private PeopleService peopleService;\n       private String servcieType;\n   \n       public void setServiceType(String servcieType) {\n           this.servcieType = servcieType;\n       }\n   \n       public void doTask() {\n           peopleService = businessSeach.seach(servcieType);\n           peopleService.doSomething();\n       }\n   \n   }\n   ```\n\n5. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.business;\n   \n   public class BusinessDelegateDemo {\n   \n       public static void main(String[] args) {\n           BusinessDelegate businessDelegate = new BusinessDelegate();\n           Client client = new Client(businessDelegate);\n   \n           businessDelegate.setServiceType(\"eat\");\n           client.doTask();\n   \n           businessDelegate.setServiceType(\"sleep\");\n           client.doTask();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   eat...\n   sleep...\n   ```","source":"_posts/业务代表模式.md","raw":"---\ntitle: 业务代表模式\ndate: 2020-11-06 15:25:27\ntags:\n- java\n- 设计模式\n---\n\n# 业务代表模式\n\n>业务代表模式（Business Delegate Pattern）用于对表示层和业务层解耦。它基本上是用来减少通信或对表示层代码中的业务层代码的远程查询功能。在业务层中我们有以下实体。\n>\n>**客户端（Client）** - 表示层代码可以是 JSP、servlet 或 UI java 代码。\n>\n>**业务代表（Business Delegate）** - 一个为客户端实体提供的入口类，它提供了对业务服务方法的访问。\n>\n>**查询服务（LookUp Service）** - 查找服务对象负责获取相关的业务实现，并提供业务对象对业务代表对象的访问。\n>\n>**业务服务（Business Service）** - 业务服务接口。实现了该业务服务的实体类，提供了实际的业务实现逻辑。\n\n##### 示例演示：\n\n1. 创建peopleService接口\n\n   ```java\n   package test.business;\n   \n   public interface PeopleService {\n       void doSomething();\n   }\n   ```\n\n2. 创建两个服务实体类\n\n   ```java\n   package test.business;\n   \n   public class EatService implements PeopleService{\n       @Override\n       public void doSomething() {\n           System.out.println(\"eat...\");\n       }\n   }\n   ```\n\n   ```java\n   package test.business;\n   \n   public class SleepService implements PeopleService{\n       @Override\n       public void doSomething() {\n           System.out.println(\"sleep...\");\n       }\n   }\n   ```\n\n3. 创建查询服务\n\n   ```java\n   package test.business;\n   \n   public class BusinessSeach {\n   \n       public PeopleService seach(String serviceType) {\n           if (serviceType.equalsIgnoreCase(\"eat\")) {\n               return new EatService();\n           } else {\n               return new SleepService();\n           }\n       }\n   \n   }\n   ```\n\n4. 创建业务代表\n\n   ```java\n   package test.business;\n   \n   public class BusinessDelegate {\n       private BusinessSeach businessSeach = new BusinessSeach();\n       private PeopleService peopleService;\n       private String servcieType;\n   \n       public void setServiceType(String servcieType) {\n           this.servcieType = servcieType;\n       }\n   \n       public void doTask() {\n           peopleService = businessSeach.seach(servcieType);\n           peopleService.doSomething();\n       }\n   \n   }\n   ```\n\n5. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.business;\n   \n   public class BusinessDelegateDemo {\n   \n       public static void main(String[] args) {\n           BusinessDelegate businessDelegate = new BusinessDelegate();\n           Client client = new Client(businessDelegate);\n   \n           businessDelegate.setServiceType(\"eat\");\n           client.doTask();\n   \n           businessDelegate.setServiceType(\"sleep\");\n           client.doTask();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   eat...\n   sleep...\n   ```","slug":"业务代表模式","published":1,"updated":"2020-11-06T07:30:14.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wd000grcwo895rcf8t","content":"<h1 id=\"业务代表模式\"><a href=\"#业务代表模式\" class=\"headerlink\" title=\"业务代表模式\"></a>业务代表模式</h1><blockquote>\n<p>业务代表模式（Business Delegate Pattern）用于对表示层和业务层解耦。它基本上是用来减少通信或对表示层代码中的业务层代码的远程查询功能。在业务层中我们有以下实体。</p>\n<p><strong>客户端（Client）</strong> - 表示层代码可以是 JSP、servlet 或 UI java 代码。</p>\n<p><strong>业务代表（Business Delegate）</strong> - 一个为客户端实体提供的入口类，它提供了对业务服务方法的访问。</p>\n<p><strong>查询服务（LookUp Service）</strong> - 查找服务对象负责获取相关的业务实现，并提供业务对象对业务代表对象的访问。</p>\n<p><strong>业务服务（Business Service）</strong> - 业务服务接口。实现了该业务服务的实体类，提供了实际的业务实现逻辑。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>创建peopleService接口</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.business;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PeopleService</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建两个服务实体类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.business;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EatService</span> <span class=\"keyword\">implements</span> <span class=\"title\">PeopleService</span></span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"eat...\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.business;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SleepService</span> <span class=\"keyword\">implements</span> <span class=\"title\">PeopleService</span></span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"sleep...\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建查询服务</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.business;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessSeach</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PeopleService <span class=\"title\">seach</span><span class=\"params\">(String serviceType)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (serviceType.equalsIgnoreCase(<span class=\"string\">\"eat\"</span>)) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EatService();</span><br><span class=\"line\">        } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SleepService();</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建业务代表</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.business;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessDelegate</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BusinessSeach businessSeach = <span class=\"keyword\">new</span> BusinessSeach();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PeopleService peopleService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String servcieType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServiceType</span><span class=\"params\">(String servcieType)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.servcieType = servcieType;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doTask</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        peopleService = businessSeach.seach(servcieType);</span><br><span class=\"line\">        peopleService.doSomething();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.business;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessDelegateDemo</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        BusinessDelegate businessDelegate = <span class=\"keyword\">new</span> BusinessDelegate();</span><br><span class=\"line\">        Client client = <span class=\"keyword\">new</span> Client(businessDelegate);</span><br><span class=\"line\"></span><br><span class=\"line\">        businessDelegate.setServiceType(<span class=\"string\">\"eat\"</span>);</span><br><span class=\"line\">        client.doTask();</span><br><span class=\"line\"></span><br><span class=\"line\">        businessDelegate.setServiceType(<span class=\"string\">\"sleep\"</span>);</span><br><span class=\"line\">        client.doTask();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eat...</span><br><span class=\"line\">sleep...</span><br></pre></td></tr></tbody></table></figure></li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"业务代表模式\"><a href=\"#业务代表模式\" class=\"headerlink\" title=\"业务代表模式\"></a>业务代表模式</h1><blockquote>\n<p>业务代表模式（Business Delegate Pattern）用于对表示层和业务层解耦。它基本上是用来减少通信或对表示层代码中的业务层代码的远程查询功能。在业务层中我们有以下实体。</p>\n<p><strong>客户端（Client）</strong> - 表示层代码可以是 JSP、servlet 或 UI java 代码。</p>\n<p><strong>业务代表（Business Delegate）</strong> - 一个为客户端实体提供的入口类，它提供了对业务服务方法的访问。</p>\n<p><strong>查询服务（LookUp Service）</strong> - 查找服务对象负责获取相关的业务实现，并提供业务对象对业务代表对象的访问。</p>\n<p><strong>业务服务（Business Service）</strong> - 业务服务接口。实现了该业务服务的实体类，提供了实际的业务实现逻辑。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>创建peopleService接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.business;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PeopleService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建两个服务实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.business;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EatService</span> <span class=\"keyword\">implements</span> <span class=\"title\">PeopleService</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.business;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SleepService</span> <span class=\"keyword\">implements</span> <span class=\"title\">PeopleService</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sleep...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建查询服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.business;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessSeach</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PeopleService <span class=\"title\">seach</span><span class=\"params\">(String serviceType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (serviceType.equalsIgnoreCase(<span class=\"string\">&quot;eat&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EatService();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SleepService();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建业务代表</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.business;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessDelegate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BusinessSeach businessSeach = <span class=\"keyword\">new</span> BusinessSeach();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PeopleService peopleService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String servcieType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServiceType</span><span class=\"params\">(String servcieType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.servcieType = servcieType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doTask</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        peopleService = businessSeach.seach(servcieType);</span><br><span class=\"line\">        peopleService.doSomething();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.business;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessDelegateDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        BusinessDelegate businessDelegate = <span class=\"keyword\">new</span> BusinessDelegate();</span><br><span class=\"line\">        Client client = <span class=\"keyword\">new</span> Client(businessDelegate);</span><br><span class=\"line\"></span><br><span class=\"line\">        businessDelegate.setServiceType(<span class=\"string\">&quot;eat&quot;</span>);</span><br><span class=\"line\">        client.doTask();</span><br><span class=\"line\"></span><br><span class=\"line\">        businessDelegate.setServiceType(<span class=\"string\">&quot;sleep&quot;</span>);</span><br><span class=\"line\">        client.doTask();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eat...</span><br><span class=\"line\">sleep...</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"享元模式","date":"2020-10-31T06:14:16.000Z","_content":"\n# 享元模式\n\n>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。\n>\n>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。典型的 String str = \"abc\";如果有，则返回，如果没有则在字符串常量池中创建。\n\n##### 示例演示：\n\n1. 我们定义一个生物接口，生物接口中有一个说话的功能。\n\n   ```java\n   package test.flyweight;\n   \n   /**\n    * 所有生物的标识\n    */\n   public interface Organism {\n       //所有生物共有的一个功能，有自己的沟通方式\n       String say();\n   }\n   ```\n\n2. 定义一个动物实体类，让他具有生物的性质。\n\n   ```java\n   package test.flyweight;\n   \n   import lombok.Data;\n   \n   @Data\n   public class Animal implements Organism {\n   \n       private String name;\n   \n       public Animal(String name) {\n           this.name = name;\n       }\n   \n       @Override\n       public String say() {\n           return \"my name is :\" + name;\n       }\n   }\n   ```\n\n3. 创建一个工厂，用来创建和存储animal实体类\n\n   ```java\n   package test.flyweight;\n   \n   import java.util.HashMap;\n   import java.util.Map;\n   \n   public class OrganismFactory {\n       private final static Map<String, Organism> animalMap = new HashMap<>();\n   \n       public static Organism getAnimal(String name) {\n           Animal animal = (Animal) animalMap.get(name);\n           if (animal == null) {\n               animal = new Animal(name);\n               animalMap.put(name, animal);\n               System.out.println(animal.say()+\"第一次创建\");\n           }else{\n               System.out.println(animal.say()+\"从池中取出\");\n           }\n           return animal;\n       }\n   \n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.flyweight;\n   \n   public class FlyweightDemo {\n       \n       public static void main(String[] args) {\n           String[] names = {\"a\", \"b\", \"c\", \"d\"};\n           for (int i = 0; i < 10; i++) {\n               OrganismFactory.getAnimal(names[getIndex()]);\n           }\n       }\n   \n       private static Integer getIndex() {\n           return (int) (Math.random() * 4);\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   my name is :d第一次创建\n   my name is :d从池中取出\n   my name is :a第一次创建\n   my name is :b第一次创建\n   my name is :c第一次创建\n   my name is :c从池中取出\n   my name is :c从池中取出\n   my name is :c从池中取出\n   my name is :a从池中取出\n   my name is :d从池中取出\n   ```\n\n   ##### 说明：\n\n   >在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。大大减少对象的创建，降低系统的内存，使效率提高；缺点是提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。\n\n","source":"_posts/享元模式.md","raw":"---\ntitle: 享元模式\ndate: 2020-10-31 14:14:16\ntags:\n- java\n- 设计模式\n---\n\n# 享元模式\n\n>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。\n>\n>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。典型的 String str = \"abc\";如果有，则返回，如果没有则在字符串常量池中创建。\n\n##### 示例演示：\n\n1. 我们定义一个生物接口，生物接口中有一个说话的功能。\n\n   ```java\n   package test.flyweight;\n   \n   /**\n    * 所有生物的标识\n    */\n   public interface Organism {\n       //所有生物共有的一个功能，有自己的沟通方式\n       String say();\n   }\n   ```\n\n2. 定义一个动物实体类，让他具有生物的性质。\n\n   ```java\n   package test.flyweight;\n   \n   import lombok.Data;\n   \n   @Data\n   public class Animal implements Organism {\n   \n       private String name;\n   \n       public Animal(String name) {\n           this.name = name;\n       }\n   \n       @Override\n       public String say() {\n           return \"my name is :\" + name;\n       }\n   }\n   ```\n\n3. 创建一个工厂，用来创建和存储animal实体类\n\n   ```java\n   package test.flyweight;\n   \n   import java.util.HashMap;\n   import java.util.Map;\n   \n   public class OrganismFactory {\n       private final static Map<String, Organism> animalMap = new HashMap<>();\n   \n       public static Organism getAnimal(String name) {\n           Animal animal = (Animal) animalMap.get(name);\n           if (animal == null) {\n               animal = new Animal(name);\n               animalMap.put(name, animal);\n               System.out.println(animal.say()+\"第一次创建\");\n           }else{\n               System.out.println(animal.say()+\"从池中取出\");\n           }\n           return animal;\n       }\n   \n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.flyweight;\n   \n   public class FlyweightDemo {\n       \n       public static void main(String[] args) {\n           String[] names = {\"a\", \"b\", \"c\", \"d\"};\n           for (int i = 0; i < 10; i++) {\n               OrganismFactory.getAnimal(names[getIndex()]);\n           }\n       }\n   \n       private static Integer getIndex() {\n           return (int) (Math.random() * 4);\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   my name is :d第一次创建\n   my name is :d从池中取出\n   my name is :a第一次创建\n   my name is :b第一次创建\n   my name is :c第一次创建\n   my name is :c从池中取出\n   my name is :c从池中取出\n   my name is :c从池中取出\n   my name is :a从池中取出\n   my name is :d从池中取出\n   ```\n\n   ##### 说明：\n\n   >在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。大大减少对象的创建，降低系统的内存，使效率提高；缺点是提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。\n\n","slug":"享元模式","published":1,"updated":"2020-11-03T02:05:57.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44we000ircwofdwbbqx3","content":"<h1 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h1><blockquote>\n<p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p>\n<p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。典型的 String str = “abc”;如果有，则返回，如果没有则在字符串常量池中创建。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们定义一个生物接口，生物接口中有一个说话的功能。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.flyweight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有生物的标识</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Organism</span> </span>{</span><br><span class=\"line\">    <span class=\"comment\">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>定义一个动物实体类，让他具有生物的性质。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.flyweight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span><span class=\"params\">(String name)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"my name is :\"</span> + name;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建一个工厂，用来创建和存储animal实体类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.flyweight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrganismFactory</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Map&lt;String, Organism&gt; animalMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Organism <span class=\"title\">getAnimal</span><span class=\"params\">(String name)</span> </span>{</span><br><span class=\"line\">        Animal animal = (Animal) animalMap.get(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (animal == <span class=\"keyword\">null</span>) {</span><br><span class=\"line\">            animal = <span class=\"keyword\">new</span> Animal(name);</span><br><span class=\"line\">            animalMap.put(name, animal);</span><br><span class=\"line\">            System.out.println(animal.say()+<span class=\"string\">\"第一次创建\"</span>);</span><br><span class=\"line\">        }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">            System.out.println(animal.say()+<span class=\"string\">\"从池中取出\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> animal;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.flyweight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyweightDemo</span> </span>{</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        String[] names = {<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>};</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) {</span><br><span class=\"line\">            OrganismFactory.getAnimal(names[getIndex()]);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">getIndex</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (Math.random() * <span class=\"number\">4</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my name is :d第一次创建</span><br><span class=\"line\">my name is :d从池中取出</span><br><span class=\"line\">my name is :a第一次创建</span><br><span class=\"line\">my name is :b第一次创建</span><br><span class=\"line\">my name is :c第一次创建</span><br><span class=\"line\">my name is :c从池中取出</span><br><span class=\"line\">my name is :c从池中取出</span><br><span class=\"line\">my name is :c从池中取出</span><br><span class=\"line\">my name is :a从池中取出</span><br><span class=\"line\">my name is :d从池中取出</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。大大减少对象的创建，降低系统的内存，使效率提高；缺点是提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h1><blockquote>\n<p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p>\n<p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。典型的 String str = “abc”;如果有，则返回，如果没有则在字符串常量池中创建。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们定义一个生物接口，生物接口中有一个说话的功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.flyweight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有生物的标识</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Organism</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义一个动物实体类，让他具有生物的性质。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.flyweight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;my name is :&quot;</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个工厂，用来创建和存储animal实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.flyweight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrganismFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Map&lt;String, Organism&gt; animalMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Organism <span class=\"title\">getAnimal</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        Animal animal = (Animal) animalMap.get(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (animal == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            animal = <span class=\"keyword\">new</span> Animal(name);</span><br><span class=\"line\">            animalMap.put(name, animal);</span><br><span class=\"line\">            System.out.println(animal.say()+<span class=\"string\">&quot;第一次创建&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(animal.say()+<span class=\"string\">&quot;从池中取出&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> animal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.flyweight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyweightDemo</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String[] names = &#123;<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;d&quot;</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            OrganismFactory.getAnimal(names[getIndex()]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">getIndex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (Math.random() * <span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my name is :d第一次创建</span><br><span class=\"line\">my name is :d从池中取出</span><br><span class=\"line\">my name is :a第一次创建</span><br><span class=\"line\">my name is :b第一次创建</span><br><span class=\"line\">my name is :c第一次创建</span><br><span class=\"line\">my name is :c从池中取出</span><br><span class=\"line\">my name is :c从池中取出</span><br><span class=\"line\">my name is :c从池中取出</span><br><span class=\"line\">my name is :a从池中取出</span><br><span class=\"line\">my name is :d从池中取出</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。大大减少对象的创建，降低系统的内存，使效率提高；缺点是提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"代理模式","date":"2020-11-03T09:34:52.000Z","_content":"\n# 代理模式\n\n>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。\n>\n>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。最典型的就是SpringAOP，我们不再直接new对象了，而是通过spring动态代理来获取对象。\n\n##### 示例演示：\n\n1. 我们创建一个people的接口\n\n   ```java\n   package test.proxy;\n   \n   public interface People {\n   \n       void say();\n   }\n   ```\n\n2. 创建一个实现类\n\n   ```java\n   package test.proxy;\n   \n   public class PeopleImpl implements People {\n       private String name;\n   \n       public PeopleImpl(String name) {\n           this.name = name;\n           System.out.println(\"Loading...\");\n       }\n   \n       @Override\n       public void say() {\n           System.out.println(\"my name is \" + name);\n       }\n   }\n   ```\n\n3. 创建一个实现类的代理类\n\n   ```java\n   package test.proxy;\n   \n   public class ProxyPeople implements People {\n       private PeopleImpl peopleImpl;\n       private String name;\n   \n       public ProxyPeople(String name) {\n           this.name = name;\n       }\n   \n       @Override\n       public void say() {\n           if (peopleImpl == null) {\n               peopleImpl = new PeopleImpl(name);\n           }\n           peopleImpl.say();\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.proxy;\n   \n   public class ProxyDemo {\n       public static void main(String[] args) {\n           People people = new ProxyPeople(\"radio\");\n           people.say();\n           System.out.println(\"---------------------------------\");\n           people.say();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   Loading...\n   my name is radio\n   ---------------------------------\n   my name is radio\n   ```\n\n##### 说明：\n\n>**优点：** 1、职责清晰。 2、高扩展性。 3、智能化。\n>\n>**缺点：** 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。","source":"_posts/代理模式.md","raw":"---\ntitle: 代理模式\ndate: 2020-11-03 17:34:52\ntags:\n- java\n- 设计模式\n---\n\n# 代理模式\n\n>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。\n>\n>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。最典型的就是SpringAOP，我们不再直接new对象了，而是通过spring动态代理来获取对象。\n\n##### 示例演示：\n\n1. 我们创建一个people的接口\n\n   ```java\n   package test.proxy;\n   \n   public interface People {\n   \n       void say();\n   }\n   ```\n\n2. 创建一个实现类\n\n   ```java\n   package test.proxy;\n   \n   public class PeopleImpl implements People {\n       private String name;\n   \n       public PeopleImpl(String name) {\n           this.name = name;\n           System.out.println(\"Loading...\");\n       }\n   \n       @Override\n       public void say() {\n           System.out.println(\"my name is \" + name);\n       }\n   }\n   ```\n\n3. 创建一个实现类的代理类\n\n   ```java\n   package test.proxy;\n   \n   public class ProxyPeople implements People {\n       private PeopleImpl peopleImpl;\n       private String name;\n   \n       public ProxyPeople(String name) {\n           this.name = name;\n       }\n   \n       @Override\n       public void say() {\n           if (peopleImpl == null) {\n               peopleImpl = new PeopleImpl(name);\n           }\n           peopleImpl.say();\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.proxy;\n   \n   public class ProxyDemo {\n       public static void main(String[] args) {\n           People people = new ProxyPeople(\"radio\");\n           people.say();\n           System.out.println(\"---------------------------------\");\n           people.say();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   Loading...\n   my name is radio\n   ---------------------------------\n   my name is radio\n   ```\n\n##### 说明：\n\n>**优点：** 1、职责清晰。 2、高扩展性。 3、智能化。\n>\n>**缺点：** 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。","slug":"代理模式","published":1,"updated":"2020-11-03T09:39:12.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wf000jrcwofzat8w8r","content":"<h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><blockquote>\n<p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。</p>\n<p>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。最典型的就是SpringAOP，我们不再直接new对象了，而是通过spring动态代理来获取对象。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们创建一个people的接口</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建一个实现类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleImpl</span><span class=\"params\">(String name)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Loading...\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"my name is \"</span> + name);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建一个实现类的代理类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyPeople</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PeopleImpl peopleImpl;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyPeople</span><span class=\"params\">(String name)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (peopleImpl == <span class=\"keyword\">null</span>) {</span><br><span class=\"line\">            peopleImpl = <span class=\"keyword\">new</span> PeopleImpl(name);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        peopleImpl.say();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        People people = <span class=\"keyword\">new</span> ProxyPeople(<span class=\"string\">\"radio\"</span>);</span><br><span class=\"line\">        people.say();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---------------------------------\"</span>);</span><br><span class=\"line\">        people.say();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loading...</span><br><span class=\"line\">my name is radio</span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">my name is radio</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、职责清晰。 2、高扩展性。 3、智能化。</p>\n<p><strong>缺点：</strong> 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><blockquote>\n<p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。</p>\n<p>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。最典型的就是SpringAOP，我们不再直接new对象了，而是通过spring动态代理来获取对象。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们创建一个people的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleImpl</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Loading...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;my name is &quot;</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个实现类的代理类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyPeople</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PeopleImpl peopleImpl;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyPeople</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (peopleImpl == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            peopleImpl = <span class=\"keyword\">new</span> PeopleImpl(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        peopleImpl.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        People people = <span class=\"keyword\">new</span> ProxyPeople(<span class=\"string\">&quot;radio&quot;</span>);</span><br><span class=\"line\">        people.say();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------------------------&quot;</span>);</span><br><span class=\"line\">        people.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loading...</span><br><span class=\"line\">my name is radio</span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">my name is radio</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、职责清晰。 2、高扩展性。 3、智能化。</p>\n<p><strong>缺点：</strong> 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</p>\n</blockquote>\n"},{"title":"单例模式","date":"2020-11-06T08:42:26.000Z","_content":"\n# 单例模式\n\n>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n>\n>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。\n>\n>单例类只能有一个实例。\n>\n>单例类必须自己创建自己的唯一实例。\n>\n>单例类必须给所有其他对象提供这一实例。\n\n单例模式的5种实现方式\n\n##### 懒汉式-线程不安全\n\n懒得创建，你调用我的时候再创建\n\n```java\npackage test.singleton;\n\nimport java.io.Serializable;\n\n/**\n * 懒汉式\n */\npublic class SingletonOne {\n\n    private static SingletonOne instance = null;\n\n    private SingletonOne() {\n    }\n\n    public static SingletonOne getInstance() {\n        if (instance == null) {\n            instance = new SingletonOne();\n        }\n        return instance;\n    }\n}\n\n```\n\n##### 饿汉式-天生线程安全\n\n早就创建好了，随时等着调用\n\n```java\npackage test.singleton;\n\n/**\n * 饿汉式\n */\npublic class SingletonTwo {\n    private static SingletonTwo instance = new SingletonTwo();\n\n    private SingletonTwo() {\n    }\n\n    public static SingletonTwo getInstance() {\n        return instance;\n    }\n}\n```\n\n##### 双检锁/双重校验锁（DCL，即 double-checked locking）\n\n```java\npackage test.singleton;\n\n/**\n * 双检锁/双重校验锁（DCL，即 double-checked locking）\n */\npublic class SingletonThree {\n    private volatile static SingletonThree instance = null;\n\n    private SingletonThree() {\n    }\n\n    public static SingletonThree getInstance() {\n        if (instance == null) {\n            //synchronize加在这儿的好处是，第一是为了线程安全，第二是如果已经被实例化了，那么就不用加锁，直接获取对象，相比把锁加在方法上效率要高一些。\n            synchronized (SingletonThree.class) {\n                if (instance == null) {\n                    instance = new SingletonThree();\n                }\n            }\n        }\n        return instance;\n    }\n}\n```\n\n>需要加volatile关键字，否则会出现错误。问题的原因在于JVM指令重排优化的存在。在某个线程创建单例对象时，在构造方法被调用之前，就为该对象分配了内存空间并将对象的字段设置为默认值，此时就可以将分配的内存地址赋值给instance字段了。然而该对象可能还没有初始化（写完还未同步主存），若紧接着另外一个线程来调用getInstance，取到的就是状态不正确的对象，程序就会出错。\n>\n>由于 synchronized 并不是对 instance实例进行加锁（因为现在还并没有实例），所以线程在执行完instance = new SingletonThree()修改 instance 的值后，应该将修改后的 instance立即写入主存（main memory），而不是暂时存在寄存器或者高速缓冲区（caches）中，以保证新的值对其它线程可见。\n>\n>至此，我们要加volatile关键字，保证内存可见性。\n\n##### 登记式/静态内部类\n\n```java\npackage test.singleton;\n\n/**\n * 登记式/静态内部类\n */\npublic class SingletonFour {\n    private SingletonFour() {\n    }\n\n    private static class SingletonFourHolder {\n        private static final SingletonFour INSTANCE = new SingletonFour();\n    }\n\n    public static final SingletonFour getInstance() {\n        return SingletonFourHolder.INSTANCE;\n    }\n}\n```\n\n##### 枚举\n\n```java\npackage test.singleton;\n\n/**\n * 枚举\n */\npublic enum  SingletonFive {\n    INSTANCE;\n    public void doSomeThing(){\n        System.out.println(\"123321\");\n    }\n}\n```\n\n使用：\n\n```java\n//枚举调用方式\nSingletonFive.INSTANCE.doSomeThing();\n```\n\n##### 说明：\n\n>一般情况下，不建议使用第 1 种方式，建议使用第 2 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 4 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 5 种枚举方式。如果有其他特殊的需求，可以考虑使用第 3 种双检锁方式。\n\n### 破坏单例模式的三种方式\n\n> 反射，克隆，序列化\n\n```java\npackage test.singleton;\n\nimport java.io.*;\nimport java.lang.reflect.Constructor;\n\n/**\n * 破坏单例的两种方式\n * 1，反射\n * 2，克隆   需要单例实现Cloneable接口\n * 3，序列化  需要单例实现Serializable接口\n */\npublic class SingletonDemo {\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"---------------序列化------------------\");\n        SingletonOne singleton = SingletonOne.getInstance();\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(bos);\n        oos.writeObject(singleton);\n        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());\n        ObjectInputStream ois =new ObjectInputStream(bis);\n        SingletonOne serializeSingleton = (SingletonOne) ois.readObject();\n        System.out.println(singleton == serializeSingleton);\n\n        System.out.println(\"---------------克隆------------------\");\n        SingletonOne cloneSingleton = (SingletonOne) singleton.clone();\n        System.out.println(singleton == cloneSingleton);\n\n        System.out.println(\"---------------反射------------------\");\n        Constructor<SingletonOne> cons = SingletonOne.class.getDeclaredConstructor();\n        cons.setAccessible(true);//SingletonOne类中的成员变量为private,故必须进行此操作\n        SingletonOne reflextSingleton = cons.newInstance();\n        System.out.println(singleton == reflextSingleton);\n    }\n}\n```\n\n运行结果：\n\n```java\n---------------序列化------------------\nfalse\n---------------克隆------------------\nfalse\n---------------反射------------------\nfalse\n```\n\n这三种方式的规避方法\n\n```java\npackage test.singleton;\n\nimport java.io.Serializable;\n\n/**\n * 懒汉式\n */\npublic class SingletonOne implements Serializable, Cloneable {\n    //防止反射\n    private static volatile boolean isCreate = false;//默认是第一次创建\n\n    private static SingletonOne instance = null;\n\n    private SingletonOne() {\n        if (isCreate) {\n            throw new RuntimeException(\"已创建过\");\n        }\n        isCreate = true;\n\n    }\n\n    public static SingletonOne getInstance() {\n        if (instance == null) {\n            instance = new SingletonOne();\n        }\n        return instance;\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n\t\t//return super.clone();\n        //防止克隆\n        return instance;\n    }\n    \n\t//防止序列化\n    private Object readResolve() {\n        return instance;\n    }\n}\n```\n\n运行结果：\n\n```java\n---------------序列化------------------\ntrue\n---------------克隆------------------\ntrue\n---------------反射------------------\nException in thread \"main\" java.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat test.singleton.SingletonDemo.main(SingletonDemo.java:31)\nCaused by: java.lang.RuntimeException: 已创建过\n\tat test.singleton.SingletonOne.<init>(SingletonOne.java:16)\n\t... 5 more\n```\n\n这里我们简单说一下 为什么防止序列化要添加readResolve(),返回Object对象\n\n>一般来说, 一个类实现了 Serializable接口, 我们就可以把它往内存地写再从内存里读出而\"组装\"成一个跟原来一模一样的对象.\n>\n>不过当序列化遇到单例时,这里边就有了个问题: 从内存读出而组装的对象破坏了单例的规则. 单例是要求一个JVM中只有一个类对象的, 而现在通过反序列化,一个新的对象克隆了出来,与以前序列化的对象不能equlas。\n>\n>如果被反序列化的对象的类存在readResolve这个方法，他会调用这个方法来返回一个“array”，然后浅拷贝一份，作为返回值，并且无视掉反序列化的值，即使那个字节码已经被解析。\n\n","source":"_posts/单例模式.md","raw":"---\ntitle: 单例模式\ndate: 2020-11-06 16:42:26\ntags:\n- java\n- 设计模式\n---\n\n# 单例模式\n\n>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n>\n>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。\n>\n>单例类只能有一个实例。\n>\n>单例类必须自己创建自己的唯一实例。\n>\n>单例类必须给所有其他对象提供这一实例。\n\n单例模式的5种实现方式\n\n##### 懒汉式-线程不安全\n\n懒得创建，你调用我的时候再创建\n\n```java\npackage test.singleton;\n\nimport java.io.Serializable;\n\n/**\n * 懒汉式\n */\npublic class SingletonOne {\n\n    private static SingletonOne instance = null;\n\n    private SingletonOne() {\n    }\n\n    public static SingletonOne getInstance() {\n        if (instance == null) {\n            instance = new SingletonOne();\n        }\n        return instance;\n    }\n}\n\n```\n\n##### 饿汉式-天生线程安全\n\n早就创建好了，随时等着调用\n\n```java\npackage test.singleton;\n\n/**\n * 饿汉式\n */\npublic class SingletonTwo {\n    private static SingletonTwo instance = new SingletonTwo();\n\n    private SingletonTwo() {\n    }\n\n    public static SingletonTwo getInstance() {\n        return instance;\n    }\n}\n```\n\n##### 双检锁/双重校验锁（DCL，即 double-checked locking）\n\n```java\npackage test.singleton;\n\n/**\n * 双检锁/双重校验锁（DCL，即 double-checked locking）\n */\npublic class SingletonThree {\n    private volatile static SingletonThree instance = null;\n\n    private SingletonThree() {\n    }\n\n    public static SingletonThree getInstance() {\n        if (instance == null) {\n            //synchronize加在这儿的好处是，第一是为了线程安全，第二是如果已经被实例化了，那么就不用加锁，直接获取对象，相比把锁加在方法上效率要高一些。\n            synchronized (SingletonThree.class) {\n                if (instance == null) {\n                    instance = new SingletonThree();\n                }\n            }\n        }\n        return instance;\n    }\n}\n```\n\n>需要加volatile关键字，否则会出现错误。问题的原因在于JVM指令重排优化的存在。在某个线程创建单例对象时，在构造方法被调用之前，就为该对象分配了内存空间并将对象的字段设置为默认值，此时就可以将分配的内存地址赋值给instance字段了。然而该对象可能还没有初始化（写完还未同步主存），若紧接着另外一个线程来调用getInstance，取到的就是状态不正确的对象，程序就会出错。\n>\n>由于 synchronized 并不是对 instance实例进行加锁（因为现在还并没有实例），所以线程在执行完instance = new SingletonThree()修改 instance 的值后，应该将修改后的 instance立即写入主存（main memory），而不是暂时存在寄存器或者高速缓冲区（caches）中，以保证新的值对其它线程可见。\n>\n>至此，我们要加volatile关键字，保证内存可见性。\n\n##### 登记式/静态内部类\n\n```java\npackage test.singleton;\n\n/**\n * 登记式/静态内部类\n */\npublic class SingletonFour {\n    private SingletonFour() {\n    }\n\n    private static class SingletonFourHolder {\n        private static final SingletonFour INSTANCE = new SingletonFour();\n    }\n\n    public static final SingletonFour getInstance() {\n        return SingletonFourHolder.INSTANCE;\n    }\n}\n```\n\n##### 枚举\n\n```java\npackage test.singleton;\n\n/**\n * 枚举\n */\npublic enum  SingletonFive {\n    INSTANCE;\n    public void doSomeThing(){\n        System.out.println(\"123321\");\n    }\n}\n```\n\n使用：\n\n```java\n//枚举调用方式\nSingletonFive.INSTANCE.doSomeThing();\n```\n\n##### 说明：\n\n>一般情况下，不建议使用第 1 种方式，建议使用第 2 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 4 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 5 种枚举方式。如果有其他特殊的需求，可以考虑使用第 3 种双检锁方式。\n\n### 破坏单例模式的三种方式\n\n> 反射，克隆，序列化\n\n```java\npackage test.singleton;\n\nimport java.io.*;\nimport java.lang.reflect.Constructor;\n\n/**\n * 破坏单例的两种方式\n * 1，反射\n * 2，克隆   需要单例实现Cloneable接口\n * 3，序列化  需要单例实现Serializable接口\n */\npublic class SingletonDemo {\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"---------------序列化------------------\");\n        SingletonOne singleton = SingletonOne.getInstance();\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(bos);\n        oos.writeObject(singleton);\n        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());\n        ObjectInputStream ois =new ObjectInputStream(bis);\n        SingletonOne serializeSingleton = (SingletonOne) ois.readObject();\n        System.out.println(singleton == serializeSingleton);\n\n        System.out.println(\"---------------克隆------------------\");\n        SingletonOne cloneSingleton = (SingletonOne) singleton.clone();\n        System.out.println(singleton == cloneSingleton);\n\n        System.out.println(\"---------------反射------------------\");\n        Constructor<SingletonOne> cons = SingletonOne.class.getDeclaredConstructor();\n        cons.setAccessible(true);//SingletonOne类中的成员变量为private,故必须进行此操作\n        SingletonOne reflextSingleton = cons.newInstance();\n        System.out.println(singleton == reflextSingleton);\n    }\n}\n```\n\n运行结果：\n\n```java\n---------------序列化------------------\nfalse\n---------------克隆------------------\nfalse\n---------------反射------------------\nfalse\n```\n\n这三种方式的规避方法\n\n```java\npackage test.singleton;\n\nimport java.io.Serializable;\n\n/**\n * 懒汉式\n */\npublic class SingletonOne implements Serializable, Cloneable {\n    //防止反射\n    private static volatile boolean isCreate = false;//默认是第一次创建\n\n    private static SingletonOne instance = null;\n\n    private SingletonOne() {\n        if (isCreate) {\n            throw new RuntimeException(\"已创建过\");\n        }\n        isCreate = true;\n\n    }\n\n    public static SingletonOne getInstance() {\n        if (instance == null) {\n            instance = new SingletonOne();\n        }\n        return instance;\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n\t\t//return super.clone();\n        //防止克隆\n        return instance;\n    }\n    \n\t//防止序列化\n    private Object readResolve() {\n        return instance;\n    }\n}\n```\n\n运行结果：\n\n```java\n---------------序列化------------------\ntrue\n---------------克隆------------------\ntrue\n---------------反射------------------\nException in thread \"main\" java.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat test.singleton.SingletonDemo.main(SingletonDemo.java:31)\nCaused by: java.lang.RuntimeException: 已创建过\n\tat test.singleton.SingletonOne.<init>(SingletonOne.java:16)\n\t... 5 more\n```\n\n这里我们简单说一下 为什么防止序列化要添加readResolve(),返回Object对象\n\n>一般来说, 一个类实现了 Serializable接口, 我们就可以把它往内存地写再从内存里读出而\"组装\"成一个跟原来一模一样的对象.\n>\n>不过当序列化遇到单例时,这里边就有了个问题: 从内存读出而组装的对象破坏了单例的规则. 单例是要求一个JVM中只有一个类对象的, 而现在通过反序列化,一个新的对象克隆了出来,与以前序列化的对象不能equlas。\n>\n>如果被反序列化的对象的类存在readResolve这个方法，他会调用这个方法来返回一个“array”，然后浅拷贝一份，作为返回值，并且无视掉反序列化的值，即使那个字节码已经被解析。\n\n","slug":"单例模式","published":1,"updated":"2020-11-06T09:07:15.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wg000mrcwo0la5cedm","content":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><blockquote>\n<p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\n<p>单例类只能有一个实例。</p>\n<p>单例类必须自己创建自己的唯一实例。</p>\n<p>单例类必须给所有其他对象提供这一实例。</p>\n</blockquote>\n<p>单例模式的5种实现方式</p>\n<h5 id=\"懒汉式-线程不安全\"><a href=\"#懒汉式-线程不安全\" class=\"headerlink\" title=\"懒汉式-线程不安全\"></a>懒汉式-线程不安全</h5><p>懒得创建，你调用我的时候再创建</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonOne</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonOne instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonOne</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonOne <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) {</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonOne();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"饿汉式-天生线程安全\"><a href=\"#饿汉式-天生线程安全\" class=\"headerlink\" title=\"饿汉式-天生线程安全\"></a>饿汉式-天生线程安全</h5><p>早就创建好了，随时等着调用</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 饿汉式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTwo</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonTwo instance = <span class=\"keyword\">new</span> SingletonTwo();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonTwo</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonTwo <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"双检锁-双重校验锁（DCL，即-double-checked-locking）\"><a href=\"#双检锁-双重校验锁（DCL，即-double-checked-locking）\" class=\"headerlink\" title=\"双检锁/双重校验锁（DCL，即 double-checked locking）\"></a>双检锁/双重校验锁（DCL，即 double-checked locking）</h5><figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双检锁/双重校验锁（DCL，即 double-checked locking）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonThree</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> SingletonThree instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonThree</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonThree <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) {</span><br><span class=\"line\">            <span class=\"comment\">//synchronize加在这儿的好处是，第一是为了线程安全，第二是如果已经被实例化了，那么就不用加锁，直接获取对象，相比把锁加在方法上效率要高一些。</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (SingletonThree.class) {</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) {</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> SingletonThree();</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>需要加volatile关键字，否则会出现错误。问题的原因在于JVM指令重排优化的存在。在某个线程创建单例对象时，在构造方法被调用之前，就为该对象分配了内存空间并将对象的字段设置为默认值，此时就可以将分配的内存地址赋值给instance字段了。然而该对象可能还没有初始化（写完还未同步主存），若紧接着另外一个线程来调用getInstance，取到的就是状态不正确的对象，程序就会出错。</p>\n<p>由于 synchronized 并不是对 instance实例进行加锁（因为现在还并没有实例），所以线程在执行完instance = new SingletonThree()修改 instance 的值后，应该将修改后的 instance立即写入主存（main memory），而不是暂时存在寄存器或者高速缓冲区（caches）中，以保证新的值对其它线程可见。</p>\n<p>至此，我们要加volatile关键字，保证内存可见性。</p>\n</blockquote>\n<h5 id=\"登记式-静态内部类\"><a href=\"#登记式-静态内部类\" class=\"headerlink\" title=\"登记式/静态内部类\"></a>登记式/静态内部类</h5><figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 登记式/静态内部类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonFour</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonFour</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonFourHolder</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonFour INSTANCE = <span class=\"keyword\">new</span> SingletonFour();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonFour <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonFourHolder.INSTANCE;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h5><figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 枚举</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span>  <span class=\"title\">SingletonFive</span> </span>{</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomeThing</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"123321\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//枚举调用方式</span></span><br><span class=\"line\">SingletonFive.INSTANCE.doSomeThing();</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>一般情况下，不建议使用第 1 种方式，建议使用第 2 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 4 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 5 种枚举方式。如果有其他特殊的需求，可以考虑使用第 3 种双检锁方式。</p>\n</blockquote>\n<h3 id=\"破坏单例模式的三种方式\"><a href=\"#破坏单例模式的三种方式\" class=\"headerlink\" title=\"破坏单例模式的三种方式\"></a>破坏单例模式的三种方式</h3><blockquote>\n<p>反射，克隆，序列化</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 破坏单例的两种方式</span></span><br><span class=\"line\"><span class=\"comment\"> * 1，反射</span></span><br><span class=\"line\"><span class=\"comment\"> * 2，克隆   需要单例实现Cloneable接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 3，序列化  需要单例实现Serializable接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---------------序列化------------------\"</span>);</span><br><span class=\"line\">        SingletonOne singleton = SingletonOne.getInstance();</span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\">        oos.writeObject(singleton);</span><br><span class=\"line\">        ByteArrayInputStream bis = <span class=\"keyword\">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class=\"line\">        ObjectInputStream ois =<span class=\"keyword\">new</span> ObjectInputStream(bis);</span><br><span class=\"line\">        SingletonOne serializeSingleton = (SingletonOne) ois.readObject();</span><br><span class=\"line\">        System.out.println(singleton == serializeSingleton);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---------------克隆------------------\"</span>);</span><br><span class=\"line\">        SingletonOne cloneSingleton = (SingletonOne) singleton.clone();</span><br><span class=\"line\">        System.out.println(singleton == cloneSingleton);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---------------反射------------------\"</span>);</span><br><span class=\"line\">        Constructor&lt;SingletonOne&gt; cons = SingletonOne.class.getDeclaredConstructor();</span><br><span class=\"line\">        cons.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//SingletonOne类中的成员变量为private,故必须进行此操作</span></span><br><span class=\"line\">        SingletonOne reflextSingleton = cons.newInstance();</span><br><span class=\"line\">        System.out.println(singleton == reflextSingleton);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---------------序列化------------------</span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\">---------------克隆------------------</span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\">---------------反射------------------</span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>这三种方式的规避方法</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonOne</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>, <span class=\"title\">Cloneable</span> </span>{</span><br><span class=\"line\">    <span class=\"comment\">//防止反射</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> isCreate = <span class=\"keyword\">false</span>;<span class=\"comment\">//默认是第一次创建</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonOne instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonOne</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isCreate) {</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"已创建过\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        isCreate = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonOne <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) {</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonOne();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>{</span><br><span class=\"line\">\t\t<span class=\"comment\">//return super.clone();</span></span><br><span class=\"line\">        <span class=\"comment\">//防止克隆</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//防止序列化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---------------序列化------------------</span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\">---------------克隆------------------</span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\">---------------反射------------------</span><br><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.lang.reflect.InvocationTargetException</span><br><span class=\"line\">\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class=\"number\">62</span>)</span><br><span class=\"line\">\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class=\"number\">45</span>)</span><br><span class=\"line\">\tat java.lang.reflect.Constructor.newInstance(Constructor.java:<span class=\"number\">423</span>)</span><br><span class=\"line\">\tat test.singleton.SingletonDemo.main(SingletonDemo.java:<span class=\"number\">31</span>)</span><br><span class=\"line\">Caused by: java.lang.RuntimeException: 已创建过</span><br><span class=\"line\">\tat test.singleton.SingletonOne.&lt;init&gt;(SingletonOne.java:<span class=\"number\">16</span>)</span><br><span class=\"line\">\t... <span class=\"number\">5</span> more</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这里我们简单说一下 为什么防止序列化要添加readResolve(),返回Object对象</p>\n<blockquote>\n<p>一般来说, 一个类实现了 Serializable接口, 我们就可以把它往内存地写再从内存里读出而”组装”成一个跟原来一模一样的对象.</p>\n<p>不过当序列化遇到单例时,这里边就有了个问题: 从内存读出而组装的对象破坏了单例的规则. 单例是要求一个JVM中只有一个类对象的, 而现在通过反序列化,一个新的对象克隆了出来,与以前序列化的对象不能equlas。</p>\n<p>如果被反序列化的对象的类存在readResolve这个方法，他会调用这个方法来返回一个“array”，然后浅拷贝一份，作为返回值，并且无视掉反序列化的值，即使那个字节码已经被解析。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><blockquote>\n<p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\n<p>单例类只能有一个实例。</p>\n<p>单例类必须自己创建自己的唯一实例。</p>\n<p>单例类必须给所有其他对象提供这一实例。</p>\n</blockquote>\n<p>单例模式的5种实现方式</p>\n<h5 id=\"懒汉式-线程不安全\"><a href=\"#懒汉式-线程不安全\" class=\"headerlink\" title=\"懒汉式-线程不安全\"></a>懒汉式-线程不安全</h5><p>懒得创建，你调用我的时候再创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonOne</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonOne instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonOne</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonOne <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonOne();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"饿汉式-天生线程安全\"><a href=\"#饿汉式-天生线程安全\" class=\"headerlink\" title=\"饿汉式-天生线程安全\"></a>饿汉式-天生线程安全</h5><p>早就创建好了，随时等着调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 饿汉式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTwo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonTwo instance = <span class=\"keyword\">new</span> SingletonTwo();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonTwo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonTwo <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"双检锁-双重校验锁（DCL，即-double-checked-locking）\"><a href=\"#双检锁-双重校验锁（DCL，即-double-checked-locking）\" class=\"headerlink\" title=\"双检锁/双重校验锁（DCL，即 double-checked locking）\"></a>双检锁/双重校验锁（DCL，即 double-checked locking）</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双检锁/双重校验锁（DCL，即 double-checked locking）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonThree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> SingletonThree instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonThree</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonThree <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//synchronize加在这儿的好处是，第一是为了线程安全，第二是如果已经被实例化了，那么就不用加锁，直接获取对象，相比把锁加在方法上效率要高一些。</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (SingletonThree.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> SingletonThree();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>需要加volatile关键字，否则会出现错误。问题的原因在于JVM指令重排优化的存在。在某个线程创建单例对象时，在构造方法被调用之前，就为该对象分配了内存空间并将对象的字段设置为默认值，此时就可以将分配的内存地址赋值给instance字段了。然而该对象可能还没有初始化（写完还未同步主存），若紧接着另外一个线程来调用getInstance，取到的就是状态不正确的对象，程序就会出错。</p>\n<p>由于 synchronized 并不是对 instance实例进行加锁（因为现在还并没有实例），所以线程在执行完instance = new SingletonThree()修改 instance 的值后，应该将修改后的 instance立即写入主存（main memory），而不是暂时存在寄存器或者高速缓冲区（caches）中，以保证新的值对其它线程可见。</p>\n<p>至此，我们要加volatile关键字，保证内存可见性。</p>\n</blockquote>\n<h5 id=\"登记式-静态内部类\"><a href=\"#登记式-静态内部类\" class=\"headerlink\" title=\"登记式/静态内部类\"></a>登记式/静态内部类</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 登记式/静态内部类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonFour</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonFour</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonFourHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonFour INSTANCE = <span class=\"keyword\">new</span> SingletonFour();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonFour <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonFourHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 枚举</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span>  <span class=\"title\">SingletonFive</span> </span>&#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomeThing</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;123321&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//枚举调用方式</span></span><br><span class=\"line\">SingletonFive.INSTANCE.doSomeThing();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>一般情况下，不建议使用第 1 种方式，建议使用第 2 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 4 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 5 种枚举方式。如果有其他特殊的需求，可以考虑使用第 3 种双检锁方式。</p>\n</blockquote>\n<h3 id=\"破坏单例模式的三种方式\"><a href=\"#破坏单例模式的三种方式\" class=\"headerlink\" title=\"破坏单例模式的三种方式\"></a>破坏单例模式的三种方式</h3><blockquote>\n<p>反射，克隆，序列化</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 破坏单例的两种方式</span></span><br><span class=\"line\"><span class=\"comment\"> * 1，反射</span></span><br><span class=\"line\"><span class=\"comment\"> * 2，克隆   需要单例实现Cloneable接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 3，序列化  需要单例实现Serializable接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------序列化------------------&quot;</span>);</span><br><span class=\"line\">        SingletonOne singleton = SingletonOne.getInstance();</span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\">        oos.writeObject(singleton);</span><br><span class=\"line\">        ByteArrayInputStream bis = <span class=\"keyword\">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class=\"line\">        ObjectInputStream ois =<span class=\"keyword\">new</span> ObjectInputStream(bis);</span><br><span class=\"line\">        SingletonOne serializeSingleton = (SingletonOne) ois.readObject();</span><br><span class=\"line\">        System.out.println(singleton == serializeSingleton);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------克隆------------------&quot;</span>);</span><br><span class=\"line\">        SingletonOne cloneSingleton = (SingletonOne) singleton.clone();</span><br><span class=\"line\">        System.out.println(singleton == cloneSingleton);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------反射------------------&quot;</span>);</span><br><span class=\"line\">        Constructor&lt;SingletonOne&gt; cons = SingletonOne.class.getDeclaredConstructor();</span><br><span class=\"line\">        cons.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//SingletonOne类中的成员变量为private,故必须进行此操作</span></span><br><span class=\"line\">        SingletonOne reflextSingleton = cons.newInstance();</span><br><span class=\"line\">        System.out.println(singleton == reflextSingleton);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---------------序列化------------------</span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\">---------------克隆------------------</span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\">---------------反射------------------</span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>这三种方式的规避方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonOne</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>, <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//防止反射</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> isCreate = <span class=\"keyword\">false</span>;<span class=\"comment\">//默认是第一次创建</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonOne instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonOne</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isCreate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;已创建过&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        isCreate = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonOne <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonOne();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//return super.clone();</span></span><br><span class=\"line\">        <span class=\"comment\">//防止克隆</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//防止序列化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---------------序列化------------------</span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\">---------------克隆------------------</span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\">---------------反射------------------</span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.reflect.InvocationTargetException</span><br><span class=\"line\">\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class=\"number\">62</span>)</span><br><span class=\"line\">\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class=\"number\">45</span>)</span><br><span class=\"line\">\tat java.lang.reflect.Constructor.newInstance(Constructor.java:<span class=\"number\">423</span>)</span><br><span class=\"line\">\tat test.singleton.SingletonDemo.main(SingletonDemo.java:<span class=\"number\">31</span>)</span><br><span class=\"line\">Caused by: java.lang.RuntimeException: 已创建过</span><br><span class=\"line\">\tat test.singleton.SingletonOne.&lt;init&gt;(SingletonOne.java:<span class=\"number\">16</span>)</span><br><span class=\"line\">\t... <span class=\"number\">5</span> more</span><br></pre></td></tr></table></figure>\n\n<p>这里我们简单说一下 为什么防止序列化要添加readResolve(),返回Object对象</p>\n<blockquote>\n<p>一般来说, 一个类实现了 Serializable接口, 我们就可以把它往内存地写再从内存里读出而”组装”成一个跟原来一模一样的对象.</p>\n<p>不过当序列化遇到单例时,这里边就有了个问题: 从内存读出而组装的对象破坏了单例的规则. 单例是要求一个JVM中只有一个类对象的, 而现在通过反序列化,一个新的对象克隆了出来,与以前序列化的对象不能equlas。</p>\n<p>如果被反序列化的对象的类存在readResolve这个方法，他会调用这个方法来返回一个“array”，然后浅拷贝一份，作为返回值，并且无视掉反序列化的值，即使那个字节码已经被解析。</p>\n</blockquote>\n"},{"title":"命令模式","date":"2020-11-04T02:44:34.000Z","_content":"\n# 命令模式\n\n> 命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。\n\n##### 示例演示：\n\n1. 我们创建一个people实体，并提供两个方法\n\n   ```java\n   package test.command;\n   \n   public class People {\n   \n       private Integer id = 1;\n       private String name = \"1\";\n   \n       public void add() {\n           System.out.println(\"add id: \" + id + \" name:\" + name);\n       }\n   \n       public void remove() {\n           System.out.println(\"remove id: \" + id + \" name:\" + name);\n       }\n   }\n   ```\n\n2. 新建一个order命令的接口\n\n   ```java\n   package test.command;\n   \n   public interface Order {\n       void execute();\n   }\n   ```\n\n3. 分别对people的add和remove方法创建order接口的实体类\n\n   ```java\n   package test.command;\n   \n   public class PeopleAdd implements Order {\n       private People people;\n   \n       public PeopleAdd(People people) {\n           this.people = people;\n       }\n   \n       @Override\n       public void execute() {\n           people.add();\n       }\n   }\n   ```\n\n   ```java\n   package test.command;\n   \n   public class PeopleRemove implements Order {\n       private People people;\n   \n       public PeopleRemove(People people) {\n           this.people = people;\n       }\n   \n       @Override\n       public void execute() {\n           people.remove();\n       }\n   }\n   ```\n\n4. 创建一个命令调用实体类\n\n   ```java\n   package test.command;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   public class Broker {\n       private List<Order> orders = new ArrayList<>();\n   \n       public void takeOrder(Order order) {\n           orders.add(order);\n       }\n   \n       public void placeOrders() {\n           for (Order order : orders) {\n               order.execute();\n           }\n           orders.clear();\n       }\n   }\n   ```\n\n5. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.command;\n   \n   public class CommandDemo {\n       public static void main(String[] args) {\n           People people = new People();\n           PeopleAdd peopleAdd = new PeopleAdd(people);\n           PeopleRemove peopleRemove = new PeopleRemove(people);\n   \n           Broker broker = new Broker();\n           broker.takeOrder(peopleAdd);\n           broker.takeOrder(peopleRemove);\n           broker.placeOrders();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   add id: 1name:1\n   remove id: 1name:1\n   ```\n\n##### 说明：\n\n>**优点：** 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。\n>\n>**缺点：**使用命令模式可能会导致某些系统有过多的具体命令类。","source":"_posts/命令模式.md","raw":"---\ntitle: 命令模式\ndate: 2020-11-04 10:44:34\ntags:\n- java\n- 设计模式\n---\n\n# 命令模式\n\n> 命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。\n\n##### 示例演示：\n\n1. 我们创建一个people实体，并提供两个方法\n\n   ```java\n   package test.command;\n   \n   public class People {\n   \n       private Integer id = 1;\n       private String name = \"1\";\n   \n       public void add() {\n           System.out.println(\"add id: \" + id + \" name:\" + name);\n       }\n   \n       public void remove() {\n           System.out.println(\"remove id: \" + id + \" name:\" + name);\n       }\n   }\n   ```\n\n2. 新建一个order命令的接口\n\n   ```java\n   package test.command;\n   \n   public interface Order {\n       void execute();\n   }\n   ```\n\n3. 分别对people的add和remove方法创建order接口的实体类\n\n   ```java\n   package test.command;\n   \n   public class PeopleAdd implements Order {\n       private People people;\n   \n       public PeopleAdd(People people) {\n           this.people = people;\n       }\n   \n       @Override\n       public void execute() {\n           people.add();\n       }\n   }\n   ```\n\n   ```java\n   package test.command;\n   \n   public class PeopleRemove implements Order {\n       private People people;\n   \n       public PeopleRemove(People people) {\n           this.people = people;\n       }\n   \n       @Override\n       public void execute() {\n           people.remove();\n       }\n   }\n   ```\n\n4. 创建一个命令调用实体类\n\n   ```java\n   package test.command;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   public class Broker {\n       private List<Order> orders = new ArrayList<>();\n   \n       public void takeOrder(Order order) {\n           orders.add(order);\n       }\n   \n       public void placeOrders() {\n           for (Order order : orders) {\n               order.execute();\n           }\n           orders.clear();\n       }\n   }\n   ```\n\n5. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.command;\n   \n   public class CommandDemo {\n       public static void main(String[] args) {\n           People people = new People();\n           PeopleAdd peopleAdd = new PeopleAdd(people);\n           PeopleRemove peopleRemove = new PeopleRemove(people);\n   \n           Broker broker = new Broker();\n           broker.takeOrder(peopleAdd);\n           broker.takeOrder(peopleRemove);\n           broker.placeOrders();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   add id: 1name:1\n   remove id: 1name:1\n   ```\n\n##### 说明：\n\n>**优点：** 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。\n>\n>**缺点：**使用命令模式可能会导致某些系统有过多的具体命令类。","slug":"命令模式","published":1,"updated":"2020-11-04T02:50:28.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wh000prcwoaghv53gt","content":"<h1 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h1><blockquote>\n<p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们创建一个people实体，并提供两个方法</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.command;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name = <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"add id: \"</span> + id + <span class=\"string\">\" name:\"</span> + name);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"remove id: \"</span> + id + <span class=\"string\">\" name:\"</span> + name);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>新建一个order命令的接口</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.command;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Order</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>分别对people的add和remove方法创建order接口的实体类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.command;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleAdd</span> <span class=\"keyword\">implements</span> <span class=\"title\">Order</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> People people;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleAdd</span><span class=\"params\">(People people)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.people = people;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        people.add();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.command;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleRemove</span> <span class=\"keyword\">implements</span> <span class=\"title\">Order</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> People people;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleRemove</span><span class=\"params\">(People people)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.people = people;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        people.remove();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建一个命令调用实体类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.command;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Broker</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Order&gt; orders = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">takeOrder</span><span class=\"params\">(Order order)</span> </span>{</span><br><span class=\"line\">        orders.add(order);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">placeOrders</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Order order : orders) {</span><br><span class=\"line\">            order.execute();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        orders.clear();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.command;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        People people = <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">        PeopleAdd peopleAdd = <span class=\"keyword\">new</span> PeopleAdd(people);</span><br><span class=\"line\">        PeopleRemove peopleRemove = <span class=\"keyword\">new</span> PeopleRemove(people);</span><br><span class=\"line\"></span><br><span class=\"line\">        Broker broker = <span class=\"keyword\">new</span> Broker();</span><br><span class=\"line\">        broker.takeOrder(peopleAdd);</span><br><span class=\"line\">        broker.takeOrder(peopleRemove);</span><br><span class=\"line\">        broker.placeOrders();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add id: <span class=\"number\">1</span>name:<span class=\"number\">1</span></span><br><span class=\"line\">remove id: <span class=\"number\">1</span>name:<span class=\"number\">1</span></span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。</p>\n<p><strong>缺点：</strong>使用命令模式可能会导致某些系统有过多的具体命令类。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h1><blockquote>\n<p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们创建一个people实体，并提供两个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.command;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name = <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;add id: &quot;</span> + id + <span class=\"string\">&quot; name:&quot;</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;remove id: &quot;</span> + id + <span class=\"string\">&quot; name:&quot;</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个order命令的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.command;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Order</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分别对people的add和remove方法创建order接口的实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.command;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleAdd</span> <span class=\"keyword\">implements</span> <span class=\"title\">Order</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> People people;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleAdd</span><span class=\"params\">(People people)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.people = people;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        people.add();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.command;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleRemove</span> <span class=\"keyword\">implements</span> <span class=\"title\">Order</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> People people;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleRemove</span><span class=\"params\">(People people)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.people = people;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        people.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个命令调用实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.command;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Broker</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Order&gt; orders = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">takeOrder</span><span class=\"params\">(Order order)</span> </span>&#123;</span><br><span class=\"line\">        orders.add(order);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">placeOrders</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Order order : orders) &#123;</span><br><span class=\"line\">            order.execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        orders.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.command;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        People people = <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">        PeopleAdd peopleAdd = <span class=\"keyword\">new</span> PeopleAdd(people);</span><br><span class=\"line\">        PeopleRemove peopleRemove = <span class=\"keyword\">new</span> PeopleRemove(people);</span><br><span class=\"line\"></span><br><span class=\"line\">        Broker broker = <span class=\"keyword\">new</span> Broker();</span><br><span class=\"line\">        broker.takeOrder(peopleAdd);</span><br><span class=\"line\">        broker.takeOrder(peopleRemove);</span><br><span class=\"line\">        broker.placeOrders();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add id: <span class=\"number\">1</span>name:<span class=\"number\">1</span></span><br><span class=\"line\">remove id: <span class=\"number\">1</span>name:<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。</p>\n<p><strong>缺点：</strong>使用命令模式可能会导致某些系统有过多的具体命令类。</p>\n</blockquote>\n"},{"title":"原型模式","date":"2020-11-02T12:08:20.000Z","_content":"\n## 原型模式\n\n>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n>\n>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。\n\n##### 示例演示：\n\n1. 创建一个抽象类，实现Cloneable接口，提供一个抽象方法，重写Object的clone方法\n\n   ```java\n   package test.prototype;\n   \n   import lombok.Data;\n   \n   @Data\n   public abstract class People implements Cloneable {\n   \n       private Integer id;\n   \n       protected String type;\n   \n       abstract void say();\n   \n       public Object clone() {\n           Object clone = null;\n           try {\n               clone = super.clone();\n           } catch (CloneNotSupportedException e) {\n               e.printStackTrace();\n           }\n           return clone;\n       }\n   }\n   ```\n\n2. 创建两个people实体类\n\n   ```java\n   package test.prototype;\n   \n   public class PeopleOne extends People{\n       public PeopleOne(){\n           type=\"peopleone\";\n       }\n   \n       @Override\n       public void say() {\n           System.out.println(\"my name is peopleone\");\n       }\n   }\n   ```\n\n   ```java\n   package test.prototype;\n   \n   public class PeopleTwo extends People{\n       public PeopleTwo(){\n           type=\"peopletwo\";\n       }\n   \n       @Override\n       public void say() {\n           System.out.println(\"my name is peopletwo\");\n       }\n   }\n   ```\n\n3. 创建一个存放原型对象的注册表，提供一个获取新实例的方法，用来复制原型，默认初始化两个实例\n\n   ```java\n   package test.prototype;\n   \n   import java.util.Hashtable;\n   \n   public class PeopleCache {\n       private static Hashtable<Integer, People> peopleMap = new Hashtable<>();\n   \n       public static People getPeople(Integer id) {\n           People people = peopleMap.get(id);\n           //复制一个新的实例，属于浅拷贝\n           return (People) people.clone();\n       }\n   \n       public static void loadCache() {\n           PeopleOne peopleOne = new PeopleOne();\n           peopleOne.setId(1);\n           peopleMap.put(peopleOne.getId(), peopleOne);\n   \n           PeopleTwo peopleTwo = new PeopleTwo();\n           peopleTwo.setId(2);\n           peopleMap.put(peopleTwo.getId(), peopleTwo);\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.prototype;\n   \n   public class PrototypeDemo {\n       public static void main(String[] args) {\n           PeopleCache.loadCache();\n           People peopleOne = PeopleCache.getPeople(1);\n           System.out.println(peopleOne.type);\n           peopleOne.say();\n   \n           People peopleTwo = PeopleCache.getPeople(2);\n           System.out.println(peopleTwo.type);\n           peopleTwo.say();\n       }\n   }\n   ```\n\n   新生成的两个实例就是通过原型clone出来的\n\n   运行结果：\n\n   ```java\n   peopleone\n   my name is peopleone\n   peopletwo\n   my name is peopletwo\n   ```\n\n   ##### 说明：\n\n   >**优点：** 1、性能提高。 2、逃避构造函数的约束。\n   >\n   >**缺点：** 1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。","source":"_posts/原型模式.md","raw":"---\ntitle: 原型模式\ndate: 2020-11-02 20:08:20\ntags:\n- java\n- 设计模式\n---\n\n## 原型模式\n\n>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n>\n>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。\n\n##### 示例演示：\n\n1. 创建一个抽象类，实现Cloneable接口，提供一个抽象方法，重写Object的clone方法\n\n   ```java\n   package test.prototype;\n   \n   import lombok.Data;\n   \n   @Data\n   public abstract class People implements Cloneable {\n   \n       private Integer id;\n   \n       protected String type;\n   \n       abstract void say();\n   \n       public Object clone() {\n           Object clone = null;\n           try {\n               clone = super.clone();\n           } catch (CloneNotSupportedException e) {\n               e.printStackTrace();\n           }\n           return clone;\n       }\n   }\n   ```\n\n2. 创建两个people实体类\n\n   ```java\n   package test.prototype;\n   \n   public class PeopleOne extends People{\n       public PeopleOne(){\n           type=\"peopleone\";\n       }\n   \n       @Override\n       public void say() {\n           System.out.println(\"my name is peopleone\");\n       }\n   }\n   ```\n\n   ```java\n   package test.prototype;\n   \n   public class PeopleTwo extends People{\n       public PeopleTwo(){\n           type=\"peopletwo\";\n       }\n   \n       @Override\n       public void say() {\n           System.out.println(\"my name is peopletwo\");\n       }\n   }\n   ```\n\n3. 创建一个存放原型对象的注册表，提供一个获取新实例的方法，用来复制原型，默认初始化两个实例\n\n   ```java\n   package test.prototype;\n   \n   import java.util.Hashtable;\n   \n   public class PeopleCache {\n       private static Hashtable<Integer, People> peopleMap = new Hashtable<>();\n   \n       public static People getPeople(Integer id) {\n           People people = peopleMap.get(id);\n           //复制一个新的实例，属于浅拷贝\n           return (People) people.clone();\n       }\n   \n       public static void loadCache() {\n           PeopleOne peopleOne = new PeopleOne();\n           peopleOne.setId(1);\n           peopleMap.put(peopleOne.getId(), peopleOne);\n   \n           PeopleTwo peopleTwo = new PeopleTwo();\n           peopleTwo.setId(2);\n           peopleMap.put(peopleTwo.getId(), peopleTwo);\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.prototype;\n   \n   public class PrototypeDemo {\n       public static void main(String[] args) {\n           PeopleCache.loadCache();\n           People peopleOne = PeopleCache.getPeople(1);\n           System.out.println(peopleOne.type);\n           peopleOne.say();\n   \n           People peopleTwo = PeopleCache.getPeople(2);\n           System.out.println(peopleTwo.type);\n           peopleTwo.say();\n       }\n   }\n   ```\n\n   新生成的两个实例就是通过原型clone出来的\n\n   运行结果：\n\n   ```java\n   peopleone\n   my name is peopleone\n   peopletwo\n   my name is peopletwo\n   ```\n\n   ##### 说明：\n\n   >**优点：** 1、性能提高。 2、逃避构造函数的约束。\n   >\n   >**缺点：** 1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。","slug":"原型模式","published":1,"updated":"2020-11-03T02:05:57.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wi000srcwodznmebot","content":"<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><blockquote>\n<p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>创建一个抽象类，实现Cloneable接口，提供一个抽象方法，重写Object的clone方法</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        Object clone = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> {</span><br><span class=\"line\">            clone = <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        } <span class=\"keyword\">catch</span> (CloneNotSupportedException e) {</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clone;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建两个people实体类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span></span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleOne</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">        type=<span class=\"string\">\"peopleone\"</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"my name is peopleone\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleTwo</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span></span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleTwo</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">        type=<span class=\"string\">\"peopletwo\"</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"my name is peopletwo\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建一个存放原型对象的注册表，提供一个获取新实例的方法，用来复制原型，默认初始化两个实例</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleCache</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Hashtable&lt;Integer, People&gt; peopleMap = <span class=\"keyword\">new</span> Hashtable&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> People <span class=\"title\">getPeople</span><span class=\"params\">(Integer id)</span> </span>{</span><br><span class=\"line\">        People people = peopleMap.get(id);</span><br><span class=\"line\">        <span class=\"comment\">//复制一个新的实例，属于浅拷贝</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (People) people.clone();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loadCache</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        PeopleOne peopleOne = <span class=\"keyword\">new</span> PeopleOne();</span><br><span class=\"line\">        peopleOne.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">        peopleMap.put(peopleOne.getId(), peopleOne);</span><br><span class=\"line\"></span><br><span class=\"line\">        PeopleTwo peopleTwo = <span class=\"keyword\">new</span> PeopleTwo();</span><br><span class=\"line\">        peopleTwo.setId(<span class=\"number\">2</span>);</span><br><span class=\"line\">        peopleMap.put(peopleTwo.getId(), peopleTwo);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrototypeDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        PeopleCache.loadCache();</span><br><span class=\"line\">        People peopleOne = PeopleCache.getPeople(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(peopleOne.type);</span><br><span class=\"line\">        peopleOne.say();</span><br><span class=\"line\"></span><br><span class=\"line\">        People peopleTwo = PeopleCache.getPeople(<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(peopleTwo.type);</span><br><span class=\"line\">        peopleTwo.say();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>新生成的两个实例就是通过原型clone出来的</p>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">peopleone</span><br><span class=\"line\">my name is peopleone</span><br><span class=\"line\">peopletwo</span><br><span class=\"line\">my name is peopletwo</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、性能提高。 2、逃避构造函数的约束。</p>\n<p><strong>缺点：</strong> 1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><blockquote>\n<p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>创建一个抽象类，实现Cloneable接口，提供一个抽象方法，重写Object的clone方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object clone = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            clone = <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clone;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建两个people实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleOne</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        type=<span class=\"string\">&quot;peopleone&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;my name is peopleone&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleTwo</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleTwo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        type=<span class=\"string\">&quot;peopletwo&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;my name is peopletwo&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个存放原型对象的注册表，提供一个获取新实例的方法，用来复制原型，默认初始化两个实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleCache</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Hashtable&lt;Integer, People&gt; peopleMap = <span class=\"keyword\">new</span> Hashtable&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> People <span class=\"title\">getPeople</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        People people = peopleMap.get(id);</span><br><span class=\"line\">        <span class=\"comment\">//复制一个新的实例，属于浅拷贝</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (People) people.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loadCache</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        PeopleOne peopleOne = <span class=\"keyword\">new</span> PeopleOne();</span><br><span class=\"line\">        peopleOne.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">        peopleMap.put(peopleOne.getId(), peopleOne);</span><br><span class=\"line\"></span><br><span class=\"line\">        PeopleTwo peopleTwo = <span class=\"keyword\">new</span> PeopleTwo();</span><br><span class=\"line\">        peopleTwo.setId(<span class=\"number\">2</span>);</span><br><span class=\"line\">        peopleMap.put(peopleTwo.getId(), peopleTwo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrototypeDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        PeopleCache.loadCache();</span><br><span class=\"line\">        People peopleOne = PeopleCache.getPeople(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(peopleOne.type);</span><br><span class=\"line\">        peopleOne.say();</span><br><span class=\"line\"></span><br><span class=\"line\">        People peopleTwo = PeopleCache.getPeople(<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(peopleTwo.type);</span><br><span class=\"line\">        peopleTwo.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新生成的两个实例就是通过原型clone出来的</p>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">peopleone</span><br><span class=\"line\">my name is peopleone</span><br><span class=\"line\">peopletwo</span><br><span class=\"line\">my name is peopletwo</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、性能提高。 2、逃避构造函数的约束。</p>\n<p><strong>缺点：</strong> 1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"外观模式","date":"2020-11-03T08:51:06.000Z","_content":"\n# 外观模式\n\n>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。\n>\n>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。\n\n##### 示例演示：\n\n1. 创建一个people实体和一个animal实体\n\n   ```java\n   package test.facade;\n   \n   public class People {\n       public void say() {\n           System.out.println(\"my name is people\");\n       }\n   }\n   ```\n\n   ```java\n   package test.facade;\n   \n   public class Animal {\n       public void say() {\n           System.out.println(\"my name is animal\");\n       }\n   }\n   ```\n\n2. 创建一个组合\n\n   ```java\n   package test.facade;\n   \n   public class Facade {\n       private People people;\n       private Animal animal;\n   \n       public Facade() {\n           people = new People();\n           animal = new Animal();\n       }\n   \n       public void peopleSay() {\n           people.say();\n       }\n   \n       public void animalSay() {\n           animal.say();\n       }\n   }\n   ```\n\n3. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.facade;\n   \n   public class FacadeDemo {\n       public static void main(String[] args) {\n           Facade facade = new Facade();\n           facade.peopleSay();\n           facade.animalSay();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   my name is people\n   my name is animal\n   ```\n\n##### 说明：\n\n>上诉示例达到的效果就是我们说的开局一人一狗，默认绑定\n>\n>**优点：** 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。\n>\n>**缺点：**不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。","source":"_posts/外观模式.md","raw":"---\ntitle: 外观模式\ndate: 2020-11-03 16:51:06\ntags:\n- java\n- 设计模式\n---\n\n# 外观模式\n\n>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。\n>\n>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。\n\n##### 示例演示：\n\n1. 创建一个people实体和一个animal实体\n\n   ```java\n   package test.facade;\n   \n   public class People {\n       public void say() {\n           System.out.println(\"my name is people\");\n       }\n   }\n   ```\n\n   ```java\n   package test.facade;\n   \n   public class Animal {\n       public void say() {\n           System.out.println(\"my name is animal\");\n       }\n   }\n   ```\n\n2. 创建一个组合\n\n   ```java\n   package test.facade;\n   \n   public class Facade {\n       private People people;\n       private Animal animal;\n   \n       public Facade() {\n           people = new People();\n           animal = new Animal();\n       }\n   \n       public void peopleSay() {\n           people.say();\n       }\n   \n       public void animalSay() {\n           animal.say();\n       }\n   }\n   ```\n\n3. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.facade;\n   \n   public class FacadeDemo {\n       public static void main(String[] args) {\n           Facade facade = new Facade();\n           facade.peopleSay();\n           facade.animalSay();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   my name is people\n   my name is animal\n   ```\n\n##### 说明：\n\n>上诉示例达到的效果就是我们说的开局一人一狗，默认绑定\n>\n>**优点：** 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。\n>\n>**缺点：**不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。","slug":"外观模式","published":1,"updated":"2020-11-03T09:03:07.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wi000urcwo1srb51as","content":"<h1 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h1><blockquote>\n<p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。</p>\n<p>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>创建一个people实体和一个animal实体</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.facade;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"my name is people\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.facade;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"my name is animal\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建一个组合</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.facade;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Facade</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> People people;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Animal animal;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Facade</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        people = <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">        animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">peopleSay</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        people.say();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">animalSay</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        animal.say();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.facade;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FacadeDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        Facade facade = <span class=\"keyword\">new</span> Facade();</span><br><span class=\"line\">        facade.peopleSay();</span><br><span class=\"line\">        facade.animalSay();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my name is people</span><br><span class=\"line\">my name is animal</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>上诉示例达到的效果就是我们说的开局一人一狗，默认绑定</p>\n<p><strong>优点：</strong> 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。</p>\n<p><strong>缺点：</strong>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h1><blockquote>\n<p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。</p>\n<p>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>创建一个people实体和一个animal实体</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.facade;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;my name is people&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.facade;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;my name is animal&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个组合</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.facade;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Facade</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> People people;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Animal animal;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Facade</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        people = <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">        animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">peopleSay</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        people.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">animalSay</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        animal.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.facade;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FacadeDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Facade facade = <span class=\"keyword\">new</span> Facade();</span><br><span class=\"line\">        facade.peopleSay();</span><br><span class=\"line\">        facade.animalSay();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my name is people</span><br><span class=\"line\">my name is animal</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>上诉示例达到的效果就是我们说的开局一人一狗，默认绑定</p>\n<p><strong>优点：</strong> 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。</p>\n<p><strong>缺点：</strong>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p>\n</blockquote>\n"},{"title":"备忘录模式","date":"2020-11-05T05:58:05.000Z","_content":"\n# 备忘录模式\n\n>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。\n>\n>比如：Windows 里的 ctrl + z；浏览器的后退；\t数据库的事务管理等\n\n##### 示例演示：\n\n1. 我们创建三个类，一个people类，包含一个status状态的字段，一个存储people状态的类，一个获取people状态的类\n\n   ```java\n   package test.memento;\n   \n   import lombok.Data;\n   \n   @Data\n   public class People {\n       private String status;\n   \n       public People(String status) {\n           this.status = status;\n       }\n   }\n   ```\n\n   ```java\n   package test.memento;\n   \n   import lombok.Data;\n   \n   @Data\n   public class PeopleStatusSave {\n       private String status;\n   \n       public People saveStatus() {\n           return new People(status);\n       }\n   \n       public void getStatus(People people) {\n           status = people.getStatus();\n       }\n   }\n   ```\n\n   ```java\n   package test.memento;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   public class PeopleRecover {\n       private List<People> peopleList = new ArrayList<>();\n   \n       public void add(People people) {\n           peopleList.add(people);\n       }\n   \n       public People get(int index) {\n           return peopleList.get(index);\n       }\n   \n   }\n   ```\n\n2. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.memento;\n   \n   public class MementoDemo {\n       public static void main(String[] args) {\n           PeopleStatusSave peopleStatus = new PeopleStatusSave();\n           PeopleRecover peopleRecover = new PeopleRecover();\n   \n           peopleStatus.setStatus(\"11111\");\n           peopleRecover.add(peopleStatus.saveStatus());\n   \n           peopleStatus.setStatus(\"22222\");\n           peopleRecover.add(peopleStatus.saveStatus());\n   \n           peopleStatus.setStatus(\"33333\");\n           peopleRecover.add(peopleStatus.saveStatus());\n   \n           peopleStatus.setStatus(\"44444\");\n           peopleRecover.add(peopleStatus.saveStatus());\n   \n           System.out.println(\"current: \" + peopleStatus.getStatus());\n   \n           peopleStatus.getStatus(peopleRecover.get(0));\n           System.out.println(\"first: \"+ peopleStatus.getStatus());\n   \n           peopleStatus.getStatus(peopleRecover.get(1));\n           System.out.println(\"second: \"+ peopleStatus.getStatus());\n   \n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   current: 44444\n   first: 11111\n   second: 22222\n   ```\n\n\n##### 说明：\n\n>**优点：** 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。\n>\n>**缺点：**消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。","source":"_posts/备忘录模式.md","raw":"---\ntitle: 备忘录模式\ndate: 2020-11-05 13:58:05\ntags:\n- java\n- 设计模式\n---\n\n# 备忘录模式\n\n>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。\n>\n>比如：Windows 里的 ctrl + z；浏览器的后退；\t数据库的事务管理等\n\n##### 示例演示：\n\n1. 我们创建三个类，一个people类，包含一个status状态的字段，一个存储people状态的类，一个获取people状态的类\n\n   ```java\n   package test.memento;\n   \n   import lombok.Data;\n   \n   @Data\n   public class People {\n       private String status;\n   \n       public People(String status) {\n           this.status = status;\n       }\n   }\n   ```\n\n   ```java\n   package test.memento;\n   \n   import lombok.Data;\n   \n   @Data\n   public class PeopleStatusSave {\n       private String status;\n   \n       public People saveStatus() {\n           return new People(status);\n       }\n   \n       public void getStatus(People people) {\n           status = people.getStatus();\n       }\n   }\n   ```\n\n   ```java\n   package test.memento;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   public class PeopleRecover {\n       private List<People> peopleList = new ArrayList<>();\n   \n       public void add(People people) {\n           peopleList.add(people);\n       }\n   \n       public People get(int index) {\n           return peopleList.get(index);\n       }\n   \n   }\n   ```\n\n2. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.memento;\n   \n   public class MementoDemo {\n       public static void main(String[] args) {\n           PeopleStatusSave peopleStatus = new PeopleStatusSave();\n           PeopleRecover peopleRecover = new PeopleRecover();\n   \n           peopleStatus.setStatus(\"11111\");\n           peopleRecover.add(peopleStatus.saveStatus());\n   \n           peopleStatus.setStatus(\"22222\");\n           peopleRecover.add(peopleStatus.saveStatus());\n   \n           peopleStatus.setStatus(\"33333\");\n           peopleRecover.add(peopleStatus.saveStatus());\n   \n           peopleStatus.setStatus(\"44444\");\n           peopleRecover.add(peopleStatus.saveStatus());\n   \n           System.out.println(\"current: \" + peopleStatus.getStatus());\n   \n           peopleStatus.getStatus(peopleRecover.get(0));\n           System.out.println(\"first: \"+ peopleStatus.getStatus());\n   \n           peopleStatus.getStatus(peopleRecover.get(1));\n           System.out.println(\"second: \"+ peopleStatus.getStatus());\n   \n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   current: 44444\n   first: 11111\n   second: 22222\n   ```\n\n\n##### 说明：\n\n>**优点：** 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。\n>\n>**缺点：**消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。","slug":"备忘录模式","published":1,"updated":"2020-11-05T06:02:45.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wj000xrcwoeei7bg5k","content":"<h1 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h1><blockquote>\n<p>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。</p>\n<p>比如：Windows 里的 ctrl + z；浏览器的后退；    数据库的事务管理等</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们创建三个类，一个people类，包含一个status状态的字段，一个存储people状态的类，一个获取people状态的类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.memento;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String status;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">(String status)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = status;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.memento;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleStatusSave</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String status;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> People <span class=\"title\">saveStatus</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> People(status);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getStatus</span><span class=\"params\">(People people)</span> </span>{</span><br><span class=\"line\">        status = people.getStatus();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.memento;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleRecover</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;People&gt; peopleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(People people)</span> </span>{</span><br><span class=\"line\">        peopleList.add(people);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> People <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> peopleList.get(index);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.memento;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MementoDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        PeopleStatusSave peopleStatus = <span class=\"keyword\">new</span> PeopleStatusSave();</span><br><span class=\"line\">        PeopleRecover peopleRecover = <span class=\"keyword\">new</span> PeopleRecover();</span><br><span class=\"line\"></span><br><span class=\"line\">        peopleStatus.setStatus(<span class=\"string\">\"11111\"</span>);</span><br><span class=\"line\">        peopleRecover.add(peopleStatus.saveStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">        peopleStatus.setStatus(<span class=\"string\">\"22222\"</span>);</span><br><span class=\"line\">        peopleRecover.add(peopleStatus.saveStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">        peopleStatus.setStatus(<span class=\"string\">\"33333\"</span>);</span><br><span class=\"line\">        peopleRecover.add(peopleStatus.saveStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">        peopleStatus.setStatus(<span class=\"string\">\"44444\"</span>);</span><br><span class=\"line\">        peopleRecover.add(peopleStatus.saveStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"current: \"</span> + peopleStatus.getStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">        peopleStatus.getStatus(peopleRecover.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"first: \"</span>+ peopleStatus.getStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">        peopleStatus.getStatus(peopleRecover.get(<span class=\"number\">1</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"second: \"</span>+ peopleStatus.getStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current: <span class=\"number\">44444</span></span><br><span class=\"line\">first: <span class=\"number\">11111</span></span><br><span class=\"line\">second: <span class=\"number\">22222</span></span><br></pre></td></tr></tbody></table></figure>\n\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。</p>\n<p><strong>缺点：</strong>消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h1><blockquote>\n<p>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。</p>\n<p>比如：Windows 里的 ctrl + z；浏览器的后退；    数据库的事务管理等</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们创建三个类，一个people类，包含一个status状态的字段，一个存储people状态的类，一个获取people状态的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.memento;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String status;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">(String status)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.memento;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleStatusSave</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String status;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> People <span class=\"title\">saveStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> People(status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getStatus</span><span class=\"params\">(People people)</span> </span>&#123;</span><br><span class=\"line\">        status = people.getStatus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.memento;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleRecover</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;People&gt; peopleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(People people)</span> </span>&#123;</span><br><span class=\"line\">        peopleList.add(people);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> People <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> peopleList.get(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.memento;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MementoDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        PeopleStatusSave peopleStatus = <span class=\"keyword\">new</span> PeopleStatusSave();</span><br><span class=\"line\">        PeopleRecover peopleRecover = <span class=\"keyword\">new</span> PeopleRecover();</span><br><span class=\"line\"></span><br><span class=\"line\">        peopleStatus.setStatus(<span class=\"string\">&quot;11111&quot;</span>);</span><br><span class=\"line\">        peopleRecover.add(peopleStatus.saveStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">        peopleStatus.setStatus(<span class=\"string\">&quot;22222&quot;</span>);</span><br><span class=\"line\">        peopleRecover.add(peopleStatus.saveStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">        peopleStatus.setStatus(<span class=\"string\">&quot;33333&quot;</span>);</span><br><span class=\"line\">        peopleRecover.add(peopleStatus.saveStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">        peopleStatus.setStatus(<span class=\"string\">&quot;44444&quot;</span>);</span><br><span class=\"line\">        peopleRecover.add(peopleStatus.saveStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;current: &quot;</span> + peopleStatus.getStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">        peopleStatus.getStatus(peopleRecover.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;first: &quot;</span>+ peopleStatus.getStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">        peopleStatus.getStatus(peopleRecover.get(<span class=\"number\">1</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;second: &quot;</span>+ peopleStatus.getStatus());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current: <span class=\"number\">44444</span></span><br><span class=\"line\">first: <span class=\"number\">11111</span></span><br><span class=\"line\">second: <span class=\"number\">22222</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。</p>\n<p><strong>缺点：</strong>消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</p>\n</blockquote>\n"},{"title":"工厂模式","date":"2020-10-31T08:26:13.000Z","_content":"\n# 工厂模式\n\n>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n>\n>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。\n\n##### 示例演示：\n\n1. 我们定义一个生物接口，生物接口中有一个说话的功能。\n\n   ```java\n   package test.factory;\n   \n   /**\n    * 所有生物的标识\n    */\n   public interface Organism {\n       //所有生物共有的一个功能，有自己的沟通方式\n       void say();\n   }\n   ```\n\n2. 创建两个实体类，让其拥有Organism的属性\n\n   ```java\n   package test.factory;\n   \n   public class People implements Organism {\n   \n       @Override\n       public void say() {\n           System.out.println(\"people say\");\n       }\n   }\n   ```\n\n   ```java\n   package test.factory;\n   \n   public class Animal implements Organism {\n   \n       @Override\n       public void say() {\n           System.out.println(\"animal say\");\n       }\n   }\n   ```\n\n3. 创建产生对象的工厂\n\n   ```java\n   package test.factory;\n   \n   import org.apache.commons.lang3.StringUtils;\n   \n   public class OrganismFactory {\n   \n       public Organism getOrganism(String type) {\n           if (StringUtils.isBlank(type)) {\n               return null;\n           }\n           if (type.equalsIgnoreCase(\"people\")) {\n               return new People();\n           } else if (type.equalsIgnoreCase(\"animal\")) {\n               return new Animal();\n           }\n           return null;\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.factory;\n   \n   public class FactoryDemo {\n       public static void main(String[] args) {\n           OrganismFactory organismFactory = new OrganismFactory();\n           Organism o1 = organismFactory.getOrganism(\"people\");\n           o1.say();\n           Organism o2 = organismFactory.getOrganism(\"animal\");\n           o2.say();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   people say\n   animal say\n   ```\n\n##### 说明：\n\n> **优点**：1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。\n>\n> **缺点**：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。","source":"_posts/工厂模式.md","raw":"---\ntitle: 工厂模式\ndate: 2020-10-31 16:26:13\ntags:\n- java\n- 设计模式\n---\n\n# 工厂模式\n\n>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n>\n>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。\n\n##### 示例演示：\n\n1. 我们定义一个生物接口，生物接口中有一个说话的功能。\n\n   ```java\n   package test.factory;\n   \n   /**\n    * 所有生物的标识\n    */\n   public interface Organism {\n       //所有生物共有的一个功能，有自己的沟通方式\n       void say();\n   }\n   ```\n\n2. 创建两个实体类，让其拥有Organism的属性\n\n   ```java\n   package test.factory;\n   \n   public class People implements Organism {\n   \n       @Override\n       public void say() {\n           System.out.println(\"people say\");\n       }\n   }\n   ```\n\n   ```java\n   package test.factory;\n   \n   public class Animal implements Organism {\n   \n       @Override\n       public void say() {\n           System.out.println(\"animal say\");\n       }\n   }\n   ```\n\n3. 创建产生对象的工厂\n\n   ```java\n   package test.factory;\n   \n   import org.apache.commons.lang3.StringUtils;\n   \n   public class OrganismFactory {\n   \n       public Organism getOrganism(String type) {\n           if (StringUtils.isBlank(type)) {\n               return null;\n           }\n           if (type.equalsIgnoreCase(\"people\")) {\n               return new People();\n           } else if (type.equalsIgnoreCase(\"animal\")) {\n               return new Animal();\n           }\n           return null;\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.factory;\n   \n   public class FactoryDemo {\n       public static void main(String[] args) {\n           OrganismFactory organismFactory = new OrganismFactory();\n           Organism o1 = organismFactory.getOrganism(\"people\");\n           o1.say();\n           Organism o2 = organismFactory.getOrganism(\"animal\");\n           o2.say();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   people say\n   animal say\n   ```\n\n##### 说明：\n\n> **优点**：1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。\n>\n> **缺点**：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。","slug":"工厂模式","published":1,"updated":"2020-11-03T02:05:57.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wk0010rcwob8bl25xr","content":"<h1 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h1><blockquote>\n<p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们定义一个生物接口，生物接口中有一个说话的功能。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有生物的标识</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Organism</span> </span>{</span><br><span class=\"line\">    <span class=\"comment\">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建两个实体类，让其拥有Organism的属性</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"people say\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"animal say\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建产生对象的工厂</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrganismFactory</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Organism <span class=\"title\">getOrganism</span><span class=\"params\">(String type)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(type)) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"people\"</span>)) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"animal\"</span>)) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        OrganismFactory organismFactory = <span class=\"keyword\">new</span> OrganismFactory();</span><br><span class=\"line\">        Organism o1 = organismFactory.getOrganism(<span class=\"string\">\"people\"</span>);</span><br><span class=\"line\">        o1.say();</span><br><span class=\"line\">        Organism o2 = organismFactory.getOrganism(<span class=\"string\">\"animal\"</span>);</span><br><span class=\"line\">        o2.say();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">people say</span><br><span class=\"line\">animal say</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点</strong>：1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。</p>\n<p><strong>缺点</strong>：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h1><blockquote>\n<p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们定义一个生物接口，生物接口中有一个说话的功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有生物的标识</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Organism</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建两个实体类，让其拥有Organism的属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;people say&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;animal say&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建产生对象的工厂</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrganismFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Organism <span class=\"title\">getOrganism</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;people&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;animal&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        OrganismFactory organismFactory = <span class=\"keyword\">new</span> OrganismFactory();</span><br><span class=\"line\">        Organism o1 = organismFactory.getOrganism(<span class=\"string\">&quot;people&quot;</span>);</span><br><span class=\"line\">        o1.say();</span><br><span class=\"line\">        Organism o2 = organismFactory.getOrganism(<span class=\"string\">&quot;animal&quot;</span>);</span><br><span class=\"line\">        o2.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">people say</span><br><span class=\"line\">animal say</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点</strong>：1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。</p>\n<p><strong>缺点</strong>：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>\n</blockquote>\n"},{"title":"建造者模式","date":"2020-11-02T06:16:55.000Z","_content":"\n# 建造者模式\n\n>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n>\n>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。\n>\n>StringBuilder就是典型的建造者模式\n\n##### 示例演示：\n\n1. 这次我们的类会变的复杂一些，我们还是老规矩，先创建一个Organism接口\n\n   ```java\n   package test.builder;\n   \n   /**\n    * 所有生物的标识\n    */\n   public interface Organism {\n       //所有生物共有的一个功能，有自己的沟通方式\n       String say();\n   }\n   ```\n\n2. 我们先不创建people和animal，我们先创建一个条目，让这个条目来融合Organism，同时我们新增两个属性\n\n   ```java\n   package test.builder;\n   \n   public abstract class PeopleItem implements Item {\n       @Override\n       public Organism organism() {\n           return new People();\n       }\n   \n       @Override\n       public abstract String name();\n   \n       @Override\n       public abstract Integer Height();\n   }\n   ```\n\n   ```java\n   package test.builder;\n   \n   public abstract class AnimalItem implements Item {\n       @Override\n       public Organism organism() {\n           return new Animal();\n       }\n   \n       @Override\n       public abstract String name();\n   \n       @Override\n       public abstract Integer Height();\n   }\n   ```\n\n3. 两个抽象的条目创建好了，我们只实现其中的Organism，名字和身高，我们让具体类去实现，我们创建两个人，两个动物分别实现名字和身高。\n\n   ```java\n   package test.builder;\n   \n   public class PeopleItemOne extends PeopleItem {\n   \n       @Override\n       public String name() {\n           return \"my name is peopleOne\";\n       }\n   \n       @Override\n       public Integer Height() {\n           return 100;\n       }\n   }\n   ```\n\n   ```java\n   package test.builder;\n   \n   public class PeopleItemTwo extends PeopleItem {\n   \n       @Override\n       public String name() {\n           return \"my name is peopleTwo\";\n       }\n   \n       @Override\n       public Integer Height() {\n           return 200;\n       }\n   }\n   ```\n\n   ```java\n   package test.builder;\n   \n   public class AnimalItemOne extends AnimalItem {\n       @Override\n       public String name() {\n           return \"my name is animalOne\";\n       }\n   \n       @Override\n       public Integer Height() {\n           return 50;\n       }\n   }\n   ```\n\n   ```java\n   package test.builder;\n   \n   public class AnimalItemTwo extends AnimalItem {\n       @Override\n       public String name() {\n           return \"my name is animalTwo\";\n       }\n   \n       @Override\n       public Integer Height() {\n           return 100;\n       }\n   }\n   ```\n\n4. 我们创建一个家庭成员的类，让他帮我们归纳一下哪些人，哪些动物属于哪个家庭，做一下统计\n\n   ```java\n   package test.builder;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   public class Family {\n       private List<Item> items = new ArrayList<>();\n   \n       public void addItem(Item item) {\n           items.add(item);\n       }\n   \n       public Integer getHeight() {\n           Integer height = 0;\n           for (Item item : items) {\n               height += item.Height();\n           }\n           return height;\n       }\n   \n       public void showItems() {\n           for (Item item : items) {\n               System.out.println(\"Item: \" + item.name());\n               System.out.println(\"say：\" + item.organism().say());\n               System.out.println(\"height：\" + item.Height());\n           }\n       }\n   }\n   ```\n\n5. 方便起见，我们创建两个家庭，分别设置一些成员\n\n   ```java\n   package test.builder;\n   \n   public class FamilyBuilder {\n   \n       public Family familyOne() {\n           Family family = new Family();\n           family.addItem(new PeopleItemOne());\n           family.addItem(new PeopleItemTwo());\n           family.addItem(new AnimalItemOne());\n           return family;\n       }\n   \n       public Family familyTwo() {\n           Family family = new Family();\n           family.addItem(new PeopleItemTwo());\n           family.addItem(new AnimalItemTwo());\n           return family;\n       }\n   }\n   ```\n\n6. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.builder;\n   \n   public class BuilderDemo {\n       public static void main(String[] args) {\n           FamilyBuilder familyBuilder = new FamilyBuilder();\n           Family familyOne = familyBuilder.familyOne();\n           familyOne.showItems();\n           System.out.println(\"身高和：\" + familyOne.getHeight());\n           System.out.println(\"---------------------------------\");\n           Family familyTwo = familyBuilder.familyTwo();\n           familyTwo.showItems();\n           familyTwo.getHeight();\n           System.out.println(\"身高和：\" + familyTwo.getHeight());\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   Item: my name is peopleOne\n   say：people say\n   height：100\n   Item: my name is peopleTwo\n   say：people say\n   height：200\n   Item: my name is animalOne\n   say：animal say\n   height：50\n   身高和：350\n   ---------------------------------\n   Item: my name is peopleTwo\n   say：people say\n   height：200\n   Item: my name is animalTwo\n   say：animal say\n   height：100\n   身高和：300\n   ```\n\n   ##### 说明：\n\n   >**优点：**1、建造者独立，易扩展。 2、便于控制细节风险。\n   >\n   >**缺点：** 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。","source":"_posts/建造者模式.md","raw":"---\ntitle: 建造者模式\ndate: 2020-11-02 14:16:55\ntags:\n- java\n- 设计模式\n---\n\n# 建造者模式\n\n>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n>\n>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。\n>\n>StringBuilder就是典型的建造者模式\n\n##### 示例演示：\n\n1. 这次我们的类会变的复杂一些，我们还是老规矩，先创建一个Organism接口\n\n   ```java\n   package test.builder;\n   \n   /**\n    * 所有生物的标识\n    */\n   public interface Organism {\n       //所有生物共有的一个功能，有自己的沟通方式\n       String say();\n   }\n   ```\n\n2. 我们先不创建people和animal，我们先创建一个条目，让这个条目来融合Organism，同时我们新增两个属性\n\n   ```java\n   package test.builder;\n   \n   public abstract class PeopleItem implements Item {\n       @Override\n       public Organism organism() {\n           return new People();\n       }\n   \n       @Override\n       public abstract String name();\n   \n       @Override\n       public abstract Integer Height();\n   }\n   ```\n\n   ```java\n   package test.builder;\n   \n   public abstract class AnimalItem implements Item {\n       @Override\n       public Organism organism() {\n           return new Animal();\n       }\n   \n       @Override\n       public abstract String name();\n   \n       @Override\n       public abstract Integer Height();\n   }\n   ```\n\n3. 两个抽象的条目创建好了，我们只实现其中的Organism，名字和身高，我们让具体类去实现，我们创建两个人，两个动物分别实现名字和身高。\n\n   ```java\n   package test.builder;\n   \n   public class PeopleItemOne extends PeopleItem {\n   \n       @Override\n       public String name() {\n           return \"my name is peopleOne\";\n       }\n   \n       @Override\n       public Integer Height() {\n           return 100;\n       }\n   }\n   ```\n\n   ```java\n   package test.builder;\n   \n   public class PeopleItemTwo extends PeopleItem {\n   \n       @Override\n       public String name() {\n           return \"my name is peopleTwo\";\n       }\n   \n       @Override\n       public Integer Height() {\n           return 200;\n       }\n   }\n   ```\n\n   ```java\n   package test.builder;\n   \n   public class AnimalItemOne extends AnimalItem {\n       @Override\n       public String name() {\n           return \"my name is animalOne\";\n       }\n   \n       @Override\n       public Integer Height() {\n           return 50;\n       }\n   }\n   ```\n\n   ```java\n   package test.builder;\n   \n   public class AnimalItemTwo extends AnimalItem {\n       @Override\n       public String name() {\n           return \"my name is animalTwo\";\n       }\n   \n       @Override\n       public Integer Height() {\n           return 100;\n       }\n   }\n   ```\n\n4. 我们创建一个家庭成员的类，让他帮我们归纳一下哪些人，哪些动物属于哪个家庭，做一下统计\n\n   ```java\n   package test.builder;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   public class Family {\n       private List<Item> items = new ArrayList<>();\n   \n       public void addItem(Item item) {\n           items.add(item);\n       }\n   \n       public Integer getHeight() {\n           Integer height = 0;\n           for (Item item : items) {\n               height += item.Height();\n           }\n           return height;\n       }\n   \n       public void showItems() {\n           for (Item item : items) {\n               System.out.println(\"Item: \" + item.name());\n               System.out.println(\"say：\" + item.organism().say());\n               System.out.println(\"height：\" + item.Height());\n           }\n       }\n   }\n   ```\n\n5. 方便起见，我们创建两个家庭，分别设置一些成员\n\n   ```java\n   package test.builder;\n   \n   public class FamilyBuilder {\n   \n       public Family familyOne() {\n           Family family = new Family();\n           family.addItem(new PeopleItemOne());\n           family.addItem(new PeopleItemTwo());\n           family.addItem(new AnimalItemOne());\n           return family;\n       }\n   \n       public Family familyTwo() {\n           Family family = new Family();\n           family.addItem(new PeopleItemTwo());\n           family.addItem(new AnimalItemTwo());\n           return family;\n       }\n   }\n   ```\n\n6. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.builder;\n   \n   public class BuilderDemo {\n       public static void main(String[] args) {\n           FamilyBuilder familyBuilder = new FamilyBuilder();\n           Family familyOne = familyBuilder.familyOne();\n           familyOne.showItems();\n           System.out.println(\"身高和：\" + familyOne.getHeight());\n           System.out.println(\"---------------------------------\");\n           Family familyTwo = familyBuilder.familyTwo();\n           familyTwo.showItems();\n           familyTwo.getHeight();\n           System.out.println(\"身高和：\" + familyTwo.getHeight());\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   Item: my name is peopleOne\n   say：people say\n   height：100\n   Item: my name is peopleTwo\n   say：people say\n   height：200\n   Item: my name is animalOne\n   say：animal say\n   height：50\n   身高和：350\n   ---------------------------------\n   Item: my name is peopleTwo\n   say：people say\n   height：200\n   Item: my name is animalTwo\n   say：animal say\n   height：100\n   身高和：300\n   ```\n\n   ##### 说明：\n\n   >**优点：**1、建造者独立，易扩展。 2、便于控制细节风险。\n   >\n   >**缺点：** 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。","slug":"建造者模式","published":1,"updated":"2020-11-03T02:05:57.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wl0014rcwogk2s6iky","content":"<h1 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h1><blockquote>\n<p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p>\n<p>StringBuilder就是典型的建造者模式</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>这次我们的类会变的复杂一些，我们还是老规矩，先创建一个Organism接口</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有生物的标识</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Organism</span> </span>{</span><br><span class=\"line\">    <span class=\"comment\">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>我们先不创建people和animal，我们先创建一个条目，让这个条目来融合Organism，同时我们新增两个属性</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleItem</span> <span class=\"keyword\">implements</span> <span class=\"title\">Item</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Organism <span class=\"title\">organism</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Integer <span class=\"title\">Height</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalItem</span> <span class=\"keyword\">implements</span> <span class=\"title\">Item</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Organism <span class=\"title\">organism</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Integer <span class=\"title\">Height</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>两个抽象的条目创建好了，我们只实现其中的Organism，名字和身高，我们让具体类去实现，我们创建两个人，两个动物分别实现名字和身高。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleItemOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">PeopleItem</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">name</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"my name is peopleOne\"</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">Height</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleItemTwo</span> <span class=\"keyword\">extends</span> <span class=\"title\">PeopleItem</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">name</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"my name is peopleTwo\"</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">Height</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">200</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalItemOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnimalItem</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">name</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"my name is animalOne\"</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">Height</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">50</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalItemTwo</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnimalItem</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">name</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"my name is animalTwo\"</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">Height</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>我们创建一个家庭成员的类，让他帮我们归纳一下哪些人，哪些动物属于哪个家庭，做一下统计</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Family</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Item&gt; items = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addItem</span><span class=\"params\">(Item item)</span> </span>{</span><br><span class=\"line\">        items.add(item);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getHeight</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        Integer height = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Item item : items) {</span><br><span class=\"line\">            height += item.Height();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> height;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showItems</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Item item : items) {</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Item: \"</span> + item.name());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"say：\"</span> + item.organism().say());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"height：\"</span> + item.Height());</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>方便起见，我们创建两个家庭，分别设置一些成员</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FamilyBuilder</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Family <span class=\"title\">familyOne</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        Family family = <span class=\"keyword\">new</span> Family();</span><br><span class=\"line\">        family.addItem(<span class=\"keyword\">new</span> PeopleItemOne());</span><br><span class=\"line\">        family.addItem(<span class=\"keyword\">new</span> PeopleItemTwo());</span><br><span class=\"line\">        family.addItem(<span class=\"keyword\">new</span> AnimalItemOne());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> family;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Family <span class=\"title\">familyTwo</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        Family family = <span class=\"keyword\">new</span> Family();</span><br><span class=\"line\">        family.addItem(<span class=\"keyword\">new</span> PeopleItemTwo());</span><br><span class=\"line\">        family.addItem(<span class=\"keyword\">new</span> AnimalItemTwo());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> family;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuilderDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        FamilyBuilder familyBuilder = <span class=\"keyword\">new</span> FamilyBuilder();</span><br><span class=\"line\">        Family familyOne = familyBuilder.familyOne();</span><br><span class=\"line\">        familyOne.showItems();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"身高和：\"</span> + familyOne.getHeight());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---------------------------------\"</span>);</span><br><span class=\"line\">        Family familyTwo = familyBuilder.familyTwo();</span><br><span class=\"line\">        familyTwo.showItems();</span><br><span class=\"line\">        familyTwo.getHeight();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"身高和：\"</span> + familyTwo.getHeight());</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Item: my name is peopleOne</span><br><span class=\"line\">say：people say</span><br><span class=\"line\">height：<span class=\"number\">100</span></span><br><span class=\"line\">Item: my name is peopleTwo</span><br><span class=\"line\">say：people say</span><br><span class=\"line\">height：<span class=\"number\">200</span></span><br><span class=\"line\">Item: my name is animalOne</span><br><span class=\"line\">say：animal say</span><br><span class=\"line\">height：<span class=\"number\">50</span></span><br><span class=\"line\">身高和：<span class=\"number\">350</span></span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">Item: my name is peopleTwo</span><br><span class=\"line\">say：people say</span><br><span class=\"line\">height：<span class=\"number\">200</span></span><br><span class=\"line\">Item: my name is animalTwo</span><br><span class=\"line\">say：animal say</span><br><span class=\"line\">height：<span class=\"number\">100</span></span><br><span class=\"line\">身高和：<span class=\"number\">300</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong>1、建造者独立，易扩展。 2、便于控制细节风险。</p>\n<p><strong>缺点：</strong> 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h1><blockquote>\n<p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p>\n<p>StringBuilder就是典型的建造者模式</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>这次我们的类会变的复杂一些，我们还是老规矩，先创建一个Organism接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有生物的标识</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Organism</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>我们先不创建people和animal，我们先创建一个条目，让这个条目来融合Organism，同时我们新增两个属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleItem</span> <span class=\"keyword\">implements</span> <span class=\"title\">Item</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Organism <span class=\"title\">organism</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Integer <span class=\"title\">Height</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalItem</span> <span class=\"keyword\">implements</span> <span class=\"title\">Item</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Organism <span class=\"title\">organism</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Integer <span class=\"title\">Height</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>两个抽象的条目创建好了，我们只实现其中的Organism，名字和身高，我们让具体类去实现，我们创建两个人，两个动物分别实现名字和身高。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleItemOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">PeopleItem</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">name</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;my name is peopleOne&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">Height</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleItemTwo</span> <span class=\"keyword\">extends</span> <span class=\"title\">PeopleItem</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">name</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;my name is peopleTwo&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">Height</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">200</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalItemOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnimalItem</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">name</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;my name is animalOne&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">Height</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">50</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalItemTwo</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnimalItem</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">name</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;my name is animalTwo&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">Height</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>我们创建一个家庭成员的类，让他帮我们归纳一下哪些人，哪些动物属于哪个家庭，做一下统计</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Family</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Item&gt; items = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addItem</span><span class=\"params\">(Item item)</span> </span>&#123;</span><br><span class=\"line\">        items.add(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getHeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Integer height = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Item item : items) &#123;</span><br><span class=\"line\">            height += item.Height();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showItems</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Item item : items) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Item: &quot;</span> + item.name());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;say：&quot;</span> + item.organism().say());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;height：&quot;</span> + item.Height());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方便起见，我们创建两个家庭，分别设置一些成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FamilyBuilder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Family <span class=\"title\">familyOne</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Family family = <span class=\"keyword\">new</span> Family();</span><br><span class=\"line\">        family.addItem(<span class=\"keyword\">new</span> PeopleItemOne());</span><br><span class=\"line\">        family.addItem(<span class=\"keyword\">new</span> PeopleItemTwo());</span><br><span class=\"line\">        family.addItem(<span class=\"keyword\">new</span> AnimalItemOne());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> family;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Family <span class=\"title\">familyTwo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Family family = <span class=\"keyword\">new</span> Family();</span><br><span class=\"line\">        family.addItem(<span class=\"keyword\">new</span> PeopleItemTwo());</span><br><span class=\"line\">        family.addItem(<span class=\"keyword\">new</span> AnimalItemTwo());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> family;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuilderDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        FamilyBuilder familyBuilder = <span class=\"keyword\">new</span> FamilyBuilder();</span><br><span class=\"line\">        Family familyOne = familyBuilder.familyOne();</span><br><span class=\"line\">        familyOne.showItems();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;身高和：&quot;</span> + familyOne.getHeight());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------------------------&quot;</span>);</span><br><span class=\"line\">        Family familyTwo = familyBuilder.familyTwo();</span><br><span class=\"line\">        familyTwo.showItems();</span><br><span class=\"line\">        familyTwo.getHeight();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;身高和：&quot;</span> + familyTwo.getHeight());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Item: my name is peopleOne</span><br><span class=\"line\">say：people say</span><br><span class=\"line\">height：<span class=\"number\">100</span></span><br><span class=\"line\">Item: my name is peopleTwo</span><br><span class=\"line\">say：people say</span><br><span class=\"line\">height：<span class=\"number\">200</span></span><br><span class=\"line\">Item: my name is animalOne</span><br><span class=\"line\">say：animal say</span><br><span class=\"line\">height：<span class=\"number\">50</span></span><br><span class=\"line\">身高和：<span class=\"number\">350</span></span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">Item: my name is peopleTwo</span><br><span class=\"line\">say：people say</span><br><span class=\"line\">height：<span class=\"number\">200</span></span><br><span class=\"line\">Item: my name is animalTwo</span><br><span class=\"line\">say：animal say</span><br><span class=\"line\">height：<span class=\"number\">100</span></span><br><span class=\"line\">身高和：<span class=\"number\">300</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong>1、建造者独立，易扩展。 2、便于控制细节风险。</p>\n<p><strong>缺点：</strong> 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"抽象工厂模式","date":"2020-11-01T10:57:23.000Z","_content":"\n# 抽象工厂模式\n\n>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n>\n>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。\n>\n>相当于把所有工厂又封装了一遍。\n\n##### 示例演示：\n\n1. 模仿工厂模式，我们创建两个接口，一个生物，一个性别，分别有两个实现类\n\n   ```java\n   package test.abstractFactory;\n   /**\n    * 所有生物的标识\n    */\n   public interface Organism {\n       //所有生物共有的一个功能，有自己的沟通方式\n       void say();\n   }\n   ```\n\n   ```java\n   package test.abstractFactory;\n   \n   public class People implements Organism{\n   \n       @Override\n       public void say() {\n           System.out.println(\"people say\");\n       }\n   }\n   ```\n\n   ```java\n   package test.abstractFactory;\n   \n   public class Animal implements Organism{\n   \n       @Override\n       public void say() {\n           System.out.println(\"animal say\");\n       }\n   }\n   ```\n\n   ```java\n   package test.abstractFactory;\n   /**\n    * 所有生物都有性别\n    */\n   public interface Sex {\n   \n       void sex();\n   }\n   ```\n\n   ```java\n   package test.abstractFactory;\n   \n   public class Male implements Sex {\n       @Override\n       public void sex() {\n           System.out.println(\"male\");\n       }\n   }\n   ```\n\n   ```java\n   package test.abstractFactory;\n   \n   public class Female implements Sex {\n       @Override\n       public void sex() {\n           System.out.println(\"female\");\n       }\n   }\n   ```\n\n2. 创建一个超级工厂\n\n   ```java\n   package test.abstractFactory;\n   \n   public abstract class AbstractFactory {\n   \n       public abstract Organism getOrganism(String type);\n   \n       public abstract Sex getSex(String type);\n   \n   }\n   ```\n\n3. 通过继承超级工厂来分别来实现各自的工厂\n\n   ```java\n   package test.abstractFactory;\n   \n   import org.apache.commons.lang3.StringUtils;\n   \n   public class OrganismFactory extends AbstractFactory{\n   \n       @Override\n       public Organism getOrganism(String type) {\n           if (StringUtils.isBlank(type)) {\n               return null;\n           }\n           if (type.equalsIgnoreCase(\"people\")) {\n               return new People();\n           } else if (type.equalsIgnoreCase(\"animal\")) {\n               return new Animal();\n           }\n           return null;\n       }\n   \n       @Override\n       public Sex getSex(String type) {\n           return null;\n       }\n   }\n   ```\n\n   ```java\n   package test.abstractFactory;\n   \n   import org.apache.commons.lang3.StringUtils;\n   \n   public class SexFactory extends AbstractFactory{\n   \n       @Override\n       public Organism getOrganism(String type) {\n           return null;\n       }\n   \n       @Override\n       public Sex getSex(String type) {\n           if (StringUtils.isBlank(type)) {\n               return null;\n           }\n           if (type.equalsIgnoreCase(\"male\")) {\n               return new Male();\n           } else if (type.equalsIgnoreCase(\"female\")) {\n               return new Female();\n           }\n           return null;\n       }\n   }\n   ```\n\n4. 创建一个工厂创造器\n\n   ```java\n   package test.abstractFactory;\n   \n   import org.apache.commons.lang3.StringUtils;\n   \n   public class FactoryProducer {\n   \n       public static AbstractFactory getFactory(String type) {\n           if (StringUtils.isBlank(type)) {\n               return null;\n           }\n           if (type.equalsIgnoreCase(\"organism\")) {\n               return new OrganismFactory();\n           } else if (type.equalsIgnoreCase(\"sex\")) {\n               return new SexFactory();\n           }\n           return null;\n       }\n   }\n   ```\n\n5. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.abstractFactory;\n   \n   public class AbstractFactoryDemo {\n       public static void main(String[] args) {\n           AbstractFactory organismFactory = FactoryProducer.getFactory(\"organism\");\n           Organism people = organismFactory.getOrganism(\"people\");\n           people.say();\n   \n           Organism animal = organismFactory.getOrganism(\"animal\");\n           animal.say();\n   \n           AbstractFactory sexFactory = FactoryProducer.getFactory(\"sex\");\n   \n           Sex male = sexFactory.getSex(\"male\");\n           male.sex();\n   \n           Sex female = sexFactory.getSex(\"female\");\n           female.sex();\n   \n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   people say\n   animal say\n   male\n   female\n   ```\n\n   ##### 说明：\n\n   >**优点：**当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。\n   >\n   >**缺点：**产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。\n\n","source":"_posts/抽象工厂模式.md","raw":"---\ntitle: 抽象工厂模式\ndate: 2020-11-01 18:57:23\ntags:\n- java\n- 设计模式\n---\n\n# 抽象工厂模式\n\n>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n>\n>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。\n>\n>相当于把所有工厂又封装了一遍。\n\n##### 示例演示：\n\n1. 模仿工厂模式，我们创建两个接口，一个生物，一个性别，分别有两个实现类\n\n   ```java\n   package test.abstractFactory;\n   /**\n    * 所有生物的标识\n    */\n   public interface Organism {\n       //所有生物共有的一个功能，有自己的沟通方式\n       void say();\n   }\n   ```\n\n   ```java\n   package test.abstractFactory;\n   \n   public class People implements Organism{\n   \n       @Override\n       public void say() {\n           System.out.println(\"people say\");\n       }\n   }\n   ```\n\n   ```java\n   package test.abstractFactory;\n   \n   public class Animal implements Organism{\n   \n       @Override\n       public void say() {\n           System.out.println(\"animal say\");\n       }\n   }\n   ```\n\n   ```java\n   package test.abstractFactory;\n   /**\n    * 所有生物都有性别\n    */\n   public interface Sex {\n   \n       void sex();\n   }\n   ```\n\n   ```java\n   package test.abstractFactory;\n   \n   public class Male implements Sex {\n       @Override\n       public void sex() {\n           System.out.println(\"male\");\n       }\n   }\n   ```\n\n   ```java\n   package test.abstractFactory;\n   \n   public class Female implements Sex {\n       @Override\n       public void sex() {\n           System.out.println(\"female\");\n       }\n   }\n   ```\n\n2. 创建一个超级工厂\n\n   ```java\n   package test.abstractFactory;\n   \n   public abstract class AbstractFactory {\n   \n       public abstract Organism getOrganism(String type);\n   \n       public abstract Sex getSex(String type);\n   \n   }\n   ```\n\n3. 通过继承超级工厂来分别来实现各自的工厂\n\n   ```java\n   package test.abstractFactory;\n   \n   import org.apache.commons.lang3.StringUtils;\n   \n   public class OrganismFactory extends AbstractFactory{\n   \n       @Override\n       public Organism getOrganism(String type) {\n           if (StringUtils.isBlank(type)) {\n               return null;\n           }\n           if (type.equalsIgnoreCase(\"people\")) {\n               return new People();\n           } else if (type.equalsIgnoreCase(\"animal\")) {\n               return new Animal();\n           }\n           return null;\n       }\n   \n       @Override\n       public Sex getSex(String type) {\n           return null;\n       }\n   }\n   ```\n\n   ```java\n   package test.abstractFactory;\n   \n   import org.apache.commons.lang3.StringUtils;\n   \n   public class SexFactory extends AbstractFactory{\n   \n       @Override\n       public Organism getOrganism(String type) {\n           return null;\n       }\n   \n       @Override\n       public Sex getSex(String type) {\n           if (StringUtils.isBlank(type)) {\n               return null;\n           }\n           if (type.equalsIgnoreCase(\"male\")) {\n               return new Male();\n           } else if (type.equalsIgnoreCase(\"female\")) {\n               return new Female();\n           }\n           return null;\n       }\n   }\n   ```\n\n4. 创建一个工厂创造器\n\n   ```java\n   package test.abstractFactory;\n   \n   import org.apache.commons.lang3.StringUtils;\n   \n   public class FactoryProducer {\n   \n       public static AbstractFactory getFactory(String type) {\n           if (StringUtils.isBlank(type)) {\n               return null;\n           }\n           if (type.equalsIgnoreCase(\"organism\")) {\n               return new OrganismFactory();\n           } else if (type.equalsIgnoreCase(\"sex\")) {\n               return new SexFactory();\n           }\n           return null;\n       }\n   }\n   ```\n\n5. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.abstractFactory;\n   \n   public class AbstractFactoryDemo {\n       public static void main(String[] args) {\n           AbstractFactory organismFactory = FactoryProducer.getFactory(\"organism\");\n           Organism people = organismFactory.getOrganism(\"people\");\n           people.say();\n   \n           Organism animal = organismFactory.getOrganism(\"animal\");\n           animal.say();\n   \n           AbstractFactory sexFactory = FactoryProducer.getFactory(\"sex\");\n   \n           Sex male = sexFactory.getSex(\"male\");\n           male.sex();\n   \n           Sex female = sexFactory.getSex(\"female\");\n           female.sex();\n   \n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   people say\n   animal say\n   male\n   female\n   ```\n\n   ##### 说明：\n\n   >**优点：**当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。\n   >\n   >**缺点：**产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。\n\n","slug":"抽象工厂模式","published":1,"updated":"2020-11-03T09:02:52.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wm0016rcwoc30ldqgc","content":"<h1 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h1><blockquote>\n<p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p>\n<p>相当于把所有工厂又封装了一遍。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>模仿工厂模式，我们创建两个接口，一个生物，一个性别，分别有两个实现类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有生物的标识</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Organism</span> </span>{</span><br><span class=\"line\">    <span class=\"comment\">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span></span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"people say\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span></span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"animal say\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有生物都有性别</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sex</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sex</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Male</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sex</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sex</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"male\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Female</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sex</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sex</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"female\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建一个超级工厂</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Organism <span class=\"title\">getOrganism</span><span class=\"params\">(String type)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Sex <span class=\"title\">getSex</span><span class=\"params\">(String type)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>通过继承超级工厂来分别来实现各自的工厂</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrganismFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span></span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Organism <span class=\"title\">getOrganism</span><span class=\"params\">(String type)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(type)) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"people\"</span>)) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"animal\"</span>)) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sex <span class=\"title\">getSex</span><span class=\"params\">(String type)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SexFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span></span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Organism <span class=\"title\">getOrganism</span><span class=\"params\">(String type)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sex <span class=\"title\">getSex</span><span class=\"params\">(String type)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(type)) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"male\"</span>)) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Male();</span><br><span class=\"line\">        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"female\"</span>)) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Female();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建一个工厂创造器</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryProducer</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AbstractFactory <span class=\"title\">getFactory</span><span class=\"params\">(String type)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(type)) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"organism\"</span>)) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OrganismFactory();</span><br><span class=\"line\">        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"sex\"</span>)) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SexFactory();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactoryDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        AbstractFactory organismFactory = FactoryProducer.getFactory(<span class=\"string\">\"organism\"</span>);</span><br><span class=\"line\">        Organism people = organismFactory.getOrganism(<span class=\"string\">\"people\"</span>);</span><br><span class=\"line\">        people.say();</span><br><span class=\"line\"></span><br><span class=\"line\">        Organism animal = organismFactory.getOrganism(<span class=\"string\">\"animal\"</span>);</span><br><span class=\"line\">        animal.say();</span><br><span class=\"line\"></span><br><span class=\"line\">        AbstractFactory sexFactory = FactoryProducer.getFactory(<span class=\"string\">\"sex\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Sex male = sexFactory.getSex(<span class=\"string\">\"male\"</span>);</span><br><span class=\"line\">        male.sex();</span><br><span class=\"line\"></span><br><span class=\"line\">        Sex female = sexFactory.getSex(<span class=\"string\">\"female\"</span>);</span><br><span class=\"line\">        female.sex();</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">people say</span><br><span class=\"line\">animal say</span><br><span class=\"line\">male</span><br><span class=\"line\">female</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p>\n<p><strong>缺点：</strong>产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h1><blockquote>\n<p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p>\n<p>相当于把所有工厂又封装了一遍。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>模仿工厂模式，我们创建两个接口，一个生物，一个性别，分别有两个实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有生物的标识</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Organism</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;people say&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;animal say&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有生物都有性别</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Sex</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sex</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Male</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sex</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;male&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Female</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sex</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;female&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个超级工厂</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Organism <span class=\"title\">getOrganism</span><span class=\"params\">(String type)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Sex <span class=\"title\">getSex</span><span class=\"params\">(String type)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过继承超级工厂来分别来实现各自的工厂</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrganismFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Organism <span class=\"title\">getOrganism</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;people&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;animal&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sex <span class=\"title\">getSex</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SexFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Organism <span class=\"title\">getOrganism</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sex <span class=\"title\">getSex</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;male&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Male();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;female&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Female();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个工厂创造器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AbstractFactory <span class=\"title\">getFactory</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;organism&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OrganismFactory();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;sex&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SexFactory();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.abstractFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactoryDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AbstractFactory organismFactory = FactoryProducer.getFactory(<span class=\"string\">&quot;organism&quot;</span>);</span><br><span class=\"line\">        Organism people = organismFactory.getOrganism(<span class=\"string\">&quot;people&quot;</span>);</span><br><span class=\"line\">        people.say();</span><br><span class=\"line\"></span><br><span class=\"line\">        Organism animal = organismFactory.getOrganism(<span class=\"string\">&quot;animal&quot;</span>);</span><br><span class=\"line\">        animal.say();</span><br><span class=\"line\"></span><br><span class=\"line\">        AbstractFactory sexFactory = FactoryProducer.getFactory(<span class=\"string\">&quot;sex&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Sex male = sexFactory.getSex(<span class=\"string\">&quot;male&quot;</span>);</span><br><span class=\"line\">        male.sex();</span><br><span class=\"line\"></span><br><span class=\"line\">        Sex female = sexFactory.getSex(<span class=\"string\">&quot;female&quot;</span>);</span><br><span class=\"line\">        female.sex();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">people say</span><br><span class=\"line\">animal say</span><br><span class=\"line\">male</span><br><span class=\"line\">female</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p>\n<p><strong>缺点：</strong>产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"桥接模式","date":"2020-11-03T06:51:06.000Z","_content":"\n# 桥接模式\n\n>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。\n>\n>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。\n\n##### 示例演示：\n\n1. 我们创建一个性别api接口\n\n   ```java\n   package test.bridge;\n   \n   public interface SexApi {\n       public void sex();\n   }\n   ```\n\n2. 创建两个接口实现\n\n   ```java\n   package test.bridge;\n   \n   public class Male implements SexApi {\n       @Override\n       public void sex() {\n           System.out.println(\"my sex is male\");\n       }\n   }\n   ```\n\n   ```java\n   package test.bridge;\n   \n   public class Female implements SexApi {\n       @Override\n       public void sex() {\n           System.out.println(\"my sex is female\");\n       }\n   }\n   ```\n\n3. 创建一个people的抽象类，并赋予性别api的接口功能，为people提供一个性别\n\n   ```java\n   package test.bridge;\n   \n   public abstract class People {\n       protected SexApi sexApi;\n   \n       protected People(SexApi sexApi) {\n           this.sexApi = sexApi;\n       }\n       public abstract void peopleSex();\n   }\n   ```\n\n4. 创建people的实体类\n\n   ```java\n   package test.bridge;\n   \n   public class PeopleImpl extends People{\n   \n       protected PeopleImpl(SexApi sexApi) {\n           super(sexApi);\n       }\n   \n       @Override\n       public void peopleSex() {\n           sexApi.sex();\n       }\n   }\n   ```\n\n5. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.bridge;\n   \n   public class BridgeDemo {\n       public static void main(String[] args) {\n           People male = new PeopleImpl(new Male());\n           People female = new PeopleImpl(new Female());\n   \n           male.peopleSex();\n           female.peopleSex();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   my sex is male\n   my sex is female\n   ```\n\n   ##### 说明：\n\n   >**优点：** 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。\n   >\n   >**缺点：**桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。","source":"_posts/桥接模式.md","raw":"---\ntitle: 桥接模式\ndate: 2020-11-03 14:51:06\ntags:\n- java\n- 设计模式\n---\n\n# 桥接模式\n\n>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。\n>\n>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。\n\n##### 示例演示：\n\n1. 我们创建一个性别api接口\n\n   ```java\n   package test.bridge;\n   \n   public interface SexApi {\n       public void sex();\n   }\n   ```\n\n2. 创建两个接口实现\n\n   ```java\n   package test.bridge;\n   \n   public class Male implements SexApi {\n       @Override\n       public void sex() {\n           System.out.println(\"my sex is male\");\n       }\n   }\n   ```\n\n   ```java\n   package test.bridge;\n   \n   public class Female implements SexApi {\n       @Override\n       public void sex() {\n           System.out.println(\"my sex is female\");\n       }\n   }\n   ```\n\n3. 创建一个people的抽象类，并赋予性别api的接口功能，为people提供一个性别\n\n   ```java\n   package test.bridge;\n   \n   public abstract class People {\n       protected SexApi sexApi;\n   \n       protected People(SexApi sexApi) {\n           this.sexApi = sexApi;\n       }\n       public abstract void peopleSex();\n   }\n   ```\n\n4. 创建people的实体类\n\n   ```java\n   package test.bridge;\n   \n   public class PeopleImpl extends People{\n   \n       protected PeopleImpl(SexApi sexApi) {\n           super(sexApi);\n       }\n   \n       @Override\n       public void peopleSex() {\n           sexApi.sex();\n       }\n   }\n   ```\n\n5. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.bridge;\n   \n   public class BridgeDemo {\n       public static void main(String[] args) {\n           People male = new PeopleImpl(new Male());\n           People female = new PeopleImpl(new Female());\n   \n           male.peopleSex();\n           female.peopleSex();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   my sex is male\n   my sex is female\n   ```\n\n   ##### 说明：\n\n   >**优点：** 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。\n   >\n   >**缺点：**桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。","slug":"桥接模式","published":1,"updated":"2020-11-03T06:58:08.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wm0019rcwoh4zqdvuu","content":"<h1 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h1><blockquote>\n<p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p>\n<p>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们创建一个性别api接口</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.bridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SexApi</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sex</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建两个接口实现</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.bridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Male</span> <span class=\"keyword\">implements</span> <span class=\"title\">SexApi</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sex</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"my sex is male\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.bridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Female</span> <span class=\"keyword\">implements</span> <span class=\"title\">SexApi</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sex</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"my sex is female\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建一个people的抽象类，并赋予性别api的接口功能，为people提供一个性别</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.bridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> SexApi sexApi;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">People</span><span class=\"params\">(SexApi sexApi)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sexApi = sexApi;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">peopleSex</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建people的实体类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.bridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span></span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">PeopleImpl</span><span class=\"params\">(SexApi sexApi)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(sexApi);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">peopleSex</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        sexApi.sex();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.bridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BridgeDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        People male = <span class=\"keyword\">new</span> PeopleImpl(<span class=\"keyword\">new</span> Male());</span><br><span class=\"line\">        People female = <span class=\"keyword\">new</span> PeopleImpl(<span class=\"keyword\">new</span> Female());</span><br><span class=\"line\"></span><br><span class=\"line\">        male.peopleSex();</span><br><span class=\"line\">        female.peopleSex();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my sex is male</span><br><span class=\"line\">my sex is female</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。</p>\n<p><strong>缺点：</strong>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h1><blockquote>\n<p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p>\n<p>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们创建一个性别api接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.bridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SexApi</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sex</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建两个接口实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.bridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Male</span> <span class=\"keyword\">implements</span> <span class=\"title\">SexApi</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;my sex is male&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.bridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Female</span> <span class=\"keyword\">implements</span> <span class=\"title\">SexApi</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;my sex is female&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个people的抽象类，并赋予性别api的接口功能，为people提供一个性别</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.bridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> SexApi sexApi;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">People</span><span class=\"params\">(SexApi sexApi)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sexApi = sexApi;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">peopleSex</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建people的实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.bridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">PeopleImpl</span><span class=\"params\">(SexApi sexApi)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(sexApi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">peopleSex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sexApi.sex();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.bridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BridgeDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        People male = <span class=\"keyword\">new</span> PeopleImpl(<span class=\"keyword\">new</span> Male());</span><br><span class=\"line\">        People female = <span class=\"keyword\">new</span> PeopleImpl(<span class=\"keyword\">new</span> Female());</span><br><span class=\"line\"></span><br><span class=\"line\">        male.peopleSex();</span><br><span class=\"line\">        female.peopleSex();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my sex is male</span><br><span class=\"line\">my sex is female</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。</p>\n<p><strong>缺点：</strong>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"模板模式","date":"2020-11-06T02:35:08.000Z","_content":"\n# 模版模式\n\n>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。\n\n##### 示例演示：\n\n1. 我们定义一个抽象类，并提供一个final的方法，防止被重写\n\n   ```java\n   package test.template;\n   \n   public abstract class People {\n   \n       abstract void awake();\n       abstract void eat();\n       abstract void sleep();\n   \n       public final void action(){\n           awake();\n           eat();\n           sleep();\n       }\n   \n   }\n   ```\n\n2. 创建两个实现类\n\n   ```java\n   package test.template;\n   \n   public class PeopleOne extends People {\n       @Override\n       void awake() {\n           System.out.println(\"peopleOne awake\");\n       }\n   \n       @Override\n       void eat() {\n           System.out.println(\"peopleOne eat\");\n       }\n   \n       @Override\n       void sleep() {\n           System.out.println(\"peopleOne sleep\");\n       }\n   }\n   ```\n\n   ```java\n   package test.template;\n   \n   public class PeopleTwo extends People {\n       @Override\n       void awake() {\n           System.out.println(\"peopleTwo awake\");\n       }\n   \n       @Override\n       void eat() {\n           System.out.println(\"peopleTwo eat\");\n       }\n   \n       @Override\n       void sleep() {\n           System.out.println(\"peopleTwo sleep\");\n       }\n   }\n   ```\n\n3. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.template;\n   \n   public class TemplateDemo {\n       public static void main(String[] args) {\n           People peopleOne =new PeopleOne();\n           peopleOne.action();\n           System.out.println(\"---------------------------------\");\n           People peopleTwo =new PeopleTwo();\n           peopleTwo.action();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   peopleOne awake\n   peopleOne eat\n   peopleOne sleep\n   ---------------------------------\n   peopleTwo awake\n   peopleTwo eat\n   peopleTwo sleep\n   ```\n\n\n##### 说明：\n\n>**优点：** 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。\n>\n>**缺点：**每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。","source":"_posts/模板模式.md","raw":"---\ntitle: 模板模式\ndate: 2020-11-06 10:35:08\ntags:\n- java\n- 设计模式\n---\n\n# 模版模式\n\n>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。\n\n##### 示例演示：\n\n1. 我们定义一个抽象类，并提供一个final的方法，防止被重写\n\n   ```java\n   package test.template;\n   \n   public abstract class People {\n   \n       abstract void awake();\n       abstract void eat();\n       abstract void sleep();\n   \n       public final void action(){\n           awake();\n           eat();\n           sleep();\n       }\n   \n   }\n   ```\n\n2. 创建两个实现类\n\n   ```java\n   package test.template;\n   \n   public class PeopleOne extends People {\n       @Override\n       void awake() {\n           System.out.println(\"peopleOne awake\");\n       }\n   \n       @Override\n       void eat() {\n           System.out.println(\"peopleOne eat\");\n       }\n   \n       @Override\n       void sleep() {\n           System.out.println(\"peopleOne sleep\");\n       }\n   }\n   ```\n\n   ```java\n   package test.template;\n   \n   public class PeopleTwo extends People {\n       @Override\n       void awake() {\n           System.out.println(\"peopleTwo awake\");\n       }\n   \n       @Override\n       void eat() {\n           System.out.println(\"peopleTwo eat\");\n       }\n   \n       @Override\n       void sleep() {\n           System.out.println(\"peopleTwo sleep\");\n       }\n   }\n   ```\n\n3. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.template;\n   \n   public class TemplateDemo {\n       public static void main(String[] args) {\n           People peopleOne =new PeopleOne();\n           peopleOne.action();\n           System.out.println(\"---------------------------------\");\n           People peopleTwo =new PeopleTwo();\n           peopleTwo.action();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   peopleOne awake\n   peopleOne eat\n   peopleOne sleep\n   ---------------------------------\n   peopleTwo awake\n   peopleTwo eat\n   peopleTwo sleep\n   ```\n\n\n##### 说明：\n\n>**优点：** 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。\n>\n>**缺点：**每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。","slug":"模板模式","published":1,"updated":"2020-11-06T02:38:55.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wp001brcwoca3kbipu","content":"<h1 id=\"模版模式\"><a href=\"#模版模式\" class=\"headerlink\" title=\"模版模式\"></a>模版模式</h1><blockquote>\n<p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们定义一个抽象类，并提供一个final的方法，防止被重写</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.template;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">awake</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">        awake();</span><br><span class=\"line\">        eat();</span><br><span class=\"line\">        sleep();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建两个实现类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.template;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">awake</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"peopleOne awake\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"peopleOne eat\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"peopleOne sleep\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.template;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleTwo</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">awake</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"peopleTwo awake\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"peopleTwo eat\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"peopleTwo sleep\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.template;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemplateDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        People peopleOne =<span class=\"keyword\">new</span> PeopleOne();</span><br><span class=\"line\">        peopleOne.action();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---------------------------------\"</span>);</span><br><span class=\"line\">        People peopleTwo =<span class=\"keyword\">new</span> PeopleTwo();</span><br><span class=\"line\">        peopleTwo.action();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">peopleOne awake</span><br><span class=\"line\">peopleOne eat</span><br><span class=\"line\">peopleOne sleep</span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">peopleTwo awake</span><br><span class=\"line\">peopleTwo eat</span><br><span class=\"line\">peopleTwo sleep</span><br></pre></td></tr></tbody></table></figure>\n\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。</p>\n<p><strong>缺点：</strong>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"模版模式\"><a href=\"#模版模式\" class=\"headerlink\" title=\"模版模式\"></a>模版模式</h1><blockquote>\n<p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们定义一个抽象类，并提供一个final的方法，防止被重写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.template;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">awake</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        awake();</span><br><span class=\"line\">        eat();</span><br><span class=\"line\">        sleep();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建两个实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.template;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">awake</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;peopleOne awake&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;peopleOne eat&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;peopleOne sleep&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.template;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleTwo</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">awake</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;peopleTwo awake&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;peopleTwo eat&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;peopleTwo sleep&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.template;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemplateDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        People peopleOne =<span class=\"keyword\">new</span> PeopleOne();</span><br><span class=\"line\">        peopleOne.action();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------------------------&quot;</span>);</span><br><span class=\"line\">        People peopleTwo =<span class=\"keyword\">new</span> PeopleTwo();</span><br><span class=\"line\">        peopleTwo.action();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">peopleOne awake</span><br><span class=\"line\">peopleOne eat</span><br><span class=\"line\">peopleOne sleep</span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">peopleTwo awake</span><br><span class=\"line\">peopleTwo eat</span><br><span class=\"line\">peopleTwo sleep</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。</p>\n<p><strong>缺点：</strong>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p>\n</blockquote>\n"},{"title":"状态模式","date":"2020-11-05T08:05:52.000Z","_content":"\n# 状态模式\n\n>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。\n\n##### 示例演示：\n\n1. 我们创建一个people实体和一个state接口，提供两个方法，一个吃，一个睡\n\n   ```java\n   package test.state;\n   \n   public interface State {\n   \n       public void eat(People people);\n   \n       public void sleep(People people);\n   }\n   ```\n\n   ```java\n   package test.state;\n   \n   public class People {\n       private State state;\n   \n       public State getState() {\n           return state;\n       }\n   \n       public void setState(State state) {\n           this.state = state;\n       }\n   \n       public void eat() {\n           getState().eat(this);\n       }\n   \n       public void sleep() {\n           getState().sleep(this);\n       }\n   }\n   ```\n\n2. 创建两个状态类，分别实现eat和sleep接口\n\n   ```java\n   package test.state;\n   \n   public class EatState implements State {\n       @Override\n       public void eat(People people) {\n   \n       }\n   \n       @Override\n       public void sleep(People people) {\n           people.setState(new SleepState());\n           System.out.println(\"sleep\");\n       }\n   }\n   ```\n\n   ```java\n   package test.state;\n   \n   public class SleepState implements State {\n       @Override\n       public void eat(People people) {\n           people.setState(new EatState());\n           System.out.println(\"eat\");\n       }\n   \n       @Override\n       public void sleep(People people) {\n   \n       }\n   }\n   ```\n\n3. 完成上述步骤，我们就可以开始演示了，我们给people一个初始状态，然后让他来回切换状态\n\n   ```java\n   package test.state;\n   \n   public class StateDemo {\n       public static void main(String[] args) {\n           People people = new People();\n           people.setState(new EatState());\n   \n           people.sleep();\n           people.eat();\n           people.sleep();\n           people.eat();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   sleep\n   eat\n   sleep\n   eat\n   ```\n\n##### 说明：\n\n>**优点：** 1、封装了转换规则。 2、枚举可能的状态，在枚举状态之前需要确定状态种类。 3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。\n>\n>**缺点：** 1、状态模式的使用必然会增加系统类和对象的个数。 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 3、状态模式对\"开闭原则\"的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。","source":"_posts/状态模式.md","raw":"---\ntitle: 状态模式\ndate: 2020-11-05 16:05:52\ntags:\n- java\n- 设计模式\n---\n\n# 状态模式\n\n>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。\n\n##### 示例演示：\n\n1. 我们创建一个people实体和一个state接口，提供两个方法，一个吃，一个睡\n\n   ```java\n   package test.state;\n   \n   public interface State {\n   \n       public void eat(People people);\n   \n       public void sleep(People people);\n   }\n   ```\n\n   ```java\n   package test.state;\n   \n   public class People {\n       private State state;\n   \n       public State getState() {\n           return state;\n       }\n   \n       public void setState(State state) {\n           this.state = state;\n       }\n   \n       public void eat() {\n           getState().eat(this);\n       }\n   \n       public void sleep() {\n           getState().sleep(this);\n       }\n   }\n   ```\n\n2. 创建两个状态类，分别实现eat和sleep接口\n\n   ```java\n   package test.state;\n   \n   public class EatState implements State {\n       @Override\n       public void eat(People people) {\n   \n       }\n   \n       @Override\n       public void sleep(People people) {\n           people.setState(new SleepState());\n           System.out.println(\"sleep\");\n       }\n   }\n   ```\n\n   ```java\n   package test.state;\n   \n   public class SleepState implements State {\n       @Override\n       public void eat(People people) {\n           people.setState(new EatState());\n           System.out.println(\"eat\");\n       }\n   \n       @Override\n       public void sleep(People people) {\n   \n       }\n   }\n   ```\n\n3. 完成上述步骤，我们就可以开始演示了，我们给people一个初始状态，然后让他来回切换状态\n\n   ```java\n   package test.state;\n   \n   public class StateDemo {\n       public static void main(String[] args) {\n           People people = new People();\n           people.setState(new EatState());\n   \n           people.sleep();\n           people.eat();\n           people.sleep();\n           people.eat();\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   sleep\n   eat\n   sleep\n   eat\n   ```\n\n##### 说明：\n\n>**优点：** 1、封装了转换规则。 2、枚举可能的状态，在枚举状态之前需要确定状态种类。 3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。\n>\n>**缺点：** 1、状态模式的使用必然会增加系统类和对象的个数。 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 3、状态模式对\"开闭原则\"的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。","slug":"状态模式","published":1,"updated":"2020-11-05T08:39:44.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wp001drcwo2pvg6pdp","content":"<h1 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h1><blockquote>\n<p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们创建一个people实体和一个state接口，提供两个方法，一个吃，一个睡</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.state;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">State</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(People people)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(People people)</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.state;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> State state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getState</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setState</span><span class=\"params\">(State state)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = state;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        getState().eat(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        getState().sleep(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建两个状态类，分别实现eat和sleep接口</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.state;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EatState</span> <span class=\"keyword\">implements</span> <span class=\"title\">State</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(People people)</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(People people)</span> </span>{</span><br><span class=\"line\">        people.setState(<span class=\"keyword\">new</span> SleepState());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"sleep\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.state;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SleepState</span> <span class=\"keyword\">implements</span> <span class=\"title\">State</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(People people)</span> </span>{</span><br><span class=\"line\">        people.setState(<span class=\"keyword\">new</span> EatState());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"eat\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(People people)</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了，我们给people一个初始状态，然后让他来回切换状态</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.state;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StateDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        People people = <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">        people.setState(<span class=\"keyword\">new</span> EatState());</span><br><span class=\"line\"></span><br><span class=\"line\">        people.sleep();</span><br><span class=\"line\">        people.eat();</span><br><span class=\"line\">        people.sleep();</span><br><span class=\"line\">        people.eat();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sleep</span><br><span class=\"line\">eat</span><br><span class=\"line\">sleep</span><br><span class=\"line\">eat</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、封装了转换规则。 2、枚举可能的状态，在枚举状态之前需要确定状态种类。 3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</p>\n<p><strong>缺点：</strong> 1、状态模式的使用必然会增加系统类和对象的个数。 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 3、状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h1><blockquote>\n<p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们创建一个people实体和一个state接口，提供两个方法，一个吃，一个睡</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.state;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(People people)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(People people)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.state;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> State state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setState</span><span class=\"params\">(State state)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        getState().eat(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        getState().sleep(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建两个状态类，分别实现eat和sleep接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.state;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EatState</span> <span class=\"keyword\">implements</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(People people)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(People people)</span> </span>&#123;</span><br><span class=\"line\">        people.setState(<span class=\"keyword\">new</span> SleepState());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sleep&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.state;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SleepState</span> <span class=\"keyword\">implements</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(People people)</span> </span>&#123;</span><br><span class=\"line\">        people.setState(<span class=\"keyword\">new</span> EatState());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(People people)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了，我们给people一个初始状态，然后让他来回切换状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.state;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StateDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        People people = <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">        people.setState(<span class=\"keyword\">new</span> EatState());</span><br><span class=\"line\"></span><br><span class=\"line\">        people.sleep();</span><br><span class=\"line\">        people.eat();</span><br><span class=\"line\">        people.sleep();</span><br><span class=\"line\">        people.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sleep</span><br><span class=\"line\">eat</span><br><span class=\"line\">sleep</span><br><span class=\"line\">eat</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、封装了转换规则。 2、枚举可能的状态，在枚举状态之前需要确定状态种类。 3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</p>\n<p><strong>缺点：</strong> 1、状态模式的使用必然会增加系统类和对象的个数。 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 3、状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</p>\n</blockquote>\n"},{"title":"空对象模式","date":"2020-11-05T08:42:05.000Z","_content":"\n# 空对象模式\n\n>在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。\n>\n>在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。\n\n##### 示例演示：\n\n1. 新建一个people的抽象类\n\n   ```java\n   package test.nullObject;\n   \n   public abstract class People {\n   \n       protected String name;\n   \n       public abstract boolean isNull();\n   \n       public abstract String getName();\n   }\n   ```\n\n2. 分别创建两个对象，一个存在的，一个不存在的\n\n   ```java\n   package test.nullObject;\n   \n   public class RealPeople extends People {\n   \n       public RealPeople(String name) {\n           this.name = name;\n       }\n   \n       @Override\n       public boolean isNull() {\n           return false;\n       }\n   \n       @Override\n       public String getName() {\n           return name;\n       }\n   }\n   ```\n\n   ```java\n   package test.nullObject;\n   \n   public class NullPeople extends People{\n   \n       @Override\n       public boolean isNull() {\n           return true;\n       }\n   \n       @Override\n       public String getName() {\n           return \"non-existent\";\n       }\n   }\n   ```\n\n3. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.nullObject;\n   \n   public class NullDemo {\n       public static String[] names = {\"a\", \"b\", \"c\"};\n   \n       public static People getPeople(String name) {\n           for (int i=0;i<names.length;i++) {\n               if(names[i].equalsIgnoreCase(name)){\n                   return new RealPeople(name);\n               }\n           }\n           return new NullPeople();\n       }\n   \n       public static void main(String[] args) {\n           People a = getPeople(\"a\");\n           People b = getPeople(\"b\");\n           People c = getPeople(\"c\");\n           People d = getPeople(\"d\");\n   \n           System.out.println(a.getName());\n           System.out.println(b.getName());\n           System.out.println(c.getName());\n           System.out.println(d.getName());\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   a\n   b\n   c\n   non-existent\n   ```\n\n##### 说明：\n\n> 空对象模式就是对于不存在的值，单独进行封装，如果返回为null，我们在最开始就做好null值的处理。","source":"_posts/空对象模式.md","raw":"---\ntitle: 空对象模式\ndate: 2020-11-05 16:42:05\ntags:\n- java\n- 设计模式\n---\n\n# 空对象模式\n\n>在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。\n>\n>在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。\n\n##### 示例演示：\n\n1. 新建一个people的抽象类\n\n   ```java\n   package test.nullObject;\n   \n   public abstract class People {\n   \n       protected String name;\n   \n       public abstract boolean isNull();\n   \n       public abstract String getName();\n   }\n   ```\n\n2. 分别创建两个对象，一个存在的，一个不存在的\n\n   ```java\n   package test.nullObject;\n   \n   public class RealPeople extends People {\n   \n       public RealPeople(String name) {\n           this.name = name;\n       }\n   \n       @Override\n       public boolean isNull() {\n           return false;\n       }\n   \n       @Override\n       public String getName() {\n           return name;\n       }\n   }\n   ```\n\n   ```java\n   package test.nullObject;\n   \n   public class NullPeople extends People{\n   \n       @Override\n       public boolean isNull() {\n           return true;\n       }\n   \n       @Override\n       public String getName() {\n           return \"non-existent\";\n       }\n   }\n   ```\n\n3. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.nullObject;\n   \n   public class NullDemo {\n       public static String[] names = {\"a\", \"b\", \"c\"};\n   \n       public static People getPeople(String name) {\n           for (int i=0;i<names.length;i++) {\n               if(names[i].equalsIgnoreCase(name)){\n                   return new RealPeople(name);\n               }\n           }\n           return new NullPeople();\n       }\n   \n       public static void main(String[] args) {\n           People a = getPeople(\"a\");\n           People b = getPeople(\"b\");\n           People c = getPeople(\"c\");\n           People d = getPeople(\"d\");\n   \n           System.out.println(a.getName());\n           System.out.println(b.getName());\n           System.out.println(c.getName());\n           System.out.println(d.getName());\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   a\n   b\n   c\n   non-existent\n   ```\n\n##### 说明：\n\n> 空对象模式就是对于不存在的值，单独进行封装，如果返回为null，我们在最开始就做好null值的处理。","slug":"空对象模式","published":1,"updated":"2020-11-05T09:07:39.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wq001frcwo41z4fz4t","content":"<h1 id=\"空对象模式\"><a href=\"#空对象模式\" class=\"headerlink\" title=\"空对象模式\"></a>空对象模式</h1><blockquote>\n<p>在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。</p>\n<p>在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>新建一个people的抽象类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.nullObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>分别创建两个对象，一个存在的，一个不存在的</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.nullObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealPeople</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RealPeople</span><span class=\"params\">(String name)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.nullObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NullPeople</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span></span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"non-existent\"</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.nullObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NullDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String[] names = {<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>};</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> People <span class=\"title\">getPeople</span><span class=\"params\">(String name)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;names.length;i++) {</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(names[i].equalsIgnoreCase(name)){</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RealPeople(name);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NullPeople();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        People a = getPeople(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">        People b = getPeople(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">        People c = getPeople(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">        People d = getPeople(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(a.getName());</span><br><span class=\"line\">        System.out.println(b.getName());</span><br><span class=\"line\">        System.out.println(c.getName());</span><br><span class=\"line\">        System.out.println(d.getName());</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br><span class=\"line\">non-existent</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>空对象模式就是对于不存在的值，单独进行封装，如果返回为null，我们在最开始就做好null值的处理。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"空对象模式\"><a href=\"#空对象模式\" class=\"headerlink\" title=\"空对象模式\"></a>空对象模式</h1><blockquote>\n<p>在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。</p>\n<p>在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>新建一个people的抽象类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.nullObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分别创建两个对象，一个存在的，一个不存在的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.nullObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealPeople</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RealPeople</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.nullObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NullPeople</span> <span class=\"keyword\">extends</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;non-existent&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.nullObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NullDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String[] names = &#123;<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> People <span class=\"title\">getPeople</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;names.length;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(names[i].equalsIgnoreCase(name))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RealPeople(name);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NullPeople();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        People a = getPeople(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        People b = getPeople(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        People c = getPeople(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        People d = getPeople(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(a.getName());</span><br><span class=\"line\">        System.out.println(b.getName());</span><br><span class=\"line\">        System.out.println(c.getName());</span><br><span class=\"line\">        System.out.println(d.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br><span class=\"line\">non-existent</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>空对象模式就是对于不存在的值，单独进行封装，如果返回为null，我们在最开始就做好null值的处理。</p>\n</blockquote>\n"},{"title":"策略模式","date":"2020-11-06T02:06:41.000Z","_content":"\n# 策略模式\n\n>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。\n>\n>与状态模式的比较\n>\n>状态模式的类图和策略模式类似，并且都是能够动态改变对象的行为。但是状态模式是通过状态转移来改变 People 所组合的 State 对象，而策略模式是通过 Num 本身的决策来改变组合的 Strategy 对象。所谓的状态转移，是指 People 在运行过程中由于一些条件发生改变而使得 State 对象发生改变，注意必须要是在运行过程中。\n>\n>状态模式主要是用来解决状态转移的问题，当状态发生转移了，那么 People 对象就会改变它的行为；而策略模式主要是用来封装一组可以互相替代的算法族，并且可以根据需要动态地去替换 People 使用的算法。\n\n##### 示例演示：\n\n1. 创建一个策略接口\n\n   ```java\n   package test.strategy;\n   \n   public interface Strategy {\n   \n       public int execute(int num1, int num2);\n   \n   }\n   ```\n\n2. 分别写一个加法，一个减法的具体实现类\n\n   ```java\n   package test.strategy;\n   \n   public class Add implements Strategy {\n   \n       @Override\n       public int execute(int num1, int num2) {\n           return num1 + num2;\n       }\n   }\n   ```\n\n   ```java\n   package test.strategy;\n   \n   public class Subtract implements Strategy {\n   \n       @Override\n       public int execute(int num1, int num2) {\n           return num1 - num2;\n       }\n   }\n   ```\n\n3. 编写Num具体类\n\n   ```java\n   package test.strategy;\n   \n   public class Num {\n       private Strategy strategy;\n   \n       public void SetStrategy(Strategy strategy) {\n           this.strategy = strategy;\n       }\n   \n       public int execute(int num1, int num2) {\n           return strategy.execute(num1, num2);\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.strategy;\n   \n   public class StrategyDemo {\n       public static void main(String[] args) {\n           Num num = new Num();\n           num.SetStrategy(new Add());\n           System.out.println(\"10+6=\" + num.execute(10, 6));\n           num.SetStrategy(new Subtract());\n           System.out.println(\"10-6=\" + num.execute(10, 6));\n       }\n   }\n   ```\n\n   演示结果：\n\n   ```java\n   10+6=16\n   10-6=4\n   ```\n\n##### 说明：\n\n>**优点：** 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。\n>\n>**缺点：** 1、策略类会增多。 2、所有策略类都需要对外暴露。","source":"_posts/策略模式.md","raw":"---\ntitle: 策略模式\ndate: 2020-11-06 10:06:41\ntags:\n- java\n- 设计模式\n---\n\n# 策略模式\n\n>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。\n>\n>与状态模式的比较\n>\n>状态模式的类图和策略模式类似，并且都是能够动态改变对象的行为。但是状态模式是通过状态转移来改变 People 所组合的 State 对象，而策略模式是通过 Num 本身的决策来改变组合的 Strategy 对象。所谓的状态转移，是指 People 在运行过程中由于一些条件发生改变而使得 State 对象发生改变，注意必须要是在运行过程中。\n>\n>状态模式主要是用来解决状态转移的问题，当状态发生转移了，那么 People 对象就会改变它的行为；而策略模式主要是用来封装一组可以互相替代的算法族，并且可以根据需要动态地去替换 People 使用的算法。\n\n##### 示例演示：\n\n1. 创建一个策略接口\n\n   ```java\n   package test.strategy;\n   \n   public interface Strategy {\n   \n       public int execute(int num1, int num2);\n   \n   }\n   ```\n\n2. 分别写一个加法，一个减法的具体实现类\n\n   ```java\n   package test.strategy;\n   \n   public class Add implements Strategy {\n   \n       @Override\n       public int execute(int num1, int num2) {\n           return num1 + num2;\n       }\n   }\n   ```\n\n   ```java\n   package test.strategy;\n   \n   public class Subtract implements Strategy {\n   \n       @Override\n       public int execute(int num1, int num2) {\n           return num1 - num2;\n       }\n   }\n   ```\n\n3. 编写Num具体类\n\n   ```java\n   package test.strategy;\n   \n   public class Num {\n       private Strategy strategy;\n   \n       public void SetStrategy(Strategy strategy) {\n           this.strategy = strategy;\n       }\n   \n       public int execute(int num1, int num2) {\n           return strategy.execute(num1, num2);\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.strategy;\n   \n   public class StrategyDemo {\n       public static void main(String[] args) {\n           Num num = new Num();\n           num.SetStrategy(new Add());\n           System.out.println(\"10+6=\" + num.execute(10, 6));\n           num.SetStrategy(new Subtract());\n           System.out.println(\"10-6=\" + num.execute(10, 6));\n       }\n   }\n   ```\n\n   演示结果：\n\n   ```java\n   10+6=16\n   10-6=4\n   ```\n\n##### 说明：\n\n>**优点：** 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。\n>\n>**缺点：** 1、策略类会增多。 2、所有策略类都需要对外暴露。","slug":"策略模式","published":1,"updated":"2020-11-06T02:18:20.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wr001hrcwo81e2d31n","content":"<h1 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h1><blockquote>\n<p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p>\n<p>与状态模式的比较</p>\n<p>状态模式的类图和策略模式类似，并且都是能够动态改变对象的行为。但是状态模式是通过状态转移来改变 People 所组合的 State 对象，而策略模式是通过 Num 本身的决策来改变组合的 Strategy 对象。所谓的状态转移，是指 People 在运行过程中由于一些条件发生改变而使得 State 对象发生改变，注意必须要是在运行过程中。</p>\n<p>状态模式主要是用来解决状态转移的问题，当状态发生转移了，那么 People 对象就会改变它的行为；而策略模式主要是用来封装一组可以互相替代的算法族，并且可以根据需要动态地去替换 People 使用的算法。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>创建一个策略接口</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.strategy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Strategy</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">execute</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>分别写一个加法，一个减法的具体实现类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.strategy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Add</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">execute</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.strategy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subtract</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">execute</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>编写Num具体类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.strategy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Num</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Strategy strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetStrategy</span><span class=\"params\">(Strategy strategy)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.strategy = strategy;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">execute</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strategy.execute(num1, num2);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.strategy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        Num num = <span class=\"keyword\">new</span> Num();</span><br><span class=\"line\">        num.SetStrategy(<span class=\"keyword\">new</span> Add());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"10+6=\"</span> + num.execute(<span class=\"number\">10</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\">        num.SetStrategy(<span class=\"keyword\">new</span> Subtract());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"10-6=\"</span> + num.execute(<span class=\"number\">10</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>演示结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span>+<span class=\"number\">6</span>=<span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"number\">10</span>-<span class=\"number\">6</span>=<span class=\"number\">4</span></span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。</p>\n<p><strong>缺点：</strong> 1、策略类会增多。 2、所有策略类都需要对外暴露。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h1><blockquote>\n<p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p>\n<p>与状态模式的比较</p>\n<p>状态模式的类图和策略模式类似，并且都是能够动态改变对象的行为。但是状态模式是通过状态转移来改变 People 所组合的 State 对象，而策略模式是通过 Num 本身的决策来改变组合的 Strategy 对象。所谓的状态转移，是指 People 在运行过程中由于一些条件发生改变而使得 State 对象发生改变，注意必须要是在运行过程中。</p>\n<p>状态模式主要是用来解决状态转移的问题，当状态发生转移了，那么 People 对象就会改变它的行为；而策略模式主要是用来封装一组可以互相替代的算法族，并且可以根据需要动态地去替换 People 使用的算法。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>创建一个策略接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.strategy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">execute</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分别写一个加法，一个减法的具体实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.strategy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Add</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">execute</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.strategy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subtract</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">execute</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写Num具体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.strategy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Num</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Strategy strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetStrategy</span><span class=\"params\">(Strategy strategy)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.strategy = strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">execute</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strategy.execute(num1, num2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.strategy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Num num = <span class=\"keyword\">new</span> Num();</span><br><span class=\"line\">        num.SetStrategy(<span class=\"keyword\">new</span> Add());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;10+6=&quot;</span> + num.execute(<span class=\"number\">10</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\">        num.SetStrategy(<span class=\"keyword\">new</span> Subtract());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;10-6=&quot;</span> + num.execute(<span class=\"number\">10</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>演示结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span>+<span class=\"number\">6</span>=<span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"number\">10</span>-<span class=\"number\">6</span>=<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。</p>\n<p><strong>缺点：</strong> 1、策略类会增多。 2、所有策略类都需要对外暴露。</p>\n</blockquote>\n"},{"title":"装饰器模式","date":"2020-10-31T01:58:46.000Z","_content":"\n# 装饰器模式\n\n>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。\n>\n>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。\n>\n>我们通过下面的实例来演示装饰器模式的用法。\n\n##### 示例演示\n\n1. 我们定义一个生物接口，生物接口中有一个说话的功能。\n\n   ```java\n   package test.decorator;\n   \n   /**\n    * 所有生物的标识\n    */\n   public interface Organism {\n       //所有生物共有的一个功能，有自己的沟通方式\n       void say();\n   }\n   ```\n\n   \n\n2. 定义一个人类实体类，让他具有生物的性质。\n\n   ```java\n   package test.decorator;\n   \n   public class People implements Organism{\n   \n       @Override\n       public void say() {\n           System.out.println(\"people say\");\n       }\n   }\n   ```\n\n   \n\n3. 接下来，重点来了，我们要对这个生物的接口进行拓展，但是其是一个原始属性的接口，所以我们定义一个抽象类，来装饰这个接口。\n\n   ```java\n   package test.decorator;\n   \n   public class OrganismDecorator implements Organism {\n       protected Organism organism;\n   \n       public OrganismDecorator(Organism organism) {\n           this.organism = organism;\n       }\n   \n       public void say() {\n           organism.say();\n       }\n   \n   }\n   ```\n\n4. 现在我们再对这个接口进行实际拓展，比如可以说中文，也可以说英文。\n\n   ```java\n   package test.decorator;\n   \n   public class ChineseOrganismDecorator extends OrganismDecorator{\n       public ChineseOrganismDecorator(Organism organism) {\n           super(organism);\n       }\n   \n       @Override\n       public void say(){\n           organism.say();\n           this.language(organism);\n       }\n   \n       private void language(Organism organism){\n           System.out.println(\"say Chinese\");\n       }\n   }\n   ```\n\n   ```java\n   package test.decorator;\n   \n   public class EnglishOrganismDecorator extends OrganismDecorator {\n       public EnglishOrganismDecorator(Organism organism) {\n           super(organism);\n       }\n   \n       @Override\n       public void say() {\n           organism.say();\n           this.language(organism);\n       }\n   \n       private void language(Organism organism) {\n           System.out.println(\"say English\");\n       }\n   }\n   ```\n\n5. 完成上面的步骤，我们的接口拓展就完成了，这时候我们演示一下这个接口，让某个人同时可以说中文和英文。\n\n   ```java\n   package test.decorator;\n   \n   public class DecoratorDemo {\n       public static void main(String[] args) {\n           Organism people = new People();\n   \n           OrganismDecorator speak = new OrganismDecorator(people);\n   \n           ChineseOrganismDecorator chinese = new ChineseOrganismDecorator(speak);\n           EnglishOrganismDecorator english = new EnglishOrganismDecorator(chinese);\n           english.say();\n   \n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   people say\n   say Chinese\n   say English\n   ```\n\n   \n\n6. 我们也可以接着创建一个动物，动物也有自己说话的方式。\n\n   ```java\n   package test.decorator;\n   \n   public class Animal implements Organism{\n   \n       @Override\n       public void say() {\n           System.out.println(\"animal say\");\n       }\n   }\n   ```\n\n   ```java\n   package test.decorator;\n   \n   public class AnimalOrganismDecorator extends OrganismDecorator {\n       public AnimalOrganismDecorator(Organism organism) {\n           super(organism);\n       }\n   \n       @Override\n       public void say() {\n           organism.say();\n           this.language(organism);\n       }\n   \n       private void language(Organism organism) {\n           System.out.println(\"say animal\");\n       }\n   }\n   ```\n\n7. 实例化动物，让其有Organism的属性，但是有自己独特的说话方式\n\n   ```java\n   package test.decorator;\n   \n   public class DecoratorDemo {\n       public static void main(String[] args) {\n   \n           Organism animal = new Animal();\n           OrganismDecorator animalSpeak = new OrganismDecorator(animal);\n           AnimalOrganismDecorator animLan = new AnimalOrganismDecorator(animalSpeak);\n           animLan.say();\n   \n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   animal say\n   say animal\n   ```\n\n   ##### 说明\n\n   >以上就是装饰器模式，这种模式的出现是为了更好的拓展功能，而尽可能的减小原结构的改造，各个类都可以独立发展，互相不耦合；缺点就是随着功能的多样化，子类会变得越来越复杂。","source":"_posts/装饰器模式.md","raw":"---\n\ntitle: 装饰器模式\ndate: 2020-10-31 09:58:46\ntags:\n- java\n- 设计模式\n---\n\n# 装饰器模式\n\n>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。\n>\n>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。\n>\n>我们通过下面的实例来演示装饰器模式的用法。\n\n##### 示例演示\n\n1. 我们定义一个生物接口，生物接口中有一个说话的功能。\n\n   ```java\n   package test.decorator;\n   \n   /**\n    * 所有生物的标识\n    */\n   public interface Organism {\n       //所有生物共有的一个功能，有自己的沟通方式\n       void say();\n   }\n   ```\n\n   \n\n2. 定义一个人类实体类，让他具有生物的性质。\n\n   ```java\n   package test.decorator;\n   \n   public class People implements Organism{\n   \n       @Override\n       public void say() {\n           System.out.println(\"people say\");\n       }\n   }\n   ```\n\n   \n\n3. 接下来，重点来了，我们要对这个生物的接口进行拓展，但是其是一个原始属性的接口，所以我们定义一个抽象类，来装饰这个接口。\n\n   ```java\n   package test.decorator;\n   \n   public class OrganismDecorator implements Organism {\n       protected Organism organism;\n   \n       public OrganismDecorator(Organism organism) {\n           this.organism = organism;\n       }\n   \n       public void say() {\n           organism.say();\n       }\n   \n   }\n   ```\n\n4. 现在我们再对这个接口进行实际拓展，比如可以说中文，也可以说英文。\n\n   ```java\n   package test.decorator;\n   \n   public class ChineseOrganismDecorator extends OrganismDecorator{\n       public ChineseOrganismDecorator(Organism organism) {\n           super(organism);\n       }\n   \n       @Override\n       public void say(){\n           organism.say();\n           this.language(organism);\n       }\n   \n       private void language(Organism organism){\n           System.out.println(\"say Chinese\");\n       }\n   }\n   ```\n\n   ```java\n   package test.decorator;\n   \n   public class EnglishOrganismDecorator extends OrganismDecorator {\n       public EnglishOrganismDecorator(Organism organism) {\n           super(organism);\n       }\n   \n       @Override\n       public void say() {\n           organism.say();\n           this.language(organism);\n       }\n   \n       private void language(Organism organism) {\n           System.out.println(\"say English\");\n       }\n   }\n   ```\n\n5. 完成上面的步骤，我们的接口拓展就完成了，这时候我们演示一下这个接口，让某个人同时可以说中文和英文。\n\n   ```java\n   package test.decorator;\n   \n   public class DecoratorDemo {\n       public static void main(String[] args) {\n           Organism people = new People();\n   \n           OrganismDecorator speak = new OrganismDecorator(people);\n   \n           ChineseOrganismDecorator chinese = new ChineseOrganismDecorator(speak);\n           EnglishOrganismDecorator english = new EnglishOrganismDecorator(chinese);\n           english.say();\n   \n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   people say\n   say Chinese\n   say English\n   ```\n\n   \n\n6. 我们也可以接着创建一个动物，动物也有自己说话的方式。\n\n   ```java\n   package test.decorator;\n   \n   public class Animal implements Organism{\n   \n       @Override\n       public void say() {\n           System.out.println(\"animal say\");\n       }\n   }\n   ```\n\n   ```java\n   package test.decorator;\n   \n   public class AnimalOrganismDecorator extends OrganismDecorator {\n       public AnimalOrganismDecorator(Organism organism) {\n           super(organism);\n       }\n   \n       @Override\n       public void say() {\n           organism.say();\n           this.language(organism);\n       }\n   \n       private void language(Organism organism) {\n           System.out.println(\"say animal\");\n       }\n   }\n   ```\n\n7. 实例化动物，让其有Organism的属性，但是有自己独特的说话方式\n\n   ```java\n   package test.decorator;\n   \n   public class DecoratorDemo {\n       public static void main(String[] args) {\n   \n           Organism animal = new Animal();\n           OrganismDecorator animalSpeak = new OrganismDecorator(animal);\n           AnimalOrganismDecorator animLan = new AnimalOrganismDecorator(animalSpeak);\n           animLan.say();\n   \n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   animal say\n   say animal\n   ```\n\n   ##### 说明\n\n   >以上就是装饰器模式，这种模式的出现是为了更好的拓展功能，而尽可能的减小原结构的改造，各个类都可以独立发展，互相不耦合；缺点就是随着功能的多样化，子类会变得越来越复杂。","slug":"装饰器模式","published":1,"updated":"2020-11-03T02:05:57.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wr001jrcwob1wm0ru8","content":"<h1 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h1><blockquote>\n<p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p>\n<p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p>\n<p>我们通过下面的实例来演示装饰器模式的用法。</p>\n</blockquote>\n<h5 id=\"示例演示\"><a href=\"#示例演示\" class=\"headerlink\" title=\"示例演示\"></a>示例演示</h5><ol>\n<li><p>我们定义一个生物接口，生物接口中有一个说话的功能。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有生物的标识</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Organism</span> </span>{</span><br><span class=\"line\">    <span class=\"comment\">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>定义一个人类实体类，让他具有生物的性质。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span></span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"people say\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>接下来，重点来了，我们要对这个生物的接口进行拓展，但是其是一个原始属性的接口，所以我们定义一个抽象类，来装饰这个接口。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrganismDecorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Organism organism;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OrganismDecorator</span><span class=\"params\">(Organism organism)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.organism = organism;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        organism.say();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>现在我们再对这个接口进行实际拓展，比如可以说中文，也可以说英文。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChineseOrganismDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">OrganismDecorator</span></span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChineseOrganismDecorator</span><span class=\"params\">(Organism organism)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(organism);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">        organism.say();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.language(organism);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">language</span><span class=\"params\">(Organism organism)</span></span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"say Chinese\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnglishOrganismDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">OrganismDecorator</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EnglishOrganismDecorator</span><span class=\"params\">(Organism organism)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(organism);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        organism.say();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.language(organism);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">language</span><span class=\"params\">(Organism organism)</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"say English\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上面的步骤，我们的接口拓展就完成了，这时候我们演示一下这个接口，让某个人同时可以说中文和英文。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        Organism people = <span class=\"keyword\">new</span> People();</span><br><span class=\"line\"></span><br><span class=\"line\">        OrganismDecorator speak = <span class=\"keyword\">new</span> OrganismDecorator(people);</span><br><span class=\"line\"></span><br><span class=\"line\">        ChineseOrganismDecorator chinese = <span class=\"keyword\">new</span> ChineseOrganismDecorator(speak);</span><br><span class=\"line\">        EnglishOrganismDecorator english = <span class=\"keyword\">new</span> EnglishOrganismDecorator(chinese);</span><br><span class=\"line\">        english.say();</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">people say</span><br><span class=\"line\">say Chinese</span><br><span class=\"line\">say English</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"6\">\n<li><p>我们也可以接着创建一个动物，动物也有自己说话的方式。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span></span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"animal say\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalOrganismDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">OrganismDecorator</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AnimalOrganismDecorator</span><span class=\"params\">(Organism organism)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(organism);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        organism.say();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.language(organism);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">language</span><span class=\"params\">(Organism organism)</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"say animal\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>实例化动物，让其有Organism的属性，但是有自己独特的说话方式</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">        Organism animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">        OrganismDecorator animalSpeak = <span class=\"keyword\">new</span> OrganismDecorator(animal);</span><br><span class=\"line\">        AnimalOrganismDecorator animLan = <span class=\"keyword\">new</span> AnimalOrganismDecorator(animalSpeak);</span><br><span class=\"line\">        animLan.say();</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animal say</span><br><span class=\"line\">say animal</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h5><blockquote>\n<p>以上就是装饰器模式，这种模式的出现是为了更好的拓展功能，而尽可能的减小原结构的改造，各个类都可以独立发展，互相不耦合；缺点就是随着功能的多样化，子类会变得越来越复杂。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h1><blockquote>\n<p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p>\n<p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p>\n<p>我们通过下面的实例来演示装饰器模式的用法。</p>\n</blockquote>\n<h5 id=\"示例演示\"><a href=\"#示例演示\" class=\"headerlink\" title=\"示例演示\"></a>示例演示</h5><ol>\n<li><p>我们定义一个生物接口，生物接口中有一个说话的功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有生物的标识</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Organism</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>定义一个人类实体类，让他具有生物的性质。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;people say&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>接下来，重点来了，我们要对这个生物的接口进行拓展，但是其是一个原始属性的接口，所以我们定义一个抽象类，来装饰这个接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrganismDecorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Organism organism;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OrganismDecorator</span><span class=\"params\">(Organism organism)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.organism = organism;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        organism.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>现在我们再对这个接口进行实际拓展，比如可以说中文，也可以说英文。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChineseOrganismDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">OrganismDecorator</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChineseOrganismDecorator</span><span class=\"params\">(Organism organism)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(organism);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        organism.say();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.language(organism);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">language</span><span class=\"params\">(Organism organism)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;say Chinese&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnglishOrganismDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">OrganismDecorator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EnglishOrganismDecorator</span><span class=\"params\">(Organism organism)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(organism);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        organism.say();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.language(organism);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">language</span><span class=\"params\">(Organism organism)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;say English&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上面的步骤，我们的接口拓展就完成了，这时候我们演示一下这个接口，让某个人同时可以说中文和英文。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Organism people = <span class=\"keyword\">new</span> People();</span><br><span class=\"line\"></span><br><span class=\"line\">        OrganismDecorator speak = <span class=\"keyword\">new</span> OrganismDecorator(people);</span><br><span class=\"line\"></span><br><span class=\"line\">        ChineseOrganismDecorator chinese = <span class=\"keyword\">new</span> ChineseOrganismDecorator(speak);</span><br><span class=\"line\">        EnglishOrganismDecorator english = <span class=\"keyword\">new</span> EnglishOrganismDecorator(chinese);</span><br><span class=\"line\">        english.say();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">people say</span><br><span class=\"line\">say Chinese</span><br><span class=\"line\">say English</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"6\">\n<li><p>我们也可以接着创建一个动物，动物也有自己说话的方式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;animal say&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalOrganismDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">OrganismDecorator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AnimalOrganismDecorator</span><span class=\"params\">(Organism organism)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(organism);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        organism.say();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.language(organism);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">language</span><span class=\"params\">(Organism organism)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;say animal&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例化动物，让其有Organism的属性，但是有自己独特的说话方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.decorator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Organism animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">        OrganismDecorator animalSpeak = <span class=\"keyword\">new</span> OrganismDecorator(animal);</span><br><span class=\"line\">        AnimalOrganismDecorator animLan = <span class=\"keyword\">new</span> AnimalOrganismDecorator(animalSpeak);</span><br><span class=\"line\">        animLan.say();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animal say</span><br><span class=\"line\">say animal</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h5><blockquote>\n<p>以上就是装饰器模式，这种模式的出现是为了更好的拓展功能，而尽可能的减小原结构的改造，各个类都可以独立发展，互相不耦合；缺点就是随着功能的多样化，子类会变得越来越复杂。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"组合模式","date":"2020-11-03T08:38:27.000Z","_content":"\n# 组合模式\n\n>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。\n>\n>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。\n\n##### 示例演示：\n\n1. 创建一个people实体类，让这个实体类里面依然包含people的对象集合\n\n   ```java\n   package test.composite;\n   \n   import lombok.Data;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   @Data\n   public class People {\n       private Integer id;\n       private String name;\n   \n       private List<People> peoples;\n   \n       public People(Integer id, String name) {\n           this.id = id;\n           this.name = name;\n           peoples = new ArrayList<>();\n       }\n   \n       public void add(People people) {\n           peoples.add(people);\n       }\n   }\n   ```\n\n2. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.composite;\n   \n   public class CompositeDemo {\n       public static void main(String[] args) {\n            People people = new People(1,\"1\");\n            People people2 = new People(2,\"2\");\n            People people3 = new People(3,\"3\");\n            People people4 = new People(4,\"4\");\n   \n           people.add(people2);\n           people.add(people3);\n           people.add(people4);\n   \n           System.out.println(people.toString());\n   \n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   People(id=1, name=1, peoples=[People(id=2, name=2, peoples=[]), People(id=3, name=3, peoples=[]), People(id=4, name=4, peoples=[])])\n   ```\n\n   ##### 说明：\n\n   >1、组合模式，就是在一个对象中包含其他对象，这些被包含的对象可能是终点对象（不再包含别的对象），也有可能是非终点对象（其内部还包含其他对象，或叫组对象），我们将对象称为节点，即一个根节点包含许多子节点，这些子节点有的不再包含子节点，而有的仍然包含子节点，以此类推。\n   >\n   >2、所谓组合模式，其实说的是对象包含对象的问题，通过组合的方式（在对象内部引用对象）来进行布局，我认为这种组合是区别于继承的，而另一层含义是指树形结构子节点的抽象（将叶子节点与数枝节点抽象为子节点），区别于普通的分别定义叶子节点与数枝节点的方式。","source":"_posts/组合模式.md","raw":"---\ntitle: 组合模式\ndate: 2020-11-03 16:38:27\ntags:\n- java\n- 设计模式\n---\n\n# 组合模式\n\n>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。\n>\n>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。\n\n##### 示例演示：\n\n1. 创建一个people实体类，让这个实体类里面依然包含people的对象集合\n\n   ```java\n   package test.composite;\n   \n   import lombok.Data;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   @Data\n   public class People {\n       private Integer id;\n       private String name;\n   \n       private List<People> peoples;\n   \n       public People(Integer id, String name) {\n           this.id = id;\n           this.name = name;\n           peoples = new ArrayList<>();\n       }\n   \n       public void add(People people) {\n           peoples.add(people);\n       }\n   }\n   ```\n\n2. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.composite;\n   \n   public class CompositeDemo {\n       public static void main(String[] args) {\n            People people = new People(1,\"1\");\n            People people2 = new People(2,\"2\");\n            People people3 = new People(3,\"3\");\n            People people4 = new People(4,\"4\");\n   \n           people.add(people2);\n           people.add(people3);\n           people.add(people4);\n   \n           System.out.println(people.toString());\n   \n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   People(id=1, name=1, peoples=[People(id=2, name=2, peoples=[]), People(id=3, name=3, peoples=[]), People(id=4, name=4, peoples=[])])\n   ```\n\n   ##### 说明：\n\n   >1、组合模式，就是在一个对象中包含其他对象，这些被包含的对象可能是终点对象（不再包含别的对象），也有可能是非终点对象（其内部还包含其他对象，或叫组对象），我们将对象称为节点，即一个根节点包含许多子节点，这些子节点有的不再包含子节点，而有的仍然包含子节点，以此类推。\n   >\n   >2、所谓组合模式，其实说的是对象包含对象的问题，通过组合的方式（在对象内部引用对象）来进行布局，我认为这种组合是区别于继承的，而另一层含义是指树形结构子节点的抽象（将叶子节点与数枝节点抽象为子节点），区别于普通的分别定义叶子节点与数枝节点的方式。","slug":"组合模式","published":1,"updated":"2020-11-03T08:46:50.720Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44ws001lrcwoffgi5l8d","content":"<h1 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h1><blockquote>\n<p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p>\n<p>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>创建一个people实体类，让这个实体类里面依然包含people的对象集合</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.composite;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;People&gt; peoples;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">(Integer id, String name)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        peoples = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(People people)</span> </span>{</span><br><span class=\"line\">        peoples.add(people);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.composite;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositeDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">         People people = <span class=\"keyword\">new</span> People(<span class=\"number\">1</span>,<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">         People people2 = <span class=\"keyword\">new</span> People(<span class=\"number\">2</span>,<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">         People people3 = <span class=\"keyword\">new</span> People(<span class=\"number\">3</span>,<span class=\"string\">\"3\"</span>);</span><br><span class=\"line\">         People people4 = <span class=\"keyword\">new</span> People(<span class=\"number\">4</span>,<span class=\"string\">\"4\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        people.add(people2);</span><br><span class=\"line\">        people.add(people3);</span><br><span class=\"line\">        people.add(people4);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(people.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">People(id=<span class=\"number\">1</span>, name=<span class=\"number\">1</span>, peoples=[People(id=<span class=\"number\">2</span>, name=<span class=\"number\">2</span>, peoples=[]), People(id=<span class=\"number\">3</span>, name=<span class=\"number\">3</span>, peoples=[]), People(id=<span class=\"number\">4</span>, name=<span class=\"number\">4</span>, peoples=[])])</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>1、组合模式，就是在一个对象中包含其他对象，这些被包含的对象可能是终点对象（不再包含别的对象），也有可能是非终点对象（其内部还包含其他对象，或叫组对象），我们将对象称为节点，即一个根节点包含许多子节点，这些子节点有的不再包含子节点，而有的仍然包含子节点，以此类推。</p>\n<p>2、所谓组合模式，其实说的是对象包含对象的问题，通过组合的方式（在对象内部引用对象）来进行布局，我认为这种组合是区别于继承的，而另一层含义是指树形结构子节点的抽象（将叶子节点与数枝节点抽象为子节点），区别于普通的分别定义叶子节点与数枝节点的方式。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h1><blockquote>\n<p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p>\n<p>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>创建一个people实体类，让这个实体类里面依然包含people的对象集合</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.composite;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;People&gt; peoples;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">(Integer id, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        peoples = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(People people)</span> </span>&#123;</span><br><span class=\"line\">        peoples.add(people);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.composite;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositeDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">         People people = <span class=\"keyword\">new</span> People(<span class=\"number\">1</span>,<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">         People people2 = <span class=\"keyword\">new</span> People(<span class=\"number\">2</span>,<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">         People people3 = <span class=\"keyword\">new</span> People(<span class=\"number\">3</span>,<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">         People people4 = <span class=\"keyword\">new</span> People(<span class=\"number\">4</span>,<span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        people.add(people2);</span><br><span class=\"line\">        people.add(people3);</span><br><span class=\"line\">        people.add(people4);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(people.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">People(id=<span class=\"number\">1</span>, name=<span class=\"number\">1</span>, peoples=[People(id=<span class=\"number\">2</span>, name=<span class=\"number\">2</span>, peoples=[]), People(id=<span class=\"number\">3</span>, name=<span class=\"number\">3</span>, peoples=[]), People(id=<span class=\"number\">4</span>, name=<span class=\"number\">4</span>, peoples=[])])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>1、组合模式，就是在一个对象中包含其他对象，这些被包含的对象可能是终点对象（不再包含别的对象），也有可能是非终点对象（其内部还包含其他对象，或叫组对象），我们将对象称为节点，即一个根节点包含许多子节点，这些子节点有的不再包含子节点，而有的仍然包含子节点，以此类推。</p>\n<p>2、所谓组合模式，其实说的是对象包含对象的问题，通过组合的方式（在对象内部引用对象）来进行布局，我认为这种组合是区别于继承的，而另一层含义是指树形结构子节点的抽象（将叶子节点与数枝节点抽象为子节点），区别于普通的分别定义叶子节点与数枝节点的方式。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"观察者模式","date":"2020-11-05T06:56:41.000Z","_content":"\n# 观察者模式\n\n>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。\n\n##### 示例演示：\n\n1. 我们创建一个观察者的抽象类observer和被观察的对象people\n\n   ```java\n   package test.observer;\n   \n   public abstract class Observer {\n   \n       protected People people;\n   \n       public abstract void update(int status);\n   }\n   ```\n\n   ```java\n   package test.observer;\n   \n   import lombok.Data;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   @Data\n   public class People {\n       private List<Observer> observers = new ArrayList<>();\n   \n       private int status;\n   \n       public void setStatus(int status) {\n           this.status = status;\n           this.notifyAll(status);\n       }\n   \n       public void add(Observer observer) {\n           observers.add(observer);\n       }\n   \n       public void notifyAll(int status) {\n           for (Observer observer : observers) {\n               observer.update(status);\n           }\n       }\n   \n   }\n   ```\n\n2. 创建三个观察者对象\n\n   ```java\n   package test.observer;\n   \n   public class ObserverOne extends Observer {\n       public ObserverOne(People people) {\n           this.people = people;\n           this.people.add(this);\n       }\n   \n       @Override\n       public void update(int status) {\n           System.out.println(\"ObserverOne status change: \" + people.getStatus());\n       }\n   }\n   ```\n\n   ```java\n   package test.observer;\n   \n   public class ObserverTwo extends Observer {\n       public ObserverTwo(People people) {\n           this.people = people;\n           people.add(this);\n       }\n   \n       @Override\n       public void update(int status) {\n           System.out.println(\"ObserverTwo status change: \" + people.getStatus());\n       }\n   }\n   ```\n\n   ```java\n   package test.observer;\n   \n   public class ObserverThree extends Observer {\n       public ObserverThree(People people) {\n           this.people = people;\n           people.add(this);\n       }\n   \n       @Override\n       public void update(int status) {\n           System.out.println(\"ObserverThree status change: \" + people.getStatus());\n       }\n   }\n   ```\n\n3. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.observer;\n   \n   public class ObserverDemo {\n       public static void main(String[] args) {\n           People people = new People();\n           new ObserverOne(people);\n           new ObserverTwo(people);\n           new ObserverThree(people);\n   \n           people.setStatus(1);\n           System.out.println(\"---------------------------------\");\n           people.setStatus(2);\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   ObserverOne status change: 1\n   ObserverTwo status change: 1\n   ObserverThree status change: 1\n   ---------------------------------\n   ObserverOne status change: 2\n   ObserverTwo status change: 2\n   ObserverThree status change: 2\n   ```\n\n##### 说明：\n\n>**优点：** 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。\n>\n>**缺点：** 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。","source":"_posts/观察者模式.md","raw":"---\ntitle: 观察者模式\ndate: 2020-11-05 14:56:41\ntags:\n- java\n- 设计模式\n---\n\n# 观察者模式\n\n>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。\n\n##### 示例演示：\n\n1. 我们创建一个观察者的抽象类observer和被观察的对象people\n\n   ```java\n   package test.observer;\n   \n   public abstract class Observer {\n   \n       protected People people;\n   \n       public abstract void update(int status);\n   }\n   ```\n\n   ```java\n   package test.observer;\n   \n   import lombok.Data;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   @Data\n   public class People {\n       private List<Observer> observers = new ArrayList<>();\n   \n       private int status;\n   \n       public void setStatus(int status) {\n           this.status = status;\n           this.notifyAll(status);\n       }\n   \n       public void add(Observer observer) {\n           observers.add(observer);\n       }\n   \n       public void notifyAll(int status) {\n           for (Observer observer : observers) {\n               observer.update(status);\n           }\n       }\n   \n   }\n   ```\n\n2. 创建三个观察者对象\n\n   ```java\n   package test.observer;\n   \n   public class ObserverOne extends Observer {\n       public ObserverOne(People people) {\n           this.people = people;\n           this.people.add(this);\n       }\n   \n       @Override\n       public void update(int status) {\n           System.out.println(\"ObserverOne status change: \" + people.getStatus());\n       }\n   }\n   ```\n\n   ```java\n   package test.observer;\n   \n   public class ObserverTwo extends Observer {\n       public ObserverTwo(People people) {\n           this.people = people;\n           people.add(this);\n       }\n   \n       @Override\n       public void update(int status) {\n           System.out.println(\"ObserverTwo status change: \" + people.getStatus());\n       }\n   }\n   ```\n\n   ```java\n   package test.observer;\n   \n   public class ObserverThree extends Observer {\n       public ObserverThree(People people) {\n           this.people = people;\n           people.add(this);\n       }\n   \n       @Override\n       public void update(int status) {\n           System.out.println(\"ObserverThree status change: \" + people.getStatus());\n       }\n   }\n   ```\n\n3. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.observer;\n   \n   public class ObserverDemo {\n       public static void main(String[] args) {\n           People people = new People();\n           new ObserverOne(people);\n           new ObserverTwo(people);\n           new ObserverThree(people);\n   \n           people.setStatus(1);\n           System.out.println(\"---------------------------------\");\n           people.setStatus(2);\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   ObserverOne status change: 1\n   ObserverTwo status change: 1\n   ObserverThree status change: 1\n   ---------------------------------\n   ObserverOne status change: 2\n   ObserverTwo status change: 2\n   ObserverThree status change: 2\n   ```\n\n##### 说明：\n\n>**优点：** 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。\n>\n>**缺点：** 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。","slug":"观察者模式","published":1,"updated":"2020-11-05T07:03:42.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wt001nrcwobdzg55su","content":"<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><blockquote>\n<p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们创建一个观察者的抽象类observer和被观察的对象people</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> People people;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Observer&gt; observers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> status;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStatus</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = status;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll(status);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Observer observer)</span> </span>{</span><br><span class=\"line\">        observers.add(observer);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyAll</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Observer observer : observers) {</span><br><span class=\"line\">            observer.update(status);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建三个观察者对象</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ObserverOne</span><span class=\"params\">(People people)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.people = people;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.people.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ObserverOne status change: \"</span> + people.getStatus());</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverTwo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ObserverTwo</span><span class=\"params\">(People people)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.people = people;</span><br><span class=\"line\">        people.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ObserverTwo status change: \"</span> + people.getStatus());</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverThree</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ObserverThree</span><span class=\"params\">(People people)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.people = people;</span><br><span class=\"line\">        people.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ObserverThree status change: \"</span> + people.getStatus());</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        People people = <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ObserverOne(people);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ObserverTwo(people);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ObserverThree(people);</span><br><span class=\"line\"></span><br><span class=\"line\">        people.setStatus(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---------------------------------\"</span>);</span><br><span class=\"line\">        people.setStatus(<span class=\"number\">2</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObserverOne status change: <span class=\"number\">1</span></span><br><span class=\"line\">ObserverTwo status change: <span class=\"number\">1</span></span><br><span class=\"line\">ObserverThree status change: <span class=\"number\">1</span></span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">ObserverOne status change: <span class=\"number\">2</span></span><br><span class=\"line\">ObserverTwo status change: <span class=\"number\">2</span></span><br><span class=\"line\">ObserverThree status change: <span class=\"number\">2</span></span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。</p>\n<p><strong>缺点：</strong> 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><blockquote>\n<p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们创建一个观察者的抽象类observer和被观察的对象people</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> People people;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Observer&gt; observers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> status;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStatus</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = status;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll(status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Observer observer)</span> </span>&#123;</span><br><span class=\"line\">        observers.add(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyAll</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Observer observer : observers) &#123;</span><br><span class=\"line\">            observer.update(status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建三个观察者对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ObserverOne</span><span class=\"params\">(People people)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.people = people;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.people.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ObserverOne status change: &quot;</span> + people.getStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverTwo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ObserverTwo</span><span class=\"params\">(People people)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.people = people;</span><br><span class=\"line\">        people.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ObserverTwo status change: &quot;</span> + people.getStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverThree</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ObserverThree</span><span class=\"params\">(People people)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.people = people;</span><br><span class=\"line\">        people.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ObserverThree status change: &quot;</span> + people.getStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        People people = <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ObserverOne(people);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ObserverTwo(people);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ObserverThree(people);</span><br><span class=\"line\"></span><br><span class=\"line\">        people.setStatus(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------------------------&quot;</span>);</span><br><span class=\"line\">        people.setStatus(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObserverOne status change: <span class=\"number\">1</span></span><br><span class=\"line\">ObserverTwo status change: <span class=\"number\">1</span></span><br><span class=\"line\">ObserverThree status change: <span class=\"number\">1</span></span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">ObserverOne status change: <span class=\"number\">2</span></span><br><span class=\"line\">ObserverTwo status change: <span class=\"number\">2</span></span><br><span class=\"line\">ObserverThree status change: <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。</p>\n<p><strong>缺点：</strong> 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p>\n</blockquote>\n"},{"title":"解释器模式","date":"2020-11-05T02:06:46.000Z","_content":"\n# 解释器模式\n\n> 解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。\n\n##### 示例演示：\n\n1. 创建一个生物接口，并提供一个判断的方法\n\n   ```java\n   package test.interpreter;\n   /**\n    * 所有生物的标识\n    */\n   public interface Organism {\n   \n       public boolean isOrganism(String context);\n   }\n   ```\n\n2. 创建一个people实体类\n\n   ```java\n   package test.interpreter;\n   \n   public class People implements Organism {\n       private String data;\n   \n       public People(String data) {\n           this.data = data;\n       }\n   \n       @Override\n       public boolean isOrganism(String context) {\n           if (context.contains(data)) {\n               return true;\n           }\n           return false;\n       }\n   }\n   ```\n\n3. 分别编写两个判断是否是people的实体，一个是或，一个是且\n\n   ```java\n   package test.interpreter;\n   \n   public class OrPeople implements Organism {\n       private Organism org1 = null;\n       private Organism org2 = null;\n   \n       public OrPeople(Organism org1, Organism org2) {\n           this.org1 = org1;\n           this.org2 = org2;\n       }\n   \n       @Override\n       public boolean isOrganism(String context) {\n           return org1.isOrganism(context) || org2.isOrganism(context);\n       }\n   }\n   ```\n\n   ```java\n   package test.interpreter;\n   \n   public class AndPeople implements Organism {\n       private Organism org1 = null;\n       private Organism org2 = null;\n   \n       public AndPeople(Organism org1, Organism org2) {\n           this.org1 = org1;\n           this.org2 = org2;\n       }\n   \n       @Override\n       public boolean isOrganism(String context) {\n           return org1.isOrganism(context) && org2.isOrganism(context);\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.interpreter;\n   \n   public class InterpreterDemo {\n       public static Organism getOrPeople(){\n           Organism o1 = new People(\"people\");\n           Organism o2 = new People(\"animal\");\n           return new OrPeople(o1,o2);\n       }\n   \n       public static Organism getAndPeople(){\n           Organism o1 = new People(\"people\");\n           Organism o2 = new People(\"animal\");\n           return new AndPeople(o1,o2);\n       }\n   \n       public static void main(String[] args) {\n           Organism orPeople = getOrPeople();\n           Organism andPeople = getAndPeople();\n           System.out.println(\"people or animal is people? \"+orPeople.isOrganism(\"people\"));\n           System.out.println(\"people and animal is people? \"+andPeople.isOrganism(\"people\"));\n       }\n   }\n   ```\n\n   演示结果：\n\n   ```java\n   people or animal is people? true\n   people and animal is people? false\n   ```\n\n##### 说明：\n\n>**优点：** 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。\n>\n>**缺点：** 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。","source":"_posts/解释器模式.md","raw":"---\ntitle: 解释器模式\ndate: 2020-11-05 10:06:46\ntags:\n- java\n- 设计模式\n---\n\n# 解释器模式\n\n> 解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。\n\n##### 示例演示：\n\n1. 创建一个生物接口，并提供一个判断的方法\n\n   ```java\n   package test.interpreter;\n   /**\n    * 所有生物的标识\n    */\n   public interface Organism {\n   \n       public boolean isOrganism(String context);\n   }\n   ```\n\n2. 创建一个people实体类\n\n   ```java\n   package test.interpreter;\n   \n   public class People implements Organism {\n       private String data;\n   \n       public People(String data) {\n           this.data = data;\n       }\n   \n       @Override\n       public boolean isOrganism(String context) {\n           if (context.contains(data)) {\n               return true;\n           }\n           return false;\n       }\n   }\n   ```\n\n3. 分别编写两个判断是否是people的实体，一个是或，一个是且\n\n   ```java\n   package test.interpreter;\n   \n   public class OrPeople implements Organism {\n       private Organism org1 = null;\n       private Organism org2 = null;\n   \n       public OrPeople(Organism org1, Organism org2) {\n           this.org1 = org1;\n           this.org2 = org2;\n       }\n   \n       @Override\n       public boolean isOrganism(String context) {\n           return org1.isOrganism(context) || org2.isOrganism(context);\n       }\n   }\n   ```\n\n   ```java\n   package test.interpreter;\n   \n   public class AndPeople implements Organism {\n       private Organism org1 = null;\n       private Organism org2 = null;\n   \n       public AndPeople(Organism org1, Organism org2) {\n           this.org1 = org1;\n           this.org2 = org2;\n       }\n   \n       @Override\n       public boolean isOrganism(String context) {\n           return org1.isOrganism(context) && org2.isOrganism(context);\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.interpreter;\n   \n   public class InterpreterDemo {\n       public static Organism getOrPeople(){\n           Organism o1 = new People(\"people\");\n           Organism o2 = new People(\"animal\");\n           return new OrPeople(o1,o2);\n       }\n   \n       public static Organism getAndPeople(){\n           Organism o1 = new People(\"people\");\n           Organism o2 = new People(\"animal\");\n           return new AndPeople(o1,o2);\n       }\n   \n       public static void main(String[] args) {\n           Organism orPeople = getOrPeople();\n           Organism andPeople = getAndPeople();\n           System.out.println(\"people or animal is people? \"+orPeople.isOrganism(\"people\"));\n           System.out.println(\"people and animal is people? \"+andPeople.isOrganism(\"people\"));\n       }\n   }\n   ```\n\n   演示结果：\n\n   ```java\n   people or animal is people? true\n   people and animal is people? false\n   ```\n\n##### 说明：\n\n>**优点：** 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。\n>\n>**缺点：** 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。","slug":"解释器模式","published":1,"updated":"2020-11-05T02:11:47.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wt001prcwof66h5b87","content":"<h1 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h1><blockquote>\n<p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>创建一个生物接口，并提供一个判断的方法</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.interpreter;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有生物的标识</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Organism</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOrganism</span><span class=\"params\">(String context)</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建一个people实体类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.interpreter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">(String data)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOrganism</span><span class=\"params\">(String context)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context.contains(data)) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>分别编写两个判断是否是people的实体，一个是或，一个是且</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.interpreter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrPeople</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Organism org1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Organism org2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OrPeople</span><span class=\"params\">(Organism org1, Organism org2)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.org1 = org1;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.org2 = org2;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOrganism</span><span class=\"params\">(String context)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> org1.isOrganism(context) || org2.isOrganism(context);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.interpreter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndPeople</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Organism org1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Organism org2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AndPeople</span><span class=\"params\">(Organism org1, Organism org2)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.org1 = org1;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.org2 = org2;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOrganism</span><span class=\"params\">(String context)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> org1.isOrganism(context) &amp;&amp; org2.isOrganism(context);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.interpreter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterpreterDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Organism <span class=\"title\">getOrPeople</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">        Organism o1 = <span class=\"keyword\">new</span> People(<span class=\"string\">\"people\"</span>);</span><br><span class=\"line\">        Organism o2 = <span class=\"keyword\">new</span> People(<span class=\"string\">\"animal\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OrPeople(o1,o2);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Organism <span class=\"title\">getAndPeople</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">        Organism o1 = <span class=\"keyword\">new</span> People(<span class=\"string\">\"people\"</span>);</span><br><span class=\"line\">        Organism o2 = <span class=\"keyword\">new</span> People(<span class=\"string\">\"animal\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AndPeople(o1,o2);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        Organism orPeople = getOrPeople();</span><br><span class=\"line\">        Organism andPeople = getAndPeople();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"people or animal is people? \"</span>+orPeople.isOrganism(<span class=\"string\">\"people\"</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"people and animal is people? \"</span>+andPeople.isOrganism(<span class=\"string\">\"people\"</span>));</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>演示结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">people or animal is people? <span class=\"keyword\">true</span></span><br><span class=\"line\">people and animal is people? <span class=\"keyword\">false</span></span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。</p>\n<p><strong>缺点：</strong> 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h1><blockquote>\n<p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>创建一个生物接口，并提供一个判断的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.interpreter;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有生物的标识</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Organism</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOrganism</span><span class=\"params\">(String context)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个people实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.interpreter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">(String data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOrganism</span><span class=\"params\">(String context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context.contains(data)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分别编写两个判断是否是people的实体，一个是或，一个是且</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.interpreter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrPeople</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Organism org1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Organism org2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OrPeople</span><span class=\"params\">(Organism org1, Organism org2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.org1 = org1;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.org2 = org2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOrganism</span><span class=\"params\">(String context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> org1.isOrganism(context) || org2.isOrganism(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.interpreter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndPeople</span> <span class=\"keyword\">implements</span> <span class=\"title\">Organism</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Organism org1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Organism org2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AndPeople</span><span class=\"params\">(Organism org1, Organism org2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.org1 = org1;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.org2 = org2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOrganism</span><span class=\"params\">(String context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> org1.isOrganism(context) &amp;&amp; org2.isOrganism(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.interpreter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterpreterDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Organism <span class=\"title\">getOrPeople</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Organism o1 = <span class=\"keyword\">new</span> People(<span class=\"string\">&quot;people&quot;</span>);</span><br><span class=\"line\">        Organism o2 = <span class=\"keyword\">new</span> People(<span class=\"string\">&quot;animal&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OrPeople(o1,o2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Organism <span class=\"title\">getAndPeople</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Organism o1 = <span class=\"keyword\">new</span> People(<span class=\"string\">&quot;people&quot;</span>);</span><br><span class=\"line\">        Organism o2 = <span class=\"keyword\">new</span> People(<span class=\"string\">&quot;animal&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AndPeople(o1,o2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Organism orPeople = getOrPeople();</span><br><span class=\"line\">        Organism andPeople = getAndPeople();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;people or animal is people? &quot;</span>+orPeople.isOrganism(<span class=\"string\">&quot;people&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;people and animal is people? &quot;</span>+andPeople.isOrganism(<span class=\"string\">&quot;people&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>演示结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">people or animal is people? <span class=\"keyword\">true</span></span><br><span class=\"line\">people and animal is people? <span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。</p>\n<p><strong>缺点：</strong> 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。</p>\n</blockquote>\n"},{"title":"设计模式总结","date":"2020-11-06T11:32:04.000Z","_content":"\n![image-20201106193216406](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201106193216406.png?x-oss-process=style/radio93)\n\n![image-20201106193242897](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201106193242897.png?x-oss-process=style/radio93)","source":"_posts/设计模式总结.md","raw":"---\ntitle: 设计模式总结\ndate: 2020-11-06 19:32:04\ntags:\n- java\n- 设计模式\n---\n\n![image-20201106193216406](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201106193216406.png?x-oss-process=style/radio93)\n\n![image-20201106193242897](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201106193242897.png?x-oss-process=style/radio93)","slug":"设计模式总结","published":1,"updated":"2020-11-06T11:32:44.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wu001rrcwo0e6bglin","content":"<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201106193216406.png?x-oss-process=style/radio93\" alt=\"image-20201106193216406\"></p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201106193242897.png?x-oss-process=style/radio93\" alt=\"image-20201106193242897\"></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201106193216406.png?x-oss-process=style/radio93\" alt=\"image-20201106193216406\"></p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201106193242897.png?x-oss-process=style/radio93\" alt=\"image-20201106193242897\"></p>\n"},{"title":"访问者模式","date":"2020-11-06T05:46:39.000Z","_content":"\n# 访问者模式\n\n>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。\n\n##### 示例演示：\n\n1. 定义一个people接口和三个动作的实现类\n\n   ```java\n   package test.visitor;\n   \n   public interface People {\n       void action(PeopleVisitor peopleVisitor);\n   }\n   ```\n\n   ```java\n   package test.visitor;\n   \n   public class PeopleAwake implements People{\n       @Override\n       public void action(PeopleVisitor peopleVisitor) {\n           peopleVisitor.visit(this);\n       }\n   }\n   ```\n\n   ```java\n   package test.visitor;\n   \n   public class PeopleEat implements People{\n       @Override\n       public void action(PeopleVisitor peopleVisitor) {\n           peopleVisitor.visit(this);\n       }\n   }\n   ```\n\n   ```java\n   package test.visitor;\n   \n   public class PeopleSleep implements People{\n       @Override\n       public void action(PeopleVisitor peopleVisitor) {\n           peopleVisitor.visit(this);\n       }\n   }\n   ```\n\n2. 定义一个访问者接口\n\n   ```java\n   package test.visitor;\n   \n   public interface PeopleVisitor {\n   \n       void visit(PeopleAwake peopleAwake);\n   \n       void visit(PeopleEat peopleEat);\n   \n       void visit(PeopleSleep peopleSleep);\n   }\n   ```\n\n3. 新建一个实现了访问者接口的访问者实体类\n\n   ```java\n   package test.visitor;\n   \n   public class PeopleDisplayVisitor implements PeopleVisitor {\n       @Override\n       public void visit(PeopleAwake peopleAwake) {\n           System.out.println(\"peopleAwake...\");\n       }\n   \n       @Override\n       public void visit(PeopleEat peopleEat) {\n           System.out.println(\"peopleEat...\");\n       }\n   \n       @Override\n       public void visit(PeopleSleep peopleSleep) {\n           System.out.println(\"peopleSleep...\");\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.visitor;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   public class VisitorDemo {\n       private static List<People> peoples = new ArrayList<>();\n   \n       static void action(PeopleVisitor peopleVisitor) {\n           peoples.add(new PeopleAwake());\n           peoples.add(new PeopleEat());\n           peoples.add(new PeopleSleep());\n           for (int i = 0; i < peoples.size(); i++) {\n               peoples.get(i).action(peopleVisitor);\n           }\n       }\n   \n       public static void main(String[] args) {\n           action(new PeopleDisplayVisitor());\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   peopleAwake...\n   peopleEat...\n   peopleSleep...\n   ```\n\n##### 说明：\n\n>**优点：** 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。\n>\n>**缺点：** 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。","source":"_posts/访问者模式.md","raw":"---\ntitle: 访问者模式\ndate: 2020-11-06 13:46:39\ntags:\n- java\n- 设计模式\n---\n\n# 访问者模式\n\n>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。\n\n##### 示例演示：\n\n1. 定义一个people接口和三个动作的实现类\n\n   ```java\n   package test.visitor;\n   \n   public interface People {\n       void action(PeopleVisitor peopleVisitor);\n   }\n   ```\n\n   ```java\n   package test.visitor;\n   \n   public class PeopleAwake implements People{\n       @Override\n       public void action(PeopleVisitor peopleVisitor) {\n           peopleVisitor.visit(this);\n       }\n   }\n   ```\n\n   ```java\n   package test.visitor;\n   \n   public class PeopleEat implements People{\n       @Override\n       public void action(PeopleVisitor peopleVisitor) {\n           peopleVisitor.visit(this);\n       }\n   }\n   ```\n\n   ```java\n   package test.visitor;\n   \n   public class PeopleSleep implements People{\n       @Override\n       public void action(PeopleVisitor peopleVisitor) {\n           peopleVisitor.visit(this);\n       }\n   }\n   ```\n\n2. 定义一个访问者接口\n\n   ```java\n   package test.visitor;\n   \n   public interface PeopleVisitor {\n   \n       void visit(PeopleAwake peopleAwake);\n   \n       void visit(PeopleEat peopleEat);\n   \n       void visit(PeopleSleep peopleSleep);\n   }\n   ```\n\n3. 新建一个实现了访问者接口的访问者实体类\n\n   ```java\n   package test.visitor;\n   \n   public class PeopleDisplayVisitor implements PeopleVisitor {\n       @Override\n       public void visit(PeopleAwake peopleAwake) {\n           System.out.println(\"peopleAwake...\");\n       }\n   \n       @Override\n       public void visit(PeopleEat peopleEat) {\n           System.out.println(\"peopleEat...\");\n       }\n   \n       @Override\n       public void visit(PeopleSleep peopleSleep) {\n           System.out.println(\"peopleSleep...\");\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.visitor;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   public class VisitorDemo {\n       private static List<People> peoples = new ArrayList<>();\n   \n       static void action(PeopleVisitor peopleVisitor) {\n           peoples.add(new PeopleAwake());\n           peoples.add(new PeopleEat());\n           peoples.add(new PeopleSleep());\n           for (int i = 0; i < peoples.size(); i++) {\n               peoples.get(i).action(peopleVisitor);\n           }\n       }\n   \n       public static void main(String[] args) {\n           action(new PeopleDisplayVisitor());\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   peopleAwake...\n   peopleEat...\n   peopleSleep...\n   ```\n\n##### 说明：\n\n>**优点：** 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。\n>\n>**缺点：** 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。","slug":"访问者模式","published":1,"updated":"2020-11-06T06:05:22.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wu001trcwo6aqugkgp","content":"<h1 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h1><blockquote>\n<p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>定义一个people接口和三个动作的实现类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.visitor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">(PeopleVisitor peopleVisitor)</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.visitor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleAwake</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span></span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">(PeopleVisitor peopleVisitor)</span> </span>{</span><br><span class=\"line\">        peopleVisitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.visitor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleEat</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span></span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">(PeopleVisitor peopleVisitor)</span> </span>{</span><br><span class=\"line\">        peopleVisitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.visitor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleSleep</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span></span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">(PeopleVisitor peopleVisitor)</span> </span>{</span><br><span class=\"line\">        peopleVisitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>定义一个访问者接口</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.visitor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PeopleVisitor</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PeopleAwake peopleAwake)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PeopleEat peopleEat)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PeopleSleep peopleSleep)</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>新建一个实现了访问者接口的访问者实体类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.visitor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleDisplayVisitor</span> <span class=\"keyword\">implements</span> <span class=\"title\">PeopleVisitor</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PeopleAwake peopleAwake)</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"peopleAwake...\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PeopleEat peopleEat)</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"peopleEat...\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PeopleSleep peopleSleep)</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"peopleSleep...\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.visitor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VisitorDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;People&gt; peoples = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">(PeopleVisitor peopleVisitor)</span> </span>{</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> PeopleAwake());</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> PeopleEat());</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> PeopleSleep());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; peoples.size(); i++) {</span><br><span class=\"line\">            peoples.get(i).action(peopleVisitor);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        action(<span class=\"keyword\">new</span> PeopleDisplayVisitor());</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">peopleAwake...</span><br><span class=\"line\">peopleEat...</span><br><span class=\"line\">peopleSleep...</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。</p>\n<p><strong>缺点：</strong> 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h1><blockquote>\n<p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>定义一个people接口和三个动作的实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.visitor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">(PeopleVisitor peopleVisitor)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.visitor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleAwake</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">(PeopleVisitor peopleVisitor)</span> </span>&#123;</span><br><span class=\"line\">        peopleVisitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.visitor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleEat</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">(PeopleVisitor peopleVisitor)</span> </span>&#123;</span><br><span class=\"line\">        peopleVisitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.visitor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleSleep</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">(PeopleVisitor peopleVisitor)</span> </span>&#123;</span><br><span class=\"line\">        peopleVisitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义一个访问者接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.visitor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PeopleVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PeopleAwake peopleAwake)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PeopleEat peopleEat)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PeopleSleep peopleSleep)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个实现了访问者接口的访问者实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.visitor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleDisplayVisitor</span> <span class=\"keyword\">implements</span> <span class=\"title\">PeopleVisitor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PeopleAwake peopleAwake)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;peopleAwake...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PeopleEat peopleEat)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;peopleEat...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(PeopleSleep peopleSleep)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;peopleSleep...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.visitor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VisitorDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;People&gt; peoples = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">(PeopleVisitor peopleVisitor)</span> </span>&#123;</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> PeopleAwake());</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> PeopleEat());</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> PeopleSleep());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; peoples.size(); i++) &#123;</span><br><span class=\"line\">            peoples.get(i).action(peopleVisitor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        action(<span class=\"keyword\">new</span> PeopleDisplayVisitor());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">peopleAwake...</span><br><span class=\"line\">peopleEat...</span><br><span class=\"line\">peopleSleep...</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。</p>\n<p><strong>缺点：</strong> 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</p>\n</blockquote>\n"},{"title":"过滤器模式","date":"2020-11-03T07:31:54.000Z","_content":"\n# 过滤器模式\n\n> 过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。\n\n##### 示例演示：\n\n1. 我们创建一个people实体\n\n   ```java\n   package test.filter;\n   \n   import lombok.Data;\n   \n   @Data\n   public class People {\n   \n       private Integer id;\n       private String name;\n   \n       public People(Integer id, String name) {\n           this.id = id;\n           this.name = name;\n       }\n   }\n   ```\n\n2. 创建一个peopleId的接口，用于通过id对people分组\n\n   ```java\n   package test.filter;\n   \n   import java.util.List;\n   \n   public interface PeopleId {\n       public List<People> group(List<People> peoples);\n   }\n   ```\n\n3. 接下来我们按照奇偶对id进行分类，我们创建两个实现类分班对group进行实现\n\n   ```java\n   package test.filter;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   public class OddPeople implements PeopleId {\n       @Override\n       public List<People> group(List<People> peoples) {\n           List<People> oddPeoples = new ArrayList<>();\n           for (People people : peoples) {\n               if (people.getId() % 2 != 0) {\n                   oddPeoples.add(people);\n               }\n           }\n           return oddPeoples;\n       }\n   }\n   ```\n\n   ```java\n   package test.filter;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   public class EvenPeople implements PeopleId {\n       @Override\n       public List<People> group(List<People> peoples) {\n           List<People> evenPeoples = new ArrayList<>();\n           for (People people : peoples) {\n               if (people.getId() % 2 == 0) {\n                   evenPeoples.add(people);\n               }\n           }\n           return evenPeoples;\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.filter;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   public class FilterDemo {\n       public static void main(String[] args) {\n           List<People> peoples = new ArrayList<>();\n   \n           peoples.add(new People(1,\"1\"));\n           peoples.add(new People(2,\"2\"));\n           peoples.add(new People(3,\"3\"));\n           peoples.add(new People(4,\"4\"));\n           peoples.add(new People(5,\"5\"));\n           peoples.add(new People(6,\"6\"));\n           peoples.add(new People(7,\"7\"));\n           peoples.add(new People(8,\"8\"));\n           peoples.add(new People(9,\"9\"));\n           peoples.add(new People(10,\"10\"));\n   \n           PeopleId oddPeople = new OddPeople();\n           System.out.println(oddPeople.group(peoples).toString());\n   \n           PeopleId evenPeople = new EvenPeople();\n           System.out.println(evenPeople.group(peoples).toString());\n   \n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   [People(id=1, name=1), People(id=3, name=3), People(id=5, name=5), People(id=7, name=7), People(id=9, name=9)]\n   [People(id=2, name=2), People(id=4, name=4), People(id=6, name=6), People(id=8, name=8), People(id=10, name=10)]\n   ```\n\n   ##### 说明：\n\n   > 过滤器模式就是我们对一组对象进行过滤，java8提供了里面就提供了很多方法来过滤数据，比如刚才的按照奇偶分类我们就可以直接使用java8提供的方法：\n\n   ```java\n    Map<Integer, List<People>> groupList = peoples.stream().collect(Collectors.groupingBy(c -> c.getId()%2));\n   ```\n\n","source":"_posts/过滤器模式.md","raw":"---\ntitle: 过滤器模式\ndate: 2020-11-03 15:31:54\ntags:\n- java\n- 设计模式\n---\n\n# 过滤器模式\n\n> 过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。\n\n##### 示例演示：\n\n1. 我们创建一个people实体\n\n   ```java\n   package test.filter;\n   \n   import lombok.Data;\n   \n   @Data\n   public class People {\n   \n       private Integer id;\n       private String name;\n   \n       public People(Integer id, String name) {\n           this.id = id;\n           this.name = name;\n       }\n   }\n   ```\n\n2. 创建一个peopleId的接口，用于通过id对people分组\n\n   ```java\n   package test.filter;\n   \n   import java.util.List;\n   \n   public interface PeopleId {\n       public List<People> group(List<People> peoples);\n   }\n   ```\n\n3. 接下来我们按照奇偶对id进行分类，我们创建两个实现类分班对group进行实现\n\n   ```java\n   package test.filter;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   public class OddPeople implements PeopleId {\n       @Override\n       public List<People> group(List<People> peoples) {\n           List<People> oddPeoples = new ArrayList<>();\n           for (People people : peoples) {\n               if (people.getId() % 2 != 0) {\n                   oddPeoples.add(people);\n               }\n           }\n           return oddPeoples;\n       }\n   }\n   ```\n\n   ```java\n   package test.filter;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   public class EvenPeople implements PeopleId {\n       @Override\n       public List<People> group(List<People> peoples) {\n           List<People> evenPeoples = new ArrayList<>();\n           for (People people : peoples) {\n               if (people.getId() % 2 == 0) {\n                   evenPeoples.add(people);\n               }\n           }\n           return evenPeoples;\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.filter;\n   \n   import java.util.ArrayList;\n   import java.util.List;\n   \n   public class FilterDemo {\n       public static void main(String[] args) {\n           List<People> peoples = new ArrayList<>();\n   \n           peoples.add(new People(1,\"1\"));\n           peoples.add(new People(2,\"2\"));\n           peoples.add(new People(3,\"3\"));\n           peoples.add(new People(4,\"4\"));\n           peoples.add(new People(5,\"5\"));\n           peoples.add(new People(6,\"6\"));\n           peoples.add(new People(7,\"7\"));\n           peoples.add(new People(8,\"8\"));\n           peoples.add(new People(9,\"9\"));\n           peoples.add(new People(10,\"10\"));\n   \n           PeopleId oddPeople = new OddPeople();\n           System.out.println(oddPeople.group(peoples).toString());\n   \n           PeopleId evenPeople = new EvenPeople();\n           System.out.println(evenPeople.group(peoples).toString());\n   \n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   [People(id=1, name=1), People(id=3, name=3), People(id=5, name=5), People(id=7, name=7), People(id=9, name=9)]\n   [People(id=2, name=2), People(id=4, name=4), People(id=6, name=6), People(id=8, name=8), People(id=10, name=10)]\n   ```\n\n   ##### 说明：\n\n   > 过滤器模式就是我们对一组对象进行过滤，java8提供了里面就提供了很多方法来过滤数据，比如刚才的按照奇偶分类我们就可以直接使用java8提供的方法：\n\n   ```java\n    Map<Integer, List<People>> groupList = peoples.stream().collect(Collectors.groupingBy(c -> c.getId()%2));\n   ```\n\n","slug":"过滤器模式","published":1,"updated":"2020-11-03T08:22:58.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wv001vrcwodc8qc1l0","content":"<h1 id=\"过滤器模式\"><a href=\"#过滤器模式\" class=\"headerlink\" title=\"过滤器模式\"></a>过滤器模式</h1><blockquote>\n<p>过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们创建一个people实体</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">(Integer id, String name)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建一个peopleId的接口，用于通过id对people分组</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PeopleId</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;People&gt; <span class=\"title\">group</span><span class=\"params\">(List&lt;People&gt; peoples)</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>接下来我们按照奇偶对id进行分类，我们创建两个实现类分班对group进行实现</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OddPeople</span> <span class=\"keyword\">implements</span> <span class=\"title\">PeopleId</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;People&gt; <span class=\"title\">group</span><span class=\"params\">(List&lt;People&gt; peoples)</span> </span>{</span><br><span class=\"line\">        List&lt;People&gt; oddPeoples = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (People people : peoples) {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (people.getId() % <span class=\"number\">2</span> != <span class=\"number\">0</span>) {</span><br><span class=\"line\">                oddPeoples.add(people);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oddPeoples;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EvenPeople</span> <span class=\"keyword\">implements</span> <span class=\"title\">PeopleId</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;People&gt; <span class=\"title\">group</span><span class=\"params\">(List&lt;People&gt; peoples)</span> </span>{</span><br><span class=\"line\">        List&lt;People&gt; evenPeoples = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (People people : peoples) {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (people.getId() % <span class=\"number\">2</span> == <span class=\"number\">0</span>) {</span><br><span class=\"line\">                evenPeoples.add(people);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> evenPeoples;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        List&lt;People&gt; peoples = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">1</span>,<span class=\"string\">\"1\"</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">2</span>,<span class=\"string\">\"2\"</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">3</span>,<span class=\"string\">\"3\"</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">4</span>,<span class=\"string\">\"4\"</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">5</span>,<span class=\"string\">\"5\"</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">6</span>,<span class=\"string\">\"6\"</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">7</span>,<span class=\"string\">\"7\"</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">8</span>,<span class=\"string\">\"8\"</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">9</span>,<span class=\"string\">\"9\"</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">10</span>,<span class=\"string\">\"10\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        PeopleId oddPeople = <span class=\"keyword\">new</span> OddPeople();</span><br><span class=\"line\">        System.out.println(oddPeople.group(peoples).toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        PeopleId evenPeople = <span class=\"keyword\">new</span> EvenPeople();</span><br><span class=\"line\">        System.out.println(evenPeople.group(peoples).toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[People(id=<span class=\"number\">1</span>, name=<span class=\"number\">1</span>), People(id=<span class=\"number\">3</span>, name=<span class=\"number\">3</span>), People(id=<span class=\"number\">5</span>, name=<span class=\"number\">5</span>), People(id=<span class=\"number\">7</span>, name=<span class=\"number\">7</span>), People(id=<span class=\"number\">9</span>, name=<span class=\"number\">9</span>)]</span><br><span class=\"line\">[People(id=<span class=\"number\">2</span>, name=<span class=\"number\">2</span>), People(id=<span class=\"number\">4</span>, name=<span class=\"number\">4</span>), People(id=<span class=\"number\">6</span>, name=<span class=\"number\">6</span>), People(id=<span class=\"number\">8</span>, name=<span class=\"number\">8</span>), People(id=<span class=\"number\">10</span>, name=<span class=\"number\">10</span>)]</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>过滤器模式就是我们对一组对象进行过滤，java8提供了里面就提供了很多方法来过滤数据，比如刚才的按照奇偶分类我们就可以直接使用java8提供的方法：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, List&lt;People&gt;&gt; groupList = peoples.stream().collect(Collectors.groupingBy(c -&gt; c.getId()%<span class=\"number\">2</span>));</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"过滤器模式\"><a href=\"#过滤器模式\" class=\"headerlink\" title=\"过滤器模式\"></a>过滤器模式</h1><blockquote>\n<p>过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们创建一个people实体</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">(Integer id, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个peopleId的接口，用于通过id对people分组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PeopleId</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;People&gt; <span class=\"title\">group</span><span class=\"params\">(List&lt;People&gt; peoples)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接下来我们按照奇偶对id进行分类，我们创建两个实现类分班对group进行实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OddPeople</span> <span class=\"keyword\">implements</span> <span class=\"title\">PeopleId</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;People&gt; <span class=\"title\">group</span><span class=\"params\">(List&lt;People&gt; peoples)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;People&gt; oddPeoples = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (People people : peoples) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (people.getId() % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                oddPeoples.add(people);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oddPeoples;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EvenPeople</span> <span class=\"keyword\">implements</span> <span class=\"title\">PeopleId</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;People&gt; <span class=\"title\">group</span><span class=\"params\">(List&lt;People&gt; peoples)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;People&gt; evenPeoples = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (People people : peoples) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (people.getId() % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                evenPeoples.add(people);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> evenPeoples;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;People&gt; peoples = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">1</span>,<span class=\"string\">&quot;1&quot;</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">2</span>,<span class=\"string\">&quot;2&quot;</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">3</span>,<span class=\"string\">&quot;3&quot;</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">4</span>,<span class=\"string\">&quot;4&quot;</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">5</span>,<span class=\"string\">&quot;5&quot;</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">6</span>,<span class=\"string\">&quot;6&quot;</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">7</span>,<span class=\"string\">&quot;7&quot;</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">8</span>,<span class=\"string\">&quot;8&quot;</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">9</span>,<span class=\"string\">&quot;9&quot;</span>));</span><br><span class=\"line\">        peoples.add(<span class=\"keyword\">new</span> People(<span class=\"number\">10</span>,<span class=\"string\">&quot;10&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        PeopleId oddPeople = <span class=\"keyword\">new</span> OddPeople();</span><br><span class=\"line\">        System.out.println(oddPeople.group(peoples).toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        PeopleId evenPeople = <span class=\"keyword\">new</span> EvenPeople();</span><br><span class=\"line\">        System.out.println(evenPeople.group(peoples).toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[People(id=<span class=\"number\">1</span>, name=<span class=\"number\">1</span>), People(id=<span class=\"number\">3</span>, name=<span class=\"number\">3</span>), People(id=<span class=\"number\">5</span>, name=<span class=\"number\">5</span>), People(id=<span class=\"number\">7</span>, name=<span class=\"number\">7</span>), People(id=<span class=\"number\">9</span>, name=<span class=\"number\">9</span>)]</span><br><span class=\"line\">[People(id=<span class=\"number\">2</span>, name=<span class=\"number\">2</span>), People(id=<span class=\"number\">4</span>, name=<span class=\"number\">4</span>), People(id=<span class=\"number\">6</span>, name=<span class=\"number\">6</span>), People(id=<span class=\"number\">8</span>, name=<span class=\"number\">8</span>), People(id=<span class=\"number\">10</span>, name=<span class=\"number\">10</span>)]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>过滤器模式就是我们对一组对象进行过滤，java8提供了里面就提供了很多方法来过滤数据，比如刚才的按照奇偶分类我们就可以直接使用java8提供的方法：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, List&lt;People&gt;&gt; groupList = peoples.stream().collect(Collectors.groupingBy(c -&gt; c.getId()%<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n"},{"title":"责任链模式","date":"2020-11-03T12:07:55.000Z","_content":"\n# 责任链模式\n\n>责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。\n>\n>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。\n\n##### 示例演示：\n\n1. 我们举个例子，王者荣耀中，如果你是黄金，那么你肯定要经历白银和青铜，如果你是白银，那么你肯定要经历青铜，就是等级是一级一级来的，我们创建一个people的抽象类，来说明这个级别\n\n   ```java\n   package test.chain;\n   \n   public abstract class AbstractPeople {\n       public static int gold = 1;\n       public static int silver = 2;\n       public static int bronze = 3;\n   \n       protected int level;\n   \n       protected AbstractPeople nextPeople;\n   \n       public void setNextPeople(AbstractPeople nextPeople) {\n           this.nextPeople = nextPeople;\n       }\n   \n       public void loadMessage(int level, String message) {\n           if (this.level <= level) {\n               write(message);\n           }\n           if (nextPeople != null) {\n               nextPeople.loadMessage(level, message);\n           }\n       }\n   \n       abstract protected void write(String message);\n   }\n   ```\n\n2. 分别创建各个等级的实现类\n\n   ```java\n   package test.chain;\n   \n   public class GoldPeople extends AbstractPeople {\n   \n       public GoldPeople(int level) {\n           this.level = level;\n       }\n   \n       @Override\n       protected void write(String message) {\n           System.out.println(\"write goldpeople：\" + message);\n       }\n   }\n   ```\n\n   ```java\n   package test.chain;\n   \n   public class SilverPeople extends AbstractPeople {\n   \n       public SilverPeople(int level) {\n           this.level = level;\n       }\n   \n       @Override\n       protected void write(String message) {\n           System.out.println(\"write silverpeople：\" + message);\n       }\n   }\n   ```\n\n   ```java\n   package test.chain;\n   \n   public class BronzePeople extends AbstractPeople {\n   \n       public BronzePeople(int level) {\n           this.level = level;\n       }\n   \n       @Override\n       protected void write(String message) {\n           System.out.println(\"write bronzepeople：\" + message);\n       }\n   }\n   ```\n\n3. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.chain;\n   \n   public class ChainDemo {\n       public static AbstractPeople getPeople() {\n           AbstractPeople goldPeople = new GoldPeople(AbstractPeople.gold);\n           AbstractPeople silverPeople = new SilverPeople(AbstractPeople.silver);\n           AbstractPeople bronzePeople = new BronzePeople(AbstractPeople.bronze);\n   \n           goldPeople.setNextPeople(silverPeople);\n           silverPeople.setNextPeople(bronzePeople);\n           return goldPeople;\n       }\n   \n       public static void main(String[] args) {\n           AbstractPeople  abstractPeople = getPeople();\n           abstractPeople.loadMessage(AbstractPeople.gold,\"this is gold\");\n           System.out.println(\"---------------------------------\");\n           abstractPeople.loadMessage(AbstractPeople.silver,\"this is silver\");\n           System.out.println(\"---------------------------------\");\n           abstractPeople.loadMessage(AbstractPeople.bronze,\"this is bronze\");\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   write goldpeople：this is gold\n   ---------------------------------\n   write goldpeople：this is silver\n   write silverpeople：this is silver\n   ---------------------------------\n   write goldpeople：this is bronze\n   write silverpeople：this is bronze\n   write bronzepeople：this is bronze\n   ```\n\n##### 说明：\n\n>**优点：** 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。\n>\n>**缺点：** 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。","source":"_posts/责任链模式.md","raw":"---\ntitle: 责任链模式\ndate: 2020-11-03 20:07:55\ntags:\n- java\n- 设计模式\n---\n\n# 责任链模式\n\n>责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。\n>\n>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。\n\n##### 示例演示：\n\n1. 我们举个例子，王者荣耀中，如果你是黄金，那么你肯定要经历白银和青铜，如果你是白银，那么你肯定要经历青铜，就是等级是一级一级来的，我们创建一个people的抽象类，来说明这个级别\n\n   ```java\n   package test.chain;\n   \n   public abstract class AbstractPeople {\n       public static int gold = 1;\n       public static int silver = 2;\n       public static int bronze = 3;\n   \n       protected int level;\n   \n       protected AbstractPeople nextPeople;\n   \n       public void setNextPeople(AbstractPeople nextPeople) {\n           this.nextPeople = nextPeople;\n       }\n   \n       public void loadMessage(int level, String message) {\n           if (this.level <= level) {\n               write(message);\n           }\n           if (nextPeople != null) {\n               nextPeople.loadMessage(level, message);\n           }\n       }\n   \n       abstract protected void write(String message);\n   }\n   ```\n\n2. 分别创建各个等级的实现类\n\n   ```java\n   package test.chain;\n   \n   public class GoldPeople extends AbstractPeople {\n   \n       public GoldPeople(int level) {\n           this.level = level;\n       }\n   \n       @Override\n       protected void write(String message) {\n           System.out.println(\"write goldpeople：\" + message);\n       }\n   }\n   ```\n\n   ```java\n   package test.chain;\n   \n   public class SilverPeople extends AbstractPeople {\n   \n       public SilverPeople(int level) {\n           this.level = level;\n       }\n   \n       @Override\n       protected void write(String message) {\n           System.out.println(\"write silverpeople：\" + message);\n       }\n   }\n   ```\n\n   ```java\n   package test.chain;\n   \n   public class BronzePeople extends AbstractPeople {\n   \n       public BronzePeople(int level) {\n           this.level = level;\n       }\n   \n       @Override\n       protected void write(String message) {\n           System.out.println(\"write bronzepeople：\" + message);\n       }\n   }\n   ```\n\n3. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.chain;\n   \n   public class ChainDemo {\n       public static AbstractPeople getPeople() {\n           AbstractPeople goldPeople = new GoldPeople(AbstractPeople.gold);\n           AbstractPeople silverPeople = new SilverPeople(AbstractPeople.silver);\n           AbstractPeople bronzePeople = new BronzePeople(AbstractPeople.bronze);\n   \n           goldPeople.setNextPeople(silverPeople);\n           silverPeople.setNextPeople(bronzePeople);\n           return goldPeople;\n       }\n   \n       public static void main(String[] args) {\n           AbstractPeople  abstractPeople = getPeople();\n           abstractPeople.loadMessage(AbstractPeople.gold,\"this is gold\");\n           System.out.println(\"---------------------------------\");\n           abstractPeople.loadMessage(AbstractPeople.silver,\"this is silver\");\n           System.out.println(\"---------------------------------\");\n           abstractPeople.loadMessage(AbstractPeople.bronze,\"this is bronze\");\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   write goldpeople：this is gold\n   ---------------------------------\n   write goldpeople：this is silver\n   write silverpeople：this is silver\n   ---------------------------------\n   write goldpeople：this is bronze\n   write silverpeople：this is bronze\n   write bronzepeople：this is bronze\n   ```\n\n##### 说明：\n\n>**优点：** 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。\n>\n>**缺点：** 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。","slug":"责任链模式","published":1,"updated":"2020-11-03T12:16:58.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44ww001xrcwodzmx5zdm","content":"<h1 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h1><blockquote>\n<p>责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。</p>\n<p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们举个例子，王者荣耀中，如果你是黄金，那么你肯定要经历白银和青铜，如果你是白银，那么你肯定要经历青铜，就是等级是一级一级来的，我们创建一个people的抽象类，来说明这个级别</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.chain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractPeople</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> gold = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> silver = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> bronze = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> level;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> AbstractPeople nextPeople;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNextPeople</span><span class=\"params\">(AbstractPeople nextPeople)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextPeople = nextPeople;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> level, String message)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.level &lt;= level) {</span><br><span class=\"line\">            write(message);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextPeople != <span class=\"keyword\">null</span>) {</span><br><span class=\"line\">            nextPeople.loadMessage(level, message);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String message)</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>分别创建各个等级的实现类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.chain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoldPeople</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractPeople</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GoldPeople</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String message)</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"write goldpeople：\"</span> + message);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.chain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SilverPeople</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractPeople</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SilverPeople</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String message)</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"write silverpeople：\"</span> + message);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.chain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BronzePeople</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractPeople</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BronzePeople</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String message)</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"write bronzepeople：\"</span> + message);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.chain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChainDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AbstractPeople <span class=\"title\">getPeople</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        AbstractPeople goldPeople = <span class=\"keyword\">new</span> GoldPeople(AbstractPeople.gold);</span><br><span class=\"line\">        AbstractPeople silverPeople = <span class=\"keyword\">new</span> SilverPeople(AbstractPeople.silver);</span><br><span class=\"line\">        AbstractPeople bronzePeople = <span class=\"keyword\">new</span> BronzePeople(AbstractPeople.bronze);</span><br><span class=\"line\"></span><br><span class=\"line\">        goldPeople.setNextPeople(silverPeople);</span><br><span class=\"line\">        silverPeople.setNextPeople(bronzePeople);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> goldPeople;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        AbstractPeople  abstractPeople = getPeople();</span><br><span class=\"line\">        abstractPeople.loadMessage(AbstractPeople.gold,<span class=\"string\">\"this is gold\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---------------------------------\"</span>);</span><br><span class=\"line\">        abstractPeople.loadMessage(AbstractPeople.silver,<span class=\"string\">\"this is silver\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---------------------------------\"</span>);</span><br><span class=\"line\">        abstractPeople.loadMessage(AbstractPeople.bronze,<span class=\"string\">\"this is bronze\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">write goldpeople：<span class=\"keyword\">this</span> is gold</span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">write goldpeople：<span class=\"keyword\">this</span> is silver</span><br><span class=\"line\">write silverpeople：<span class=\"keyword\">this</span> is silver</span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">write goldpeople：<span class=\"keyword\">this</span> is bronze</span><br><span class=\"line\">write silverpeople：<span class=\"keyword\">this</span> is bronze</span><br><span class=\"line\">write bronzepeople：<span class=\"keyword\">this</span> is bronze</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。</p>\n<p><strong>缺点：</strong> 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h1><blockquote>\n<p>责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。</p>\n<p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>我们举个例子，王者荣耀中，如果你是黄金，那么你肯定要经历白银和青铜，如果你是白银，那么你肯定要经历青铜，就是等级是一级一级来的，我们创建一个people的抽象类，来说明这个级别</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.chain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractPeople</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> gold = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> silver = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> bronze = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> level;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> AbstractPeople nextPeople;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNextPeople</span><span class=\"params\">(AbstractPeople nextPeople)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextPeople = nextPeople;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> level, String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.level &lt;= level) &#123;</span><br><span class=\"line\">            write(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextPeople != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            nextPeople.loadMessage(level, message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String message)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分别创建各个等级的实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.chain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoldPeople</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractPeople</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GoldPeople</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;write goldpeople：&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.chain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SilverPeople</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractPeople</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SilverPeople</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;write silverpeople：&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.chain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BronzePeople</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractPeople</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BronzePeople</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;write bronzepeople：&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.chain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChainDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AbstractPeople <span class=\"title\">getPeople</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AbstractPeople goldPeople = <span class=\"keyword\">new</span> GoldPeople(AbstractPeople.gold);</span><br><span class=\"line\">        AbstractPeople silverPeople = <span class=\"keyword\">new</span> SilverPeople(AbstractPeople.silver);</span><br><span class=\"line\">        AbstractPeople bronzePeople = <span class=\"keyword\">new</span> BronzePeople(AbstractPeople.bronze);</span><br><span class=\"line\"></span><br><span class=\"line\">        goldPeople.setNextPeople(silverPeople);</span><br><span class=\"line\">        silverPeople.setNextPeople(bronzePeople);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> goldPeople;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AbstractPeople  abstractPeople = getPeople();</span><br><span class=\"line\">        abstractPeople.loadMessage(AbstractPeople.gold,<span class=\"string\">&quot;this is gold&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------------------------&quot;</span>);</span><br><span class=\"line\">        abstractPeople.loadMessage(AbstractPeople.silver,<span class=\"string\">&quot;this is silver&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------------------------&quot;</span>);</span><br><span class=\"line\">        abstractPeople.loadMessage(AbstractPeople.bronze,<span class=\"string\">&quot;this is bronze&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">write goldpeople：<span class=\"keyword\">this</span> is gold</span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">write goldpeople：<span class=\"keyword\">this</span> is silver</span><br><span class=\"line\">write silverpeople：<span class=\"keyword\">this</span> is silver</span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">write goldpeople：<span class=\"keyword\">this</span> is bronze</span><br><span class=\"line\">write silverpeople：<span class=\"keyword\">this</span> is bronze</span><br><span class=\"line\">write bronzepeople：<span class=\"keyword\">this</span> is bronze</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。</p>\n<p><strong>缺点：</strong> 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。</p>\n</blockquote>\n"},{"title":"迭代器模式","date":"2020-11-05T02:38:23.000Z","_content":"\n# 迭代器模式\n\n>迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。迭代器模式属于行为型模式。java中的 iterator。\n\n##### 示例演示：\n\n1. 首先我们创建一个迭代器接口\n\n   ```java\n   package test.iterator;\n   \n   public interface Iterator {\n       public boolean hasNext();\n       public Object next();\n   }\n   ```\n\n2. 然后创建一个获取迭代器的接口\n\n   ```java\n   package test.iterator;\n   \n   public interface Container {\n       public Iterator getIterator();\n   }\n   ```\n\n3. 创建两个接口的实现类\n\n   ```java\n   package test.iterator;\n   \n   import java.util.List;\n   \n   public class People implements Container {\n       public List<String> names;\n   \n       @Override\n       public Iterator getIterator() {\n           return new NameIterator();\n       }\n   \n       private class NameIterator implements Iterator {\n           int index;\n   \n           @Override\n           public boolean hasNext() {\n               if (index < names.size()) {\n                   return true;\n               }\n               return false;\n           }\n   \n           @Override\n           public Object next() {\n               if (this.hasNext()) {\n                   return names.get(index++);\n               }\n               return null;\n           }\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.iterator;\n   \n   import java.util.ArrayList;\n   \n   public class IteratorDemo {\n       public static void main(String[] args) {\n           People people = new People();\n           people.names = new ArrayList<>();\n           people.names.add(\"a\");\n           people.names.add(\"b\");\n           people.names.add(\"c\");\n           people.names.add(\"d\");\n           Iterator iter = people.getIterator();\n           while (iter.hasNext()){\n               System.out.println(iter.next());\n           }\n       }\n   }\n   ```\n\n   演示结果：\n\n   ```java\n   a\n   b\n   c\n   d\n   ```\n\n##### 说明：\n\n>**优点：** 1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。 4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。\n>\n>**缺点：**由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。","source":"_posts/迭代器模式.md","raw":"---\ntitle: 迭代器模式\ndate: 2020-11-05 10:38:23\ntags:\n- java\n- 设计模式\n---\n\n# 迭代器模式\n\n>迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。迭代器模式属于行为型模式。java中的 iterator。\n\n##### 示例演示：\n\n1. 首先我们创建一个迭代器接口\n\n   ```java\n   package test.iterator;\n   \n   public interface Iterator {\n       public boolean hasNext();\n       public Object next();\n   }\n   ```\n\n2. 然后创建一个获取迭代器的接口\n\n   ```java\n   package test.iterator;\n   \n   public interface Container {\n       public Iterator getIterator();\n   }\n   ```\n\n3. 创建两个接口的实现类\n\n   ```java\n   package test.iterator;\n   \n   import java.util.List;\n   \n   public class People implements Container {\n       public List<String> names;\n   \n       @Override\n       public Iterator getIterator() {\n           return new NameIterator();\n       }\n   \n       private class NameIterator implements Iterator {\n           int index;\n   \n           @Override\n           public boolean hasNext() {\n               if (index < names.size()) {\n                   return true;\n               }\n               return false;\n           }\n   \n           @Override\n           public Object next() {\n               if (this.hasNext()) {\n                   return names.get(index++);\n               }\n               return null;\n           }\n       }\n   }\n   ```\n\n4. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.iterator;\n   \n   import java.util.ArrayList;\n   \n   public class IteratorDemo {\n       public static void main(String[] args) {\n           People people = new People();\n           people.names = new ArrayList<>();\n           people.names.add(\"a\");\n           people.names.add(\"b\");\n           people.names.add(\"c\");\n           people.names.add(\"d\");\n           Iterator iter = people.getIterator();\n           while (iter.hasNext()){\n               System.out.println(iter.next());\n           }\n       }\n   }\n   ```\n\n   演示结果：\n\n   ```java\n   a\n   b\n   c\n   d\n   ```\n\n##### 说明：\n\n>**优点：** 1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。 4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。\n>\n>**缺点：**由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。","slug":"迭代器模式","published":1,"updated":"2020-11-05T02:45:58.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wx001zrcwo1rtn6ghe","content":"<h1 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h1><blockquote>\n<p>迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。迭代器模式属于行为型模式。java中的 iterator。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>首先我们创建一个迭代器接口</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>然后创建一个获取迭代器的接口</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Container</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">getIterator</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建两个接口的实现类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">Container</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; names;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">getIterator</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NameIterator();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index &lt; names.size()) {</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hasNext()) {</span><br><span class=\"line\">                <span class=\"keyword\">return</span> names.get(index++);</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IteratorDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        People people = <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">        people.names = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        people.names.add(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">        people.names.add(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">        people.names.add(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">        people.names.add(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\">        Iterator iter = people.getIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (iter.hasNext()){</span><br><span class=\"line\">            System.out.println(iter.next());</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>演示结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br><span class=\"line\">d</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。 4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</p>\n<p><strong>缺点：</strong>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h1><blockquote>\n<p>迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。迭代器模式属于行为型模式。java中的 iterator。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>首先我们创建一个迭代器接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后创建一个获取迭代器的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Container</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">getIterator</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建两个接口的实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> <span class=\"keyword\">implements</span> <span class=\"title\">Container</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; names;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">getIterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NameIterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index &lt; names.size()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hasNext()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> names.get(index++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IteratorDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        People people = <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">        people.names = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        people.names.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        people.names.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        people.names.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        people.names.add(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">        Iterator iter = people.getIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (iter.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iter.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>演示结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br><span class=\"line\">d</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。 4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</p>\n<p><strong>缺点：</strong>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p>\n</blockquote>\n"},{"title":"适配器模式","date":"2020-11-03T05:58:36.000Z","_content":"\n## 适配器模式\n\n>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。\n>\n>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。\n\n##### 示例演示：\n\n1. 由于我们之前的例子都是围绕people和animal来的，所以我们依然用people来举例，例子可能不太恰当，网上有更好的例子；这次我们把people设计成一个接口，这个接口提供了一个eat的方法，方法有两个参数，什么类型的食物，和食物名称\n\n   ```java\n   package test.adapter;\n   \n   public interface People {\n       public void eat(String type, String name);\n   }\n   ```\n\n2. 这时候我们新增两个接口，一个吃荤，一个吃素\n\n   ```java\n   package test.adapter;\n   \n   public interface AdvancedPeople {\n   \n       public void eatMeat(String name);\n       public void eatVege(String name);\n   }\n   ```\n\n3. 然后我们创建两个实体类，分别来实现这俩方法\n\n   ```java\n   package test.adapter;\n   \n   public class PeopleEatMeat implements AdvancedPeople{\n       @Override\n       public void eatMeat(String name) {\n           System.out.println(\"eat meat :\"+name);\n       }\n   \n       @Override\n       public void eatVege(String name) {\n   \n       }\n   }\n   ```\n\n   ```java\n   package test.adapter;\n   \n   public class PeopleEatVege implements AdvancedPeople{\n       @Override\n       public void eatMeat(String name) {\n   \n       }\n   \n       @Override\n       public void eatVege(String name) {\n           System.out.println(\"eat vege :\"+name);\n       }\n   }\n   ```\n\n4. 接下来重点来了，我们创建一个适配eat的适配器实现类\n\n   ```java\n   package test.adapter;\n   \n   public class PeopleAdapter implements People {\n       AdvancedPeople advancedPeople;\n   \n       public PeopleAdapter(String type) {\n           if (type.equalsIgnoreCase(\"meat\")) {\n               advancedPeople = new PeopleEatMeat();\n           } else if (type.equalsIgnoreCase(\"vege\")) {\n               advancedPeople = new PeopleEatVege();\n           }\n       }\n   \n       @Override\n       public void eat(String type, String name) {\n           if (type.equalsIgnoreCase(\"meat\")) {\n               advancedPeople.eatMeat(name);\n           } else if (type.equalsIgnoreCase(\"vege\")) {\n               advancedPeople.eatVege(name);\n           }\n       }\n   }\n   ```\n\n5. 创建一个people接口实现类\n\n   ```java\n   package test.adapter;\n   \n   public class PeopleImpl implements People {\n       PeopleAdapter peopleAdapter;\n   \n       @Override\n       public void eat(String type, String name) {\n           if (type.equalsIgnoreCase(\"food\")) {\n               System.out.println(\"eat food :\"+name);\n           }else if (type.equalsIgnoreCase(\"meat\") || type.equalsIgnoreCase(\"vege\")){\n               peopleAdapter = new PeopleAdapter(type);\n               peopleAdapter.eat(type,name);\n           }else if (type.equalsIgnoreCase(\"fruit\")){\n               System.out.println(name+\" not supported\");\n           }\n       }\n   }\n   ```\n\n6. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.adapter;\n   \n   public class AdapterDemo {\n       public static void main(String[] args) {\n           PeopleImpl people = new PeopleImpl();\n           people.eat(\"food\",\"rice\");\n           people.eat(\"meat\",\"fish\");\n           people.eat(\"vege\",\"tomato\");\n           people.eat(\"fruit\",\"apple\");\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   eat food :rice\n   eat meat :fish\n   eat vege :tomato\n   apple not supported\n   ```\n\n   ##### 说明：\n\n   >**优点：** 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。\n   >\n   >**缺点：** 1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。","source":"_posts/适配器模式.md","raw":"---\ntitle: 适配器模式\ndate: 2020-11-03 13:58:36\ntags:\n- java\n- 设计模式\n---\n\n## 适配器模式\n\n>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。\n>\n>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。\n\n##### 示例演示：\n\n1. 由于我们之前的例子都是围绕people和animal来的，所以我们依然用people来举例，例子可能不太恰当，网上有更好的例子；这次我们把people设计成一个接口，这个接口提供了一个eat的方法，方法有两个参数，什么类型的食物，和食物名称\n\n   ```java\n   package test.adapter;\n   \n   public interface People {\n       public void eat(String type, String name);\n   }\n   ```\n\n2. 这时候我们新增两个接口，一个吃荤，一个吃素\n\n   ```java\n   package test.adapter;\n   \n   public interface AdvancedPeople {\n   \n       public void eatMeat(String name);\n       public void eatVege(String name);\n   }\n   ```\n\n3. 然后我们创建两个实体类，分别来实现这俩方法\n\n   ```java\n   package test.adapter;\n   \n   public class PeopleEatMeat implements AdvancedPeople{\n       @Override\n       public void eatMeat(String name) {\n           System.out.println(\"eat meat :\"+name);\n       }\n   \n       @Override\n       public void eatVege(String name) {\n   \n       }\n   }\n   ```\n\n   ```java\n   package test.adapter;\n   \n   public class PeopleEatVege implements AdvancedPeople{\n       @Override\n       public void eatMeat(String name) {\n   \n       }\n   \n       @Override\n       public void eatVege(String name) {\n           System.out.println(\"eat vege :\"+name);\n       }\n   }\n   ```\n\n4. 接下来重点来了，我们创建一个适配eat的适配器实现类\n\n   ```java\n   package test.adapter;\n   \n   public class PeopleAdapter implements People {\n       AdvancedPeople advancedPeople;\n   \n       public PeopleAdapter(String type) {\n           if (type.equalsIgnoreCase(\"meat\")) {\n               advancedPeople = new PeopleEatMeat();\n           } else if (type.equalsIgnoreCase(\"vege\")) {\n               advancedPeople = new PeopleEatVege();\n           }\n       }\n   \n       @Override\n       public void eat(String type, String name) {\n           if (type.equalsIgnoreCase(\"meat\")) {\n               advancedPeople.eatMeat(name);\n           } else if (type.equalsIgnoreCase(\"vege\")) {\n               advancedPeople.eatVege(name);\n           }\n       }\n   }\n   ```\n\n5. 创建一个people接口实现类\n\n   ```java\n   package test.adapter;\n   \n   public class PeopleImpl implements People {\n       PeopleAdapter peopleAdapter;\n   \n       @Override\n       public void eat(String type, String name) {\n           if (type.equalsIgnoreCase(\"food\")) {\n               System.out.println(\"eat food :\"+name);\n           }else if (type.equalsIgnoreCase(\"meat\") || type.equalsIgnoreCase(\"vege\")){\n               peopleAdapter = new PeopleAdapter(type);\n               peopleAdapter.eat(type,name);\n           }else if (type.equalsIgnoreCase(\"fruit\")){\n               System.out.println(name+\" not supported\");\n           }\n       }\n   }\n   ```\n\n6. 完成上述步骤，我们就可以开始演示了\n\n   ```java\n   package test.adapter;\n   \n   public class AdapterDemo {\n       public static void main(String[] args) {\n           PeopleImpl people = new PeopleImpl();\n           people.eat(\"food\",\"rice\");\n           people.eat(\"meat\",\"fish\");\n           people.eat(\"vege\",\"tomato\");\n           people.eat(\"fruit\",\"apple\");\n       }\n   }\n   ```\n\n   运行结果：\n\n   ```java\n   eat food :rice\n   eat meat :fish\n   eat vege :tomato\n   apple not supported\n   ```\n\n   ##### 说明：\n\n   >**优点：** 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。\n   >\n   >**缺点：** 1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。","slug":"适配器模式","published":1,"updated":"2020-11-03T06:15:14.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44wx0021rcwo1q1k370m","content":"<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><blockquote>\n<p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p>\n<p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>由于我们之前的例子都是围绕people和animal来的，所以我们依然用people来举例，例子可能不太恰当，网上有更好的例子；这次我们把people设计成一个接口，这个接口提供了一个eat的方法，方法有两个参数，什么类型的食物，和食物名称</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(String type, String name)</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>这时候我们新增两个接口，一个吃荤，一个吃素</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AdvancedPeople</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eatMeat</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eatVege</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>然后我们创建两个实体类，分别来实现这俩方法</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleEatMeat</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdvancedPeople</span></span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eatMeat</span><span class=\"params\">(String name)</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"eat meat :\"</span>+name);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eatVege</span><span class=\"params\">(String name)</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleEatVege</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdvancedPeople</span></span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eatMeat</span><span class=\"params\">(String name)</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eatVege</span><span class=\"params\">(String name)</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"eat vege :\"</span>+name);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>接下来重点来了，我们创建一个适配eat的适配器实现类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    AdvancedPeople advancedPeople;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleAdapter</span><span class=\"params\">(String type)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"meat\"</span>)) {</span><br><span class=\"line\">            advancedPeople = <span class=\"keyword\">new</span> PeopleEatMeat();</span><br><span class=\"line\">        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"vege\"</span>)) {</span><br><span class=\"line\">            advancedPeople = <span class=\"keyword\">new</span> PeopleEatVege();</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(String type, String name)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"meat\"</span>)) {</span><br><span class=\"line\">            advancedPeople.eatMeat(name);</span><br><span class=\"line\">        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"vege\"</span>)) {</span><br><span class=\"line\">            advancedPeople.eatVege(name);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建一个people接口实现类</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span> </span>{</span><br><span class=\"line\">    PeopleAdapter peopleAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(String type, String name)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"food\"</span>)) {</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"eat food :\"</span>+name);</span><br><span class=\"line\">        }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"meat\"</span>) || type.equalsIgnoreCase(<span class=\"string\">\"vege\"</span>)){</span><br><span class=\"line\">            peopleAdapter = <span class=\"keyword\">new</span> PeopleAdapter(type);</span><br><span class=\"line\">            peopleAdapter.eat(type,name);</span><br><span class=\"line\">        }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">\"fruit\"</span>)){</span><br><span class=\"line\">            System.out.println(name+<span class=\"string\">\" not supported\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterDemo</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        PeopleImpl people = <span class=\"keyword\">new</span> PeopleImpl();</span><br><span class=\"line\">        people.eat(<span class=\"string\">\"food\"</span>,<span class=\"string\">\"rice\"</span>);</span><br><span class=\"line\">        people.eat(<span class=\"string\">\"meat\"</span>,<span class=\"string\">\"fish\"</span>);</span><br><span class=\"line\">        people.eat(<span class=\"string\">\"vege\"</span>,<span class=\"string\">\"tomato\"</span>);</span><br><span class=\"line\">        people.eat(<span class=\"string\">\"fruit\"</span>,<span class=\"string\">\"apple\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eat food :rice</span><br><span class=\"line\">eat meat :fish</span><br><span class=\"line\">eat vege :tomato</span><br><span class=\"line\">apple not supported</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。</p>\n<p><strong>缺点：</strong> 1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><blockquote>\n<p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p>\n<p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。</p>\n</blockquote>\n<h5 id=\"示例演示：\"><a href=\"#示例演示：\" class=\"headerlink\" title=\"示例演示：\"></a>示例演示：</h5><ol>\n<li><p>由于我们之前的例子都是围绕people和animal来的，所以我们依然用people来举例，例子可能不太恰当，网上有更好的例子；这次我们把people设计成一个接口，这个接口提供了一个eat的方法，方法有两个参数，什么类型的食物，和食物名称</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(String type, String name)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这时候我们新增两个接口，一个吃荤，一个吃素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AdvancedPeople</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eatMeat</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eatVege</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后我们创建两个实体类，分别来实现这俩方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleEatMeat</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdvancedPeople</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eatMeat</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat meat :&quot;</span>+name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eatVege</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleEatVege</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdvancedPeople</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eatMeat</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eatVege</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat vege :&quot;</span>+name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接下来重点来了，我们创建一个适配eat的适配器实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    AdvancedPeople advancedPeople;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleAdapter</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;meat&quot;</span>)) &#123;</span><br><span class=\"line\">            advancedPeople = <span class=\"keyword\">new</span> PeopleEatMeat();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;vege&quot;</span>)) &#123;</span><br><span class=\"line\">            advancedPeople = <span class=\"keyword\">new</span> PeopleEatVege();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(String type, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;meat&quot;</span>)) &#123;</span><br><span class=\"line\">            advancedPeople.eatMeat(name);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;vege&quot;</span>)) &#123;</span><br><span class=\"line\">            advancedPeople.eatVege(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个people接口实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">    PeopleAdapter peopleAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(String type, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;food&quot;</span>)) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;eat food :&quot;</span>+name);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;meat&quot;</span>) || type.equalsIgnoreCase(<span class=\"string\">&quot;vege&quot;</span>))&#123;</span><br><span class=\"line\">            peopleAdapter = <span class=\"keyword\">new</span> PeopleAdapter(type);</span><br><span class=\"line\">            peopleAdapter.eat(type,name);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equalsIgnoreCase(<span class=\"string\">&quot;fruit&quot;</span>))&#123;</span><br><span class=\"line\">            System.out.println(name+<span class=\"string\">&quot; not supported&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤，我们就可以开始演示了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        PeopleImpl people = <span class=\"keyword\">new</span> PeopleImpl();</span><br><span class=\"line\">        people.eat(<span class=\"string\">&quot;food&quot;</span>,<span class=\"string\">&quot;rice&quot;</span>);</span><br><span class=\"line\">        people.eat(<span class=\"string\">&quot;meat&quot;</span>,<span class=\"string\">&quot;fish&quot;</span>);</span><br><span class=\"line\">        people.eat(<span class=\"string\">&quot;vege&quot;</span>,<span class=\"string\">&quot;tomato&quot;</span>);</span><br><span class=\"line\">        people.eat(<span class=\"string\">&quot;fruit&quot;</span>,<span class=\"string\">&quot;apple&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eat food :rice</span><br><span class=\"line\">eat meat :fish</span><br><span class=\"line\">eat vege :tomato</span><br><span class=\"line\">apple not supported</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p><strong>优点：</strong> 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。</p>\n<p><strong>缺点：</strong> 1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"java日记","date":"2020-11-09T11:47:33.000Z","_content":"\n##### 1，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱\n\n比如下面这段代码\n\n```java\nimport cn.hutool.core.date.DateUtil;\n\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(DateUtil.now());\n        sum();\n        System.out.println(DateUtil.now());\n\n    }\n\n    public static long sum() {\n        Long sum = 0L;\n        for (long i = 0; i < Integer.MAX_VALUE; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n```\n\n我们运行一下\n\n```java\n2020-11-09 19:57:12\n2020-11-09 19:57:20\n```\n\n这段程序是没有问题的，慢的原因在哪，在`Long sum = 0L`这里，意味着程序构造了大约 2^31 个多余的 Long 实例（大约每次往 Long sum 中增加 long 时构造一个实例） 。将sum 的声明从 Long 改成 long ，我们再试一下\n\n```java\n2020-11-09 19:59:44\n2020-11-09 19:59:45\n```\n\n##### 2，避免创建不必要的对象\n\n比如下面这个例子\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(isNumber(\"312\"));\n\n    }\n    static boolean isNumber(String s) {\n        return s.matches(\"^[0-9]*$\");\n    }\n}\n```\n\n一个正则表达式，判断传过来的字符串是不是数字，这个方案看起来没有问题，但是如果这个方法使用的非常频繁，那么这种写法就不太合适了，我们先来看看`matcher`这个方法\n\n```java\npublic boolean matches(String regex) {\n    return Pattern.matches(regex, this);\n}\n```\n\n再往里走\n\n```java\npublic static boolean matches(String regex, CharSequence input) {\n    Pattern p = Pattern.compile(regex);\n    Matcher m = p.matcher(input);\n    return m.matches();\n}\n```\n\n再往里走\n\n```java\npublic static Pattern compile(String regex) {\n    return new Pattern(regex, 0);\n}\n```\n\n它在内部为正则表达式创建了一个 `Pattern` 实例，却只用了1次，之后就可以进行垃圾回收了，创建 `Pattenr`实例的成本很高 ，因为需要将正则表达式编译成一个有限状态机（ finite state machine）。\n\n为了提升性能，应该显式地将正则表达式编译成一个 `Pattern` 实例（不可变），让它成为类初始化的一部分，并将它缓存起来，每当调用 `isNumber`方法的时候就重用同一个实例：\n\n```java\nimport java.util.regex.Pattern;\n\npublic class Test {\n    private static final Pattern ISNUM = Pattern.compile(\"^[0-9]*$\");\n    public static void main(String[] args) {\n        System.out.println(isNumber(\"312\"));\n\n    }\n    static boolean isNumber(String s) {\n        return ISNUM.matcher(s).matches();\n    }\n}\n```\n\n##### 3，覆盖equals必须覆盖hashCode\n\n在每个覆盖了equals方法的类中，也必须覆盖hashCode方法。如果不这样做的话，就会违反Object.hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，这样的集合包括HashMap、HashSet和Hashtable\n\n1. 只要对象的equals方法的比较操作所用到的信息未被修改，那么对同一个对象调用多次其hashCode返回值不变\n2. 若两个对象通过equals得到是相等的，那么调用这两个对象任意一个对象的hashCode方法产生整数结果一样\n3. 若两个对象通过equals得到是不相等的，那么调用这两个对象任意一个对象的hashCode方法产生的结果也可能相等,但是从提高散列表(hash table)的性能分析，给不相等的对象产生不同的结果会更好\n\n##### 4，Lambda 优先于匿名类，和 java.util.function使用\n\n举个例子，我们看下面这个代码\n\n```java\npackage effectiveJava.enumTest;\n\npublic enum OpemrationOld {\n    PLUS(\"+\") {\n        public double apply(double x, double y) {\n            return x + y;\n        }\n    },\n    MINUS(\"-\") {\n        public double apply(double x, double y) {\n            return x - y;\n        }\n    },\n    TIMES(\"*\") {\n        public double apply(double x, double y) {\n            return x * y;\n        }\n    },\n    DIVIDE(\"/\") {\n        public double apply(double x, double y) {\n            return x / y;\n        }\n    };\n    private final String symbol;\n\n    OpemrationOld(String symbol) {\n        this.symbol = symbol;\n    }\n\n    public abstract double apply(double x, double y);\n}\n\nclass testold {\n    public static void main(String[] args) {\n        double value = OpemrationOld.DIVIDE.apply(1,2);\n        System.out.println(value);\n    }\n}\n```\n\n这个代码表示对任意两个数进行加减乘除运算，jdk1.8新增了Lambda表达式后，我们就可以简写这段代码\n\n```java\npackage effectiveJava.enumTest;\n\nimport java.util.function.DoubleBinaryOperator;\n\npublic enum Opemration {\n    PLUS(\"+\", (x, y) -> x + y),\n    MINUS(\"-\", (x, y) -> x - y),\n    TIMES(\"*\", (x, y) -> x * y),\n    DIVIDE(\"/\", (x, y) -> x / y);\n\n\n    private final String symbol;\n    private final DoubleBinaryOperator op;\n\n    Opemration(String symbol, DoubleBinaryOperator op) {\n        this.symbol = symbol;\n        this.op = op;\n    }\n\n    @Override\n    public String toString() {\n        return symbol;\n    }\n\n    public double apply(double x, double y) {\n        return op.applyAsDouble(x, y);\n    }\n}\n\nclass test {\n    public static void main(String[] args) {\n        double value = Opemration.DIVIDE.apply(1, 2);\n        System.out.println(value);\n    }\n}\n```\n\n这里我们提一下`DoubleBinaryOperator`这个接口，这个接口是java.util.function包中的，也属于jdk1.8新增的包，用来支持 Java的函数式编程。\n\n那这个接口是什么意思呢 表示：代表了作用于两个double值操作符的操作，并且返回了一个double值的结果。\n\n这个包下提供了非常多的函数\n\n![image-20201110202033145](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201110202033145.png?x-oss-process=style/radio93)\n\n| 序号 | **接口**                    | **描述**                                                     |\n| ---- | --------------------------- | ------------------------------------------------------------ |\n| 1    | **BiConsumer<T,U>**         | 代表了一个接受两个输入参数的操作，并且不返回任何结果         |\n| 2    | **BiFunction<T,U,R>**       | 代表了一个接受两个输入参数的方法，并且返回一个结果           |\n| 3    | **BinaryOperator<T>**       | 代表了一个作用于于两个同类型操作符的操作，并且返回了操作符同类型的结果 |\n| 4    | **BiPredicate<T,U>**        | 代表了一个两个参数的boolean值方法                            |\n| 5    | **BooleanSupplier**         | 代表了boolean值结果的提供方                                  |\n| 6    | **Consumer<T>**             | 代表了接受一个输入参数并且无返回的操作                       |\n| 7    | **DoubleBinaryOperator**    | 代表了作用于两个double值操作符的操作，并且返回了一个double值的结果。 |\n| 8    | **DoubleConsumer**          | 代表一个接受double值参数的操作，并且不返回结果。             |\n| 9    | **DoubleFunction<R>**       | 代表接受一个double值参数的方法，并且返回结果                 |\n| 10   | **DoublePredicate**         | 代表一个拥有double值参数的boolean值方法                      |\n| 11   | **DoubleSupplier**          | 代表一个double值结构的提供方                                 |\n| 12   | **DoubleToIntFunction**     | 接受一个double类型输入，返回一个int类型结果。                |\n| 13   | **DoubleToLongFunction**    | 接受一个double类型输入，返回一个long类型结果                 |\n| 14   | **DoubleUnaryOperator**     | 接受一个参数同为类型double,返回值类型也为double 。           |\n| 15   | **Function<T,R>**           | 接受一个输入参数，返回一个结果。                             |\n| 16   | **IntBinaryOperator**       | 接受两个参数同为类型int,返回值类型也为int 。                 |\n| 17   | **IntConsumer**             | 接受一个int类型的输入参数，无返回值 。                       |\n| 18   | **IntFunction<R>**          | 接受一个int类型输入参数，返回一个结果 。                     |\n| 19   | **IntPredicate**            | 接受一个int输入参数，返回一个布尔值的结果。                  |\n| 20   | **IntSupplier**             | 无参数，返回一个int类型结果。                                |\n| 21   | **IntToDoubleFunction**     | 接受一个int类型输入，返回一个double类型结果 。               |\n| 22   | **IntToLongFunction**       | 接受一个int类型输入，返回一个long类型结果。                  |\n| 23   | **IntUnaryOperator**        | 接受一个参数同为类型int,返回值类型也为int 。                 |\n| 24   | **LongBinaryOperator**      | 接受两个参数同为类型long,返回值类型也为long。                |\n| 25   | **LongConsumer**            | 接受一个long类型的输入参数，无返回值。                       |\n| 26   | **LongFunction<R>**         | 接受一个long类型输入参数，返回一个结果。                     |\n| 27   | **LongPredicate**           | 接受一个long输入参数，返回一个布尔值类型结果。               |\n| 28   | **LongSupplier**            | 无参数，返回一个结果long类型的值。                           |\n| 29   | **LongToDoubleFunction**    | 接受一个long类型输入，返回一个double类型结果。               |\n| 30   | **LongToIntFunction**       | 接受一个long类型输入，返回一个int类型结果。                  |\n| 31   | **LongUnaryOperator**       | 接受一个参数同为类型long,返回值类型也为long。                |\n| 32   | **ObjDoubleConsumer<T>**    | 接受一个object类型和一个double类型的输入参数，无返回值。     |\n| 33   | **ObjIntConsumer<T>**       | 接受一个object类型和一个int类型的输入参数，无返回值。        |\n| 34   | **ObjLongConsumer<T>**      | 接受一个object类型和一个long类型的输入参数，无返回值。       |\n| 35   | **Predicate<T>**            | 接受一个输入参数，返回一个布尔值结果。                       |\n| 36   | **Supplier<T>**             | 无参数，返回一个结果。                                       |\n| 37   | **ToDoubleBiFunction<T,U>** | 接受两个输入参数，返回一个double类型结果                     |\n| 38   | **ToDoubleFunction<T>**     | 接受一个输入参数，返回一个double类型结果                     |\n| 39   | **ToIntBiFunction<T,U>**    | 接受两个输入参数，返回一个int类型结果。                      |\n| 40   | **ToIntFunction<T>**        | 接受一个输入参数，返回一个int类型结果。                      |\n| 41   | **ToLongBiFunction<T,U>**   | 接受两个输入参数，返回一个long类型结果。                     |\n| 42   | **ToLongFunction<T>**       | 接受一个输入参数，返回一个long类型结果。                     |\n| 43   | **UnaryOperator<T>**        | 接受一个参数为类型T,返回值类型也为T。                        |\n\n我们用35  **Predicate<T>**  接受一个输入参数，返回一个布尔值结果。来举个例子\n\n```java\npackage effectiveJava.functionTest;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Predicate;\n\npublic class Java8Tester {\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n        // Predicate<Integer> predicate = n -> true\n        // n 是一个参数传递到 Predicate 接口的 test 方法\n        // n 如果存在则 test 方法返回 true\n\n        System.out.println(\"输出所有数据:\");\n        eval(list, n -> true);\n\n\n        // Predicate<Integer> predicate1 = n -> n%2 == 0\n        // n 是一个参数传递到 Predicate 接口的 test 方法\n        // 如果 n%2 为 0 test 方法返回 true\n\n        System.out.println(\"输出所有偶数:\");\n        eval(list, n -> n % 2 == 0);\n\n        // Predicate<Integer> predicate2 = n -> n > 3\n        // n 是一个参数传递到 Predicate 接口的 test 方法\n        // 如果 n 大于 3 test 方法返回 true\n\n        System.out.println(\"输出大于 3 的所有数字:\");\n        eval(list, n -> n > 3);\n    }\n\n\n    public static void eval(List<Integer> list, Predicate<Integer> predicate) {\n        for (Integer i : list) {\n            if (predicate.test(i)) {\n                System.out.println(i);\n            }\n        }\n    }\n}\n\n```\n\n当然是用Lambda后，`eval`就可以简写为\n\n```java\npublic static void eval(List<Integer> list, Predicate<Integer> predicate) {\n    list.stream().filter(predicate).forEach(System.out::println);\n}\n```\n\njava.util.Function 中共有43个接口。别指望能够全部记住它们，但是如果能记住其中6个基础接口，必要时就可以推断出其余接口了。\n\n1. 基础接口作用于对象引用类型\n2. Operator 接口代表其结果与参数类型一致的函数\n3. Predicate 接口代表带有一个参数 并返回一个 boolean 的函数\n4. Function 接口代表其参数与返回的类型不一致的函数\n5. Supplier 接口代表没有参数并且返回（或“提供”）一个值的函数\n6. Consumer 表的是带有一个函数但不返回任何值的函数，相当于消费掉了其参数\n\n比如下面这个代码\n\n```java\nList<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nlist.stream().filter(a -> a > 6).forEach(System.out::println);\n```\n\n这是个很常见的用来打印大于6的值，我们来看下这个`filter`接口。\n\n```java\n\t/**\n     * Returns a stream consisting of the elements of this stream that match\n     * the given predicate.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                  predicate to apply to each element to determine if it\n     *                  should be included\n     * @return the new stream\n     */\n\tStream<T> filter(Predicate<? super T> predicate);\n```\n\n这里用到的就是我们的函数式编程。再比如\n\n```java\n//求最大值\nOptional<Integer> max1 = list.stream().reduce(Integer::max);\n```\n\n```\nOptional<T> reduce(BinaryOperator<T> accumulator);\n```\n\n等等，java8给我们提供了大量的示例，告诉我们要尽量使用函数式编程。\n\njdk8对于许多常用的类都扩展了一些面向函数，lambda表达式，方法引用的功能，使得java面向函数编程更为方便。其中Map.merge方法就是其中一个，merge方法有三个参数，**key**：map中的键，**value**：使用者传入的值，**remappingFunction**：BiFunction函数接口(该接口接收两个值，执行自定义功能并返回最终值)。当map中不存在指定的key时，便将传入的value设置为key的值，当key存在值时，执行一个方法该方法接收key的旧值和传入的value，执行自定义的方法返回最终结果设置为key的值。\n\n举个例子，当map中存在某个key，那么我们把value取出来加上新值，再存进去；传统办法是先判断，如果不存在key，则直接存，如果存在，则取出值加上新值，再把值重新put进去。当使用了merge后，我们的操作就简便多了\n\n```java\npackage effectiveJava.functionTest;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class MapMergeTest {\n\n    public static void main(String[] args) {\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"id\", 1);\n        map.merge(\"id\", 1, (oldValue, newValue) -> oldValue + newValue);\n        map.merge(\"name\", 1, (oldValue, newValue) -> oldValue + newValue);\n        System.out.println(map.toString());\n    }\n}\n```\n\n运行结果：\n\n```java\n{name=1, id=2}\n```\n\n与匿名类相比， Lambda 的主要优势在于更加简洁。Java 提供了生成比 Lambda 更简洁函数对象的方法：**方法引用（method reference）**。\n\n比如`map.merge(\"id\", 1, (oldValue, newValue) -> oldValue + newValue);`这段代码我们就可以简写为\n\n```java\nmap.merge(\"id\", 1, Integer::sum);\n```\n\n记住一句话：**只要方法引用更加简洁、清晰，就用方法引用；如果方法引用并不简洁，就坚持使用 Lambda。**\n\n##### 5，Stream\n\n>`Stream`将要处理的元素集合看作一种流，在流的过程中，借助`Stream API`对流中的元素进行操作，比如：筛选、排序、聚合等。\n\n>`Optional`类是一个可以为`null`的容器对象。如果值存在则`isPresent()`方法会返回`true`，调用`get()`方法会返回该对象。\n\n我们先举个实例\n\n```java\npackage effectiveJava.functionTest;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.junit.Test;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class SteamTest {\n    static List<Person> personList = new ArrayList<>();\n\n    public static void list() {\n        personList.add(new Person(\"Tom\", 8900, 20, \"male\", \"New York\"));\n        personList.add(new Person(\"Jack\", 7000, 20, \"male\", \"Washington\"));\n        personList.add(new Person(\"Lily\", 7800, 20, \"female\", \"Washington\"));\n        personList.add(new Person(\"Anni\", 8200, 20, \"female\", \"New York\"));\n        personList.add(new Person(\"Owen\", 9500, 20, \"male\", \"New York\"));\n        personList.add(new Person(\"Alisa\", 7900, 20, \"female\", \"New York\"));\n    }\n    \n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Person implements Cloneable {\n    private String name;  // 姓名\n    private int salary; // 薪资\n    private int age; // 年龄\n    private String sex; //性别\n    private String area;  // 地区\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n```\n\n1. 筛选（filter）\n\n   ```java\n   @Test\n   public void testFilter() {\n       List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n   \n       list.stream().filter(a -> a > 6).forEach(System.out::println);\n   \n       Optional<Integer> first = list.stream().filter(a -> a > 6).findFirst();\n   \n       Optional<Integer> any = list.stream().filter(a -> a > 6).findAny();\n   \n       // 是否包含符合特定条件的元素\n       boolean anyMatch = list.stream().anyMatch(x -> x < 6);\n       System.out.println(\"匹配第一个值：\" + first.get());\n       System.out.println(\"匹配任意一个值：\" + any.get());\n       System.out.println(\"是否存在大于6的值：\" + anyMatch);\n   }\n   ```\n\n2. 聚合（max/min/count）\n\n   ```java\n   @Test\n   public void testMinMaxCount() {\n       List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n   \t//最小值\n       Optional<Integer> min = list.stream().filter(a -> a > 6).min(Integer::compareTo);\n       System.out.println(min.get());\n   \t//最大值\n       Optional<Integer> max = list.stream().filter(a -> a > 6).max(Comparator.comparingInt(a -> a));\n       System.out.println(max.get());\n   \t//长度\n       long count = list.stream().filter(a -> a > 6).count();\n       System.out.println(count);\n   }\n   ```\n\n3. 映射（map/flatMap）\n\n   ```java\n   /**\n    * map：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。\n    * flatMap：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。\n    */\n   @Test\n   public void testMap() {\n   \n       List<String> list = Arrays.asList(\"abc\", \"def\", \"ghi\", \"jkl\");\n   \n       List<String> strList = list.stream().map(String::toUpperCase).collect(Collectors.toList());\n       System.out.println(strList.toString());\n   \n       List<Integer> numList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n       List<Integer> newNumList = numList.stream().map(a -> a + 3).collect(Collectors.toList());\n       System.out.println(newNumList.toString());\n   \n       list();\n       //不改变\n       List<Person> newPersonList = personList.stream().map(a -> {\n           Person p = null;\n           try {\n               p = (Person) a.clone();\n           } catch (CloneNotSupportedException e) {\n               e.printStackTrace();\n           }\n           p.setSalary(a.getSalary() + 10000);\n           return p;\n       }).collect(Collectors.toList());\n       System.out.println(personList.toString());\n       System.out.println(newPersonList.toString());\n   \n       //改变\n       personList.stream().map(a -> {\n           a.setSalary(a.getSalary() + 10000);\n           return a;\n       }).collect(Collectors.toList());\n       System.out.println(personList.toString());\n   \n   \n       List<String> flatList = Arrays.asList(\"m,k,l,a\", \"1,3,5,7\");\n   \n       List<String> newFlatList = flatList.stream().flatMap(a -> {\n           String[] strArr = a.split(\",\");\n           return Arrays.stream(strArr);\n       }).collect(Collectors.toList());\n       System.out.println(flatList.toString());\n       System.out.println(newFlatList.toString());\n   }\n   ```\n\n4. 归约（reduce）\n\n   ```java\n   /**\n    * reduce 归约\n    */\n   @Test\n   public void testReduce() {\n       List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n   \n       //求和\n       Optional<Integer> sum = list.stream().reduce(Integer::sum);\n       System.out.println(sum.get());\n   \n       //求最大值\n       Optional<Integer> max1 = list.stream().reduce((a, b) -> a > b ? a : b);\n       Optional<Integer> max2 = list.stream().reduce(Integer::max);\n       Integer max3 = list.stream().reduce(100, Integer::max);\n       System.out.println(max1.get());\n       System.out.println(max2.get());\n       System.out.println(max3);\n   }\n   ```\n\n5. 收集（collect）\n\n   ```java\n   @Test\n   public void testCollect() {\n       list();\n       List<Person> newList = personList.stream().filter(a -> a.getSalary() > 8000).collect(Collectors.toList());\n       System.out.println(newList.toString());\n   \n       List<String> nameList = personList.stream().filter(a -> a.getSalary() > 8000).map(Person::getName).collect(Collectors.toList());\n       System.out.println(nameList.toString());\n   \n       Map<String, Person> nameMap = personList.stream().collect(Collectors.toMap(Person::getName, b -> b, (oldValue, newValue) -> newValue));\n       System.out.println(nameMap.toString());\n   }\n   ```\n\n6. 统计（count/averaging）\n\n   ```java\n   @Test\n   public void testAveraging() {\n       list();\n       //求和\n       Long count = personList.stream().collect(Collectors.counting());\n       //平均值\n       double average = personList.stream().collect(Collectors.averagingDouble(Person::getSalary));\n       //最大值\n       Optional<Integer> max = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compareTo));\n       //求和\n       Integer sum = personList.stream().collect(Collectors.summingInt(Person::getSalary));\n       //统计\n       DoubleSummaryStatistics statistics = personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));\n       statistics.getMax();\n       statistics.getMin();\n       statistics.getCount();\n       statistics.getAverage();\n       statistics.getSum();\n   }\n   ```\n\n7. 分组（partitioningBy/groupingBy）\n\n   ```java\n   @Test\n   public void testGroupingBy() {\n       list();\n       Map<Boolean, List<Person>> map = personList.stream().collect(Collectors.partitioningBy(a -> a.getSalary() > 8000));\n       Map<String, List<Person>> sexMap = personList.stream().collect(Collectors.groupingBy(Person::getSex));\n   \n       Map<String, Map<String, List<Person>>> tmp =\n           personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.groupingBy(Person::getArea)));\n   }\n   ```\n\n8. 接合（joining）\n\n   ```java\n   @Test\n   public void testJoin() {\n       list();\n       String str = personList.stream().map(Person::getName).collect(Collectors.joining(\",\"));\n       System.out.println(str);\n   }\n   ```\n\n9. 排序（sorted）\n\n   ```java\n   /**\n    * 排序\n    * sorted()：自然排序，流中元素需实现Comparable接口\n    * sorted(Comparator com)：Comparator排序器自定义排序\n    */\n   @Test\n   public void testSorted() {\n       list();\n       //正序\n       List<Person> newList = personList.stream().sorted(Comparator.comparingInt(Person::getSalary)).collect(Collectors.toList());\n       System.out.println(newList.toString());\n       //倒序\n       List<Integer> newList2 = personList.stream().map(Person::getSalary).sorted(Comparator.comparingInt(a -> (int) a).reversed()).collect(Collectors.toList());\n       System.out.println(newList2.toString());\n   }\n   ```\n\n10. 提取/组合\n\n    ```java\n    @Test\n    public void testDistinct() {\n        String[] arr1 = {\"a\", \"b\", \"c\", \"d\"};\n        String[] arr2 = {\"d\", \"e\", \"f\", \"g\"};\n    \n        List<String> strList = new ArrayList<>(Arrays.asList(arr1));\n    \n        Stream<String> stream1 = Stream.of(arr1);\n        Stream<String> stream2 = Stream.of(arr2);\n    \n        // concat:合并两个流\n        // distinct：去重\n        List<String> list = Stream.concat(stream1, stream2).distinct().collect(Collectors.toList());\n        System.out.println(list);\n    \n        // limit：限制从流中获得前n个数据\n        List<String> list2 = strList.stream().limit(2).collect(Collectors.toList());\n        System.out.println(list2.toString());\n    \n        // skip：跳过前n个数据\n        List<String> list3 = strList.stream().skip(1).limit(2).collect(Collectors.toList());\n        System.out.println(list3.toString());\n    \n        // iterate：遍历\n        List<Integer> list4 = Stream.iterate(1, x -> x + 2).skip(1).limit(5).collect(Collectors.toList());\n        System.out.println(list4);\n    }\n    ```\n\n##### 6，同步访问共享的可变数据\n\n举个例子\n\n```java\npackage effectiveJava.functionTest;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class StopThread {\n    private static boolean stopRequest;\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> {\n            int i = 0;\n            while (!stopRequest) {\n                i++;\n            }\n        });\n        t.start();\n        TimeUnit.SECONDS.sleep(1);\n        stopRequest = true;\n    }\n}\n```\n\n你可能期待这个程序运行大约一秒钟左右，之后主线程将 stopRequest 设置为 true ，致使后台线程的循环终止。但是实际上，这个程序永远不会终止：因为后台 线程永远在循环！\n\n问题在于，由于没有同步，就不能保证后台线程何时‘看到’主线程对 stopRequest 的值所做的改变。没有同步，虚拟机将以下代码：\n\n```java\nwhile (!stopRequest) {\n    i++;\n}\n```\n\n转变成这样：\n\n```java\nif (!stopRequest){\n    while(true){\n\t\ti++;    \n\t}\n}\n```\n\n这种优化称作**提升（ hoisting ）**，正是 OpenJDK Server VM的工作 结果是一个**活性失败 (liveness failure ）**：这个程序并没有得到提升。\n\n修正这个问题的一种方式是同步访问`stopRequest`域。\n\n```java\npackage effectiveJava.functionTest;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class StopThread {\n    private static volatile boolean stopRequest;\n\n    private static synchronized void setStopRequest() {\n        stopRequest = true;\n    }\n\n    private static synchronized boolean getStopRequest() {\n        return stopRequest;\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> {\n            int i = 0;\n            while (!getStopRequest()) {\n                i++;\n            }\n        });\n\n        t.start();\n        TimeUnit.SECONDS.sleep(1);\n        setStopRequest();\n    }\n}\n```\n\n注意，我们的**读和写操作都要同步**，否则无法保证同步起作用。\n\n还有一种方式就是`volatile`关键字，虽然 volatile 修饰符不执行互斥访问，但它可以保证任何一个线程在读取该域的时候都将看到最近刚刚被写入的值：\n\n```java\npackage effectiveJava.functionTest;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class StopThread {\n    private static volatile boolean stopRequest;\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> {\n            int i = 0;\n            while (!stopRequest) {\n                i++;\n            }\n        });\n\n        t.start();\n        TimeUnit.SECONDS.sleep(1);\n        stopRequest = true;\n    }\n}\n```\n\n在使用volatile关键字的时候，我们需要特别注意，不能使用i++（增量操作符）的操作，因为这个操作**不是原子的**。这个操作域中执行两项操作：首先它读取值，然后写回一个新值，相当于原来的值再加上1。如果第二个线程在第一个线程读取旧值和写回新值期间读取这个域，第二个线程就会与第一个线程一起看到同一个值，并返回相同的序列号，这就是**安全性失败（ safety failure ）**：这个程序会计算出错误的结果。修复方法是用synchronized来代替volatile。当然最好的办法是替换成原子类java.util.concurrent.atomic。\n\n```java\nAtomiclang i =new Atomiclong(); \ni.getAndincrement();\n```\n\n总而言之， **当多个线程共享可变数据的时候，每个读或者写数据的线程都必须执行同步。**","source":"_posts/java日记.md","raw":"---\ntitle: java日记\ndate: 2020-11-09 19:47:33\ntags:\n- java\n---\n\n##### 1，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱\n\n比如下面这段代码\n\n```java\nimport cn.hutool.core.date.DateUtil;\n\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(DateUtil.now());\n        sum();\n        System.out.println(DateUtil.now());\n\n    }\n\n    public static long sum() {\n        Long sum = 0L;\n        for (long i = 0; i < Integer.MAX_VALUE; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n```\n\n我们运行一下\n\n```java\n2020-11-09 19:57:12\n2020-11-09 19:57:20\n```\n\n这段程序是没有问题的，慢的原因在哪，在`Long sum = 0L`这里，意味着程序构造了大约 2^31 个多余的 Long 实例（大约每次往 Long sum 中增加 long 时构造一个实例） 。将sum 的声明从 Long 改成 long ，我们再试一下\n\n```java\n2020-11-09 19:59:44\n2020-11-09 19:59:45\n```\n\n##### 2，避免创建不必要的对象\n\n比如下面这个例子\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(isNumber(\"312\"));\n\n    }\n    static boolean isNumber(String s) {\n        return s.matches(\"^[0-9]*$\");\n    }\n}\n```\n\n一个正则表达式，判断传过来的字符串是不是数字，这个方案看起来没有问题，但是如果这个方法使用的非常频繁，那么这种写法就不太合适了，我们先来看看`matcher`这个方法\n\n```java\npublic boolean matches(String regex) {\n    return Pattern.matches(regex, this);\n}\n```\n\n再往里走\n\n```java\npublic static boolean matches(String regex, CharSequence input) {\n    Pattern p = Pattern.compile(regex);\n    Matcher m = p.matcher(input);\n    return m.matches();\n}\n```\n\n再往里走\n\n```java\npublic static Pattern compile(String regex) {\n    return new Pattern(regex, 0);\n}\n```\n\n它在内部为正则表达式创建了一个 `Pattern` 实例，却只用了1次，之后就可以进行垃圾回收了，创建 `Pattenr`实例的成本很高 ，因为需要将正则表达式编译成一个有限状态机（ finite state machine）。\n\n为了提升性能，应该显式地将正则表达式编译成一个 `Pattern` 实例（不可变），让它成为类初始化的一部分，并将它缓存起来，每当调用 `isNumber`方法的时候就重用同一个实例：\n\n```java\nimport java.util.regex.Pattern;\n\npublic class Test {\n    private static final Pattern ISNUM = Pattern.compile(\"^[0-9]*$\");\n    public static void main(String[] args) {\n        System.out.println(isNumber(\"312\"));\n\n    }\n    static boolean isNumber(String s) {\n        return ISNUM.matcher(s).matches();\n    }\n}\n```\n\n##### 3，覆盖equals必须覆盖hashCode\n\n在每个覆盖了equals方法的类中，也必须覆盖hashCode方法。如果不这样做的话，就会违反Object.hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，这样的集合包括HashMap、HashSet和Hashtable\n\n1. 只要对象的equals方法的比较操作所用到的信息未被修改，那么对同一个对象调用多次其hashCode返回值不变\n2. 若两个对象通过equals得到是相等的，那么调用这两个对象任意一个对象的hashCode方法产生整数结果一样\n3. 若两个对象通过equals得到是不相等的，那么调用这两个对象任意一个对象的hashCode方法产生的结果也可能相等,但是从提高散列表(hash table)的性能分析，给不相等的对象产生不同的结果会更好\n\n##### 4，Lambda 优先于匿名类，和 java.util.function使用\n\n举个例子，我们看下面这个代码\n\n```java\npackage effectiveJava.enumTest;\n\npublic enum OpemrationOld {\n    PLUS(\"+\") {\n        public double apply(double x, double y) {\n            return x + y;\n        }\n    },\n    MINUS(\"-\") {\n        public double apply(double x, double y) {\n            return x - y;\n        }\n    },\n    TIMES(\"*\") {\n        public double apply(double x, double y) {\n            return x * y;\n        }\n    },\n    DIVIDE(\"/\") {\n        public double apply(double x, double y) {\n            return x / y;\n        }\n    };\n    private final String symbol;\n\n    OpemrationOld(String symbol) {\n        this.symbol = symbol;\n    }\n\n    public abstract double apply(double x, double y);\n}\n\nclass testold {\n    public static void main(String[] args) {\n        double value = OpemrationOld.DIVIDE.apply(1,2);\n        System.out.println(value);\n    }\n}\n```\n\n这个代码表示对任意两个数进行加减乘除运算，jdk1.8新增了Lambda表达式后，我们就可以简写这段代码\n\n```java\npackage effectiveJava.enumTest;\n\nimport java.util.function.DoubleBinaryOperator;\n\npublic enum Opemration {\n    PLUS(\"+\", (x, y) -> x + y),\n    MINUS(\"-\", (x, y) -> x - y),\n    TIMES(\"*\", (x, y) -> x * y),\n    DIVIDE(\"/\", (x, y) -> x / y);\n\n\n    private final String symbol;\n    private final DoubleBinaryOperator op;\n\n    Opemration(String symbol, DoubleBinaryOperator op) {\n        this.symbol = symbol;\n        this.op = op;\n    }\n\n    @Override\n    public String toString() {\n        return symbol;\n    }\n\n    public double apply(double x, double y) {\n        return op.applyAsDouble(x, y);\n    }\n}\n\nclass test {\n    public static void main(String[] args) {\n        double value = Opemration.DIVIDE.apply(1, 2);\n        System.out.println(value);\n    }\n}\n```\n\n这里我们提一下`DoubleBinaryOperator`这个接口，这个接口是java.util.function包中的，也属于jdk1.8新增的包，用来支持 Java的函数式编程。\n\n那这个接口是什么意思呢 表示：代表了作用于两个double值操作符的操作，并且返回了一个double值的结果。\n\n这个包下提供了非常多的函数\n\n![image-20201110202033145](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201110202033145.png?x-oss-process=style/radio93)\n\n| 序号 | **接口**                    | **描述**                                                     |\n| ---- | --------------------------- | ------------------------------------------------------------ |\n| 1    | **BiConsumer<T,U>**         | 代表了一个接受两个输入参数的操作，并且不返回任何结果         |\n| 2    | **BiFunction<T,U,R>**       | 代表了一个接受两个输入参数的方法，并且返回一个结果           |\n| 3    | **BinaryOperator<T>**       | 代表了一个作用于于两个同类型操作符的操作，并且返回了操作符同类型的结果 |\n| 4    | **BiPredicate<T,U>**        | 代表了一个两个参数的boolean值方法                            |\n| 5    | **BooleanSupplier**         | 代表了boolean值结果的提供方                                  |\n| 6    | **Consumer<T>**             | 代表了接受一个输入参数并且无返回的操作                       |\n| 7    | **DoubleBinaryOperator**    | 代表了作用于两个double值操作符的操作，并且返回了一个double值的结果。 |\n| 8    | **DoubleConsumer**          | 代表一个接受double值参数的操作，并且不返回结果。             |\n| 9    | **DoubleFunction<R>**       | 代表接受一个double值参数的方法，并且返回结果                 |\n| 10   | **DoublePredicate**         | 代表一个拥有double值参数的boolean值方法                      |\n| 11   | **DoubleSupplier**          | 代表一个double值结构的提供方                                 |\n| 12   | **DoubleToIntFunction**     | 接受一个double类型输入，返回一个int类型结果。                |\n| 13   | **DoubleToLongFunction**    | 接受一个double类型输入，返回一个long类型结果                 |\n| 14   | **DoubleUnaryOperator**     | 接受一个参数同为类型double,返回值类型也为double 。           |\n| 15   | **Function<T,R>**           | 接受一个输入参数，返回一个结果。                             |\n| 16   | **IntBinaryOperator**       | 接受两个参数同为类型int,返回值类型也为int 。                 |\n| 17   | **IntConsumer**             | 接受一个int类型的输入参数，无返回值 。                       |\n| 18   | **IntFunction<R>**          | 接受一个int类型输入参数，返回一个结果 。                     |\n| 19   | **IntPredicate**            | 接受一个int输入参数，返回一个布尔值的结果。                  |\n| 20   | **IntSupplier**             | 无参数，返回一个int类型结果。                                |\n| 21   | **IntToDoubleFunction**     | 接受一个int类型输入，返回一个double类型结果 。               |\n| 22   | **IntToLongFunction**       | 接受一个int类型输入，返回一个long类型结果。                  |\n| 23   | **IntUnaryOperator**        | 接受一个参数同为类型int,返回值类型也为int 。                 |\n| 24   | **LongBinaryOperator**      | 接受两个参数同为类型long,返回值类型也为long。                |\n| 25   | **LongConsumer**            | 接受一个long类型的输入参数，无返回值。                       |\n| 26   | **LongFunction<R>**         | 接受一个long类型输入参数，返回一个结果。                     |\n| 27   | **LongPredicate**           | 接受一个long输入参数，返回一个布尔值类型结果。               |\n| 28   | **LongSupplier**            | 无参数，返回一个结果long类型的值。                           |\n| 29   | **LongToDoubleFunction**    | 接受一个long类型输入，返回一个double类型结果。               |\n| 30   | **LongToIntFunction**       | 接受一个long类型输入，返回一个int类型结果。                  |\n| 31   | **LongUnaryOperator**       | 接受一个参数同为类型long,返回值类型也为long。                |\n| 32   | **ObjDoubleConsumer<T>**    | 接受一个object类型和一个double类型的输入参数，无返回值。     |\n| 33   | **ObjIntConsumer<T>**       | 接受一个object类型和一个int类型的输入参数，无返回值。        |\n| 34   | **ObjLongConsumer<T>**      | 接受一个object类型和一个long类型的输入参数，无返回值。       |\n| 35   | **Predicate<T>**            | 接受一个输入参数，返回一个布尔值结果。                       |\n| 36   | **Supplier<T>**             | 无参数，返回一个结果。                                       |\n| 37   | **ToDoubleBiFunction<T,U>** | 接受两个输入参数，返回一个double类型结果                     |\n| 38   | **ToDoubleFunction<T>**     | 接受一个输入参数，返回一个double类型结果                     |\n| 39   | **ToIntBiFunction<T,U>**    | 接受两个输入参数，返回一个int类型结果。                      |\n| 40   | **ToIntFunction<T>**        | 接受一个输入参数，返回一个int类型结果。                      |\n| 41   | **ToLongBiFunction<T,U>**   | 接受两个输入参数，返回一个long类型结果。                     |\n| 42   | **ToLongFunction<T>**       | 接受一个输入参数，返回一个long类型结果。                     |\n| 43   | **UnaryOperator<T>**        | 接受一个参数为类型T,返回值类型也为T。                        |\n\n我们用35  **Predicate<T>**  接受一个输入参数，返回一个布尔值结果。来举个例子\n\n```java\npackage effectiveJava.functionTest;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Predicate;\n\npublic class Java8Tester {\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n        // Predicate<Integer> predicate = n -> true\n        // n 是一个参数传递到 Predicate 接口的 test 方法\n        // n 如果存在则 test 方法返回 true\n\n        System.out.println(\"输出所有数据:\");\n        eval(list, n -> true);\n\n\n        // Predicate<Integer> predicate1 = n -> n%2 == 0\n        // n 是一个参数传递到 Predicate 接口的 test 方法\n        // 如果 n%2 为 0 test 方法返回 true\n\n        System.out.println(\"输出所有偶数:\");\n        eval(list, n -> n % 2 == 0);\n\n        // Predicate<Integer> predicate2 = n -> n > 3\n        // n 是一个参数传递到 Predicate 接口的 test 方法\n        // 如果 n 大于 3 test 方法返回 true\n\n        System.out.println(\"输出大于 3 的所有数字:\");\n        eval(list, n -> n > 3);\n    }\n\n\n    public static void eval(List<Integer> list, Predicate<Integer> predicate) {\n        for (Integer i : list) {\n            if (predicate.test(i)) {\n                System.out.println(i);\n            }\n        }\n    }\n}\n\n```\n\n当然是用Lambda后，`eval`就可以简写为\n\n```java\npublic static void eval(List<Integer> list, Predicate<Integer> predicate) {\n    list.stream().filter(predicate).forEach(System.out::println);\n}\n```\n\njava.util.Function 中共有43个接口。别指望能够全部记住它们，但是如果能记住其中6个基础接口，必要时就可以推断出其余接口了。\n\n1. 基础接口作用于对象引用类型\n2. Operator 接口代表其结果与参数类型一致的函数\n3. Predicate 接口代表带有一个参数 并返回一个 boolean 的函数\n4. Function 接口代表其参数与返回的类型不一致的函数\n5. Supplier 接口代表没有参数并且返回（或“提供”）一个值的函数\n6. Consumer 表的是带有一个函数但不返回任何值的函数，相当于消费掉了其参数\n\n比如下面这个代码\n\n```java\nList<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nlist.stream().filter(a -> a > 6).forEach(System.out::println);\n```\n\n这是个很常见的用来打印大于6的值，我们来看下这个`filter`接口。\n\n```java\n\t/**\n     * Returns a stream consisting of the elements of this stream that match\n     * the given predicate.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                  predicate to apply to each element to determine if it\n     *                  should be included\n     * @return the new stream\n     */\n\tStream<T> filter(Predicate<? super T> predicate);\n```\n\n这里用到的就是我们的函数式编程。再比如\n\n```java\n//求最大值\nOptional<Integer> max1 = list.stream().reduce(Integer::max);\n```\n\n```\nOptional<T> reduce(BinaryOperator<T> accumulator);\n```\n\n等等，java8给我们提供了大量的示例，告诉我们要尽量使用函数式编程。\n\njdk8对于许多常用的类都扩展了一些面向函数，lambda表达式，方法引用的功能，使得java面向函数编程更为方便。其中Map.merge方法就是其中一个，merge方法有三个参数，**key**：map中的键，**value**：使用者传入的值，**remappingFunction**：BiFunction函数接口(该接口接收两个值，执行自定义功能并返回最终值)。当map中不存在指定的key时，便将传入的value设置为key的值，当key存在值时，执行一个方法该方法接收key的旧值和传入的value，执行自定义的方法返回最终结果设置为key的值。\n\n举个例子，当map中存在某个key，那么我们把value取出来加上新值，再存进去；传统办法是先判断，如果不存在key，则直接存，如果存在，则取出值加上新值，再把值重新put进去。当使用了merge后，我们的操作就简便多了\n\n```java\npackage effectiveJava.functionTest;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class MapMergeTest {\n\n    public static void main(String[] args) {\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"id\", 1);\n        map.merge(\"id\", 1, (oldValue, newValue) -> oldValue + newValue);\n        map.merge(\"name\", 1, (oldValue, newValue) -> oldValue + newValue);\n        System.out.println(map.toString());\n    }\n}\n```\n\n运行结果：\n\n```java\n{name=1, id=2}\n```\n\n与匿名类相比， Lambda 的主要优势在于更加简洁。Java 提供了生成比 Lambda 更简洁函数对象的方法：**方法引用（method reference）**。\n\n比如`map.merge(\"id\", 1, (oldValue, newValue) -> oldValue + newValue);`这段代码我们就可以简写为\n\n```java\nmap.merge(\"id\", 1, Integer::sum);\n```\n\n记住一句话：**只要方法引用更加简洁、清晰，就用方法引用；如果方法引用并不简洁，就坚持使用 Lambda。**\n\n##### 5，Stream\n\n>`Stream`将要处理的元素集合看作一种流，在流的过程中，借助`Stream API`对流中的元素进行操作，比如：筛选、排序、聚合等。\n\n>`Optional`类是一个可以为`null`的容器对象。如果值存在则`isPresent()`方法会返回`true`，调用`get()`方法会返回该对象。\n\n我们先举个实例\n\n```java\npackage effectiveJava.functionTest;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.junit.Test;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class SteamTest {\n    static List<Person> personList = new ArrayList<>();\n\n    public static void list() {\n        personList.add(new Person(\"Tom\", 8900, 20, \"male\", \"New York\"));\n        personList.add(new Person(\"Jack\", 7000, 20, \"male\", \"Washington\"));\n        personList.add(new Person(\"Lily\", 7800, 20, \"female\", \"Washington\"));\n        personList.add(new Person(\"Anni\", 8200, 20, \"female\", \"New York\"));\n        personList.add(new Person(\"Owen\", 9500, 20, \"male\", \"New York\"));\n        personList.add(new Person(\"Alisa\", 7900, 20, \"female\", \"New York\"));\n    }\n    \n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Person implements Cloneable {\n    private String name;  // 姓名\n    private int salary; // 薪资\n    private int age; // 年龄\n    private String sex; //性别\n    private String area;  // 地区\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n```\n\n1. 筛选（filter）\n\n   ```java\n   @Test\n   public void testFilter() {\n       List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n   \n       list.stream().filter(a -> a > 6).forEach(System.out::println);\n   \n       Optional<Integer> first = list.stream().filter(a -> a > 6).findFirst();\n   \n       Optional<Integer> any = list.stream().filter(a -> a > 6).findAny();\n   \n       // 是否包含符合特定条件的元素\n       boolean anyMatch = list.stream().anyMatch(x -> x < 6);\n       System.out.println(\"匹配第一个值：\" + first.get());\n       System.out.println(\"匹配任意一个值：\" + any.get());\n       System.out.println(\"是否存在大于6的值：\" + anyMatch);\n   }\n   ```\n\n2. 聚合（max/min/count）\n\n   ```java\n   @Test\n   public void testMinMaxCount() {\n       List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n   \t//最小值\n       Optional<Integer> min = list.stream().filter(a -> a > 6).min(Integer::compareTo);\n       System.out.println(min.get());\n   \t//最大值\n       Optional<Integer> max = list.stream().filter(a -> a > 6).max(Comparator.comparingInt(a -> a));\n       System.out.println(max.get());\n   \t//长度\n       long count = list.stream().filter(a -> a > 6).count();\n       System.out.println(count);\n   }\n   ```\n\n3. 映射（map/flatMap）\n\n   ```java\n   /**\n    * map：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。\n    * flatMap：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。\n    */\n   @Test\n   public void testMap() {\n   \n       List<String> list = Arrays.asList(\"abc\", \"def\", \"ghi\", \"jkl\");\n   \n       List<String> strList = list.stream().map(String::toUpperCase).collect(Collectors.toList());\n       System.out.println(strList.toString());\n   \n       List<Integer> numList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n       List<Integer> newNumList = numList.stream().map(a -> a + 3).collect(Collectors.toList());\n       System.out.println(newNumList.toString());\n   \n       list();\n       //不改变\n       List<Person> newPersonList = personList.stream().map(a -> {\n           Person p = null;\n           try {\n               p = (Person) a.clone();\n           } catch (CloneNotSupportedException e) {\n               e.printStackTrace();\n           }\n           p.setSalary(a.getSalary() + 10000);\n           return p;\n       }).collect(Collectors.toList());\n       System.out.println(personList.toString());\n       System.out.println(newPersonList.toString());\n   \n       //改变\n       personList.stream().map(a -> {\n           a.setSalary(a.getSalary() + 10000);\n           return a;\n       }).collect(Collectors.toList());\n       System.out.println(personList.toString());\n   \n   \n       List<String> flatList = Arrays.asList(\"m,k,l,a\", \"1,3,5,7\");\n   \n       List<String> newFlatList = flatList.stream().flatMap(a -> {\n           String[] strArr = a.split(\",\");\n           return Arrays.stream(strArr);\n       }).collect(Collectors.toList());\n       System.out.println(flatList.toString());\n       System.out.println(newFlatList.toString());\n   }\n   ```\n\n4. 归约（reduce）\n\n   ```java\n   /**\n    * reduce 归约\n    */\n   @Test\n   public void testReduce() {\n       List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n   \n       //求和\n       Optional<Integer> sum = list.stream().reduce(Integer::sum);\n       System.out.println(sum.get());\n   \n       //求最大值\n       Optional<Integer> max1 = list.stream().reduce((a, b) -> a > b ? a : b);\n       Optional<Integer> max2 = list.stream().reduce(Integer::max);\n       Integer max3 = list.stream().reduce(100, Integer::max);\n       System.out.println(max1.get());\n       System.out.println(max2.get());\n       System.out.println(max3);\n   }\n   ```\n\n5. 收集（collect）\n\n   ```java\n   @Test\n   public void testCollect() {\n       list();\n       List<Person> newList = personList.stream().filter(a -> a.getSalary() > 8000).collect(Collectors.toList());\n       System.out.println(newList.toString());\n   \n       List<String> nameList = personList.stream().filter(a -> a.getSalary() > 8000).map(Person::getName).collect(Collectors.toList());\n       System.out.println(nameList.toString());\n   \n       Map<String, Person> nameMap = personList.stream().collect(Collectors.toMap(Person::getName, b -> b, (oldValue, newValue) -> newValue));\n       System.out.println(nameMap.toString());\n   }\n   ```\n\n6. 统计（count/averaging）\n\n   ```java\n   @Test\n   public void testAveraging() {\n       list();\n       //求和\n       Long count = personList.stream().collect(Collectors.counting());\n       //平均值\n       double average = personList.stream().collect(Collectors.averagingDouble(Person::getSalary));\n       //最大值\n       Optional<Integer> max = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compareTo));\n       //求和\n       Integer sum = personList.stream().collect(Collectors.summingInt(Person::getSalary));\n       //统计\n       DoubleSummaryStatistics statistics = personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));\n       statistics.getMax();\n       statistics.getMin();\n       statistics.getCount();\n       statistics.getAverage();\n       statistics.getSum();\n   }\n   ```\n\n7. 分组（partitioningBy/groupingBy）\n\n   ```java\n   @Test\n   public void testGroupingBy() {\n       list();\n       Map<Boolean, List<Person>> map = personList.stream().collect(Collectors.partitioningBy(a -> a.getSalary() > 8000));\n       Map<String, List<Person>> sexMap = personList.stream().collect(Collectors.groupingBy(Person::getSex));\n   \n       Map<String, Map<String, List<Person>>> tmp =\n           personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.groupingBy(Person::getArea)));\n   }\n   ```\n\n8. 接合（joining）\n\n   ```java\n   @Test\n   public void testJoin() {\n       list();\n       String str = personList.stream().map(Person::getName).collect(Collectors.joining(\",\"));\n       System.out.println(str);\n   }\n   ```\n\n9. 排序（sorted）\n\n   ```java\n   /**\n    * 排序\n    * sorted()：自然排序，流中元素需实现Comparable接口\n    * sorted(Comparator com)：Comparator排序器自定义排序\n    */\n   @Test\n   public void testSorted() {\n       list();\n       //正序\n       List<Person> newList = personList.stream().sorted(Comparator.comparingInt(Person::getSalary)).collect(Collectors.toList());\n       System.out.println(newList.toString());\n       //倒序\n       List<Integer> newList2 = personList.stream().map(Person::getSalary).sorted(Comparator.comparingInt(a -> (int) a).reversed()).collect(Collectors.toList());\n       System.out.println(newList2.toString());\n   }\n   ```\n\n10. 提取/组合\n\n    ```java\n    @Test\n    public void testDistinct() {\n        String[] arr1 = {\"a\", \"b\", \"c\", \"d\"};\n        String[] arr2 = {\"d\", \"e\", \"f\", \"g\"};\n    \n        List<String> strList = new ArrayList<>(Arrays.asList(arr1));\n    \n        Stream<String> stream1 = Stream.of(arr1);\n        Stream<String> stream2 = Stream.of(arr2);\n    \n        // concat:合并两个流\n        // distinct：去重\n        List<String> list = Stream.concat(stream1, stream2).distinct().collect(Collectors.toList());\n        System.out.println(list);\n    \n        // limit：限制从流中获得前n个数据\n        List<String> list2 = strList.stream().limit(2).collect(Collectors.toList());\n        System.out.println(list2.toString());\n    \n        // skip：跳过前n个数据\n        List<String> list3 = strList.stream().skip(1).limit(2).collect(Collectors.toList());\n        System.out.println(list3.toString());\n    \n        // iterate：遍历\n        List<Integer> list4 = Stream.iterate(1, x -> x + 2).skip(1).limit(5).collect(Collectors.toList());\n        System.out.println(list4);\n    }\n    ```\n\n##### 6，同步访问共享的可变数据\n\n举个例子\n\n```java\npackage effectiveJava.functionTest;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class StopThread {\n    private static boolean stopRequest;\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> {\n            int i = 0;\n            while (!stopRequest) {\n                i++;\n            }\n        });\n        t.start();\n        TimeUnit.SECONDS.sleep(1);\n        stopRequest = true;\n    }\n}\n```\n\n你可能期待这个程序运行大约一秒钟左右，之后主线程将 stopRequest 设置为 true ，致使后台线程的循环终止。但是实际上，这个程序永远不会终止：因为后台 线程永远在循环！\n\n问题在于，由于没有同步，就不能保证后台线程何时‘看到’主线程对 stopRequest 的值所做的改变。没有同步，虚拟机将以下代码：\n\n```java\nwhile (!stopRequest) {\n    i++;\n}\n```\n\n转变成这样：\n\n```java\nif (!stopRequest){\n    while(true){\n\t\ti++;    \n\t}\n}\n```\n\n这种优化称作**提升（ hoisting ）**，正是 OpenJDK Server VM的工作 结果是一个**活性失败 (liveness failure ）**：这个程序并没有得到提升。\n\n修正这个问题的一种方式是同步访问`stopRequest`域。\n\n```java\npackage effectiveJava.functionTest;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class StopThread {\n    private static volatile boolean stopRequest;\n\n    private static synchronized void setStopRequest() {\n        stopRequest = true;\n    }\n\n    private static synchronized boolean getStopRequest() {\n        return stopRequest;\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> {\n            int i = 0;\n            while (!getStopRequest()) {\n                i++;\n            }\n        });\n\n        t.start();\n        TimeUnit.SECONDS.sleep(1);\n        setStopRequest();\n    }\n}\n```\n\n注意，我们的**读和写操作都要同步**，否则无法保证同步起作用。\n\n还有一种方式就是`volatile`关键字，虽然 volatile 修饰符不执行互斥访问，但它可以保证任何一个线程在读取该域的时候都将看到最近刚刚被写入的值：\n\n```java\npackage effectiveJava.functionTest;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class StopThread {\n    private static volatile boolean stopRequest;\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(() -> {\n            int i = 0;\n            while (!stopRequest) {\n                i++;\n            }\n        });\n\n        t.start();\n        TimeUnit.SECONDS.sleep(1);\n        stopRequest = true;\n    }\n}\n```\n\n在使用volatile关键字的时候，我们需要特别注意，不能使用i++（增量操作符）的操作，因为这个操作**不是原子的**。这个操作域中执行两项操作：首先它读取值，然后写回一个新值，相当于原来的值再加上1。如果第二个线程在第一个线程读取旧值和写回新值期间读取这个域，第二个线程就会与第一个线程一起看到同一个值，并返回相同的序列号，这就是**安全性失败（ safety failure ）**：这个程序会计算出错误的结果。修复方法是用synchronized来代替volatile。当然最好的办法是替换成原子类java.util.concurrent.atomic。\n\n```java\nAtomiclang i =new Atomiclong(); \ni.getAndincrement();\n```\n\n总而言之， **当多个线程共享可变数据的时候，每个读或者写数据的线程都必须执行同步。**","slug":"java日记","published":1,"updated":"2020-11-18T06:08:37.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44x30032rcwobmup939j","content":"<h5 id=\"1，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱\"><a href=\"#1，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱\" class=\"headerlink\" title=\"1，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱\"></a>1，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱</h5><p>比如下面这段代码</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.date.DateUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        System.out.println(DateUtil.now());</span><br><span class=\"line\">        sum();</span><br><span class=\"line\">        System.out.println(DateUtil.now());</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">sum</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        Long sum = <span class=\"number\">0L</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = <span class=\"number\">0</span>; i &lt; Integer.MAX_VALUE; i++) {</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>我们运行一下</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2020</span>-<span class=\"number\">11</span>-<span class=\"number\">09</span> <span class=\"number\">19</span>:<span class=\"number\">57</span>:<span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">2020</span>-<span class=\"number\">11</span>-<span class=\"number\">09</span> <span class=\"number\">19</span>:<span class=\"number\">57</span>:<span class=\"number\">20</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>这段程序是没有问题的，慢的原因在哪，在<code>Long sum = 0L</code>这里，意味着程序构造了大约 2^31 个多余的 Long 实例（大约每次往 Long sum 中增加 long 时构造一个实例） 。将sum 的声明从 Long 改成 long ，我们再试一下</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2020</span>-<span class=\"number\">11</span>-<span class=\"number\">09</span> <span class=\"number\">19</span>:<span class=\"number\">59</span>:<span class=\"number\">44</span></span><br><span class=\"line\"><span class=\"number\">2020</span>-<span class=\"number\">11</span>-<span class=\"number\">09</span> <span class=\"number\">19</span>:<span class=\"number\">59</span>:<span class=\"number\">45</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"2，避免创建不必要的对象\"><a href=\"#2，避免创建不必要的对象\" class=\"headerlink\" title=\"2，避免创建不必要的对象\"></a>2，避免创建不必要的对象</h5><p>比如下面这个例子</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        System.out.println(isNumber(<span class=\"string\">\"312\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNumber</span><span class=\"params\">(String s)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.matches(<span class=\"string\">\"^[0-9]*$\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>一个正则表达式，判断传过来的字符串是不是数字，这个方案看起来没有问题，但是如果这个方法使用的非常频繁，那么这种写法就不太合适了，我们先来看看<code>matcher</code>这个方法</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex)</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Pattern.matches(regex, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>再往里走</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex, CharSequence input)</span> </span>{</span><br><span class=\"line\">    Pattern p = Pattern.compile(regex);</span><br><span class=\"line\">    Matcher m = p.matcher(input);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m.matches();</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>再往里走</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Pattern <span class=\"title\">compile</span><span class=\"params\">(String regex)</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pattern(regex, <span class=\"number\">0</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>它在内部为正则表达式创建了一个 <code>Pattern</code> 实例，却只用了1次，之后就可以进行垃圾回收了，创建 <code>Pattenr</code>实例的成本很高 ，因为需要将正则表达式编译成一个有限状态机（ finite state machine）。</p>\n<p>为了提升性能，应该显式地将正则表达式编译成一个 <code>Pattern</code> 实例（不可变），让它成为类初始化的一部分，并将它缓存起来，每当调用 <code>isNumber</code>方法的时候就重用同一个实例：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Pattern ISNUM = Pattern.compile(<span class=\"string\">\"^[0-9]*$\"</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        System.out.println(isNumber(<span class=\"string\">\"312\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNumber</span><span class=\"params\">(String s)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ISNUM.matcher(s).matches();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"3，覆盖equals必须覆盖hashCode\"><a href=\"#3，覆盖equals必须覆盖hashCode\" class=\"headerlink\" title=\"3，覆盖equals必须覆盖hashCode\"></a>3，覆盖equals必须覆盖hashCode</h5><p>在每个覆盖了equals方法的类中，也必须覆盖hashCode方法。如果不这样做的话，就会违反Object.hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，这样的集合包括HashMap、HashSet和Hashtable</p>\n<ol>\n<li>只要对象的equals方法的比较操作所用到的信息未被修改，那么对同一个对象调用多次其hashCode返回值不变</li>\n<li>若两个对象通过equals得到是相等的，那么调用这两个对象任意一个对象的hashCode方法产生整数结果一样</li>\n<li>若两个对象通过equals得到是不相等的，那么调用这两个对象任意一个对象的hashCode方法产生的结果也可能相等,但是从提高散列表(hash table)的性能分析，给不相等的对象产生不同的结果会更好</li>\n</ol>\n<h5 id=\"4，Lambda-优先于匿名类，和-java-util-function使用\"><a href=\"#4，Lambda-优先于匿名类，和-java-util-function使用\" class=\"headerlink\" title=\"4，Lambda 优先于匿名类，和 java.util.function使用\"></a>4，Lambda 优先于匿名类，和 java.util.function使用</h5><p>举个例子，我们看下面这个代码</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.enumTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">OpemrationOld</span> </span>{</span><br><span class=\"line\">    PLUS(<span class=\"string\">\"+\"</span>) {</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">apply</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>{</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    },</span><br><span class=\"line\">    MINUS(<span class=\"string\">\"-\"</span>) {</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">apply</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>{</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x - y;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    },</span><br><span class=\"line\">    TIMES(<span class=\"string\">\"*\"</span>) {</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">apply</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>{</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    },</span><br><span class=\"line\">    DIVIDE(<span class=\"string\">\"/\"</span>) {</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">apply</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>{</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x / y;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    };</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String symbol;</span><br><span class=\"line\"></span><br><span class=\"line\">    OpemrationOld(String symbol) {</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.symbol = symbol;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">apply</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span></span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">testold</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">double</span> value = OpemrationOld.DIVIDE.apply(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(value);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这个代码表示对任意两个数进行加减乘除运算，jdk1.8新增了Lambda表达式后，我们就可以简写这段代码</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.enumTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.DoubleBinaryOperator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Opemration</span> </span>{</span><br><span class=\"line\">    PLUS(<span class=\"string\">\"+\"</span>, (x, y) -&gt; x + y),</span><br><span class=\"line\">    MINUS(<span class=\"string\">\"-\"</span>, (x, y) -&gt; x - y),</span><br><span class=\"line\">    TIMES(<span class=\"string\">\"*\"</span>, (x, y) -&gt; x * y),</span><br><span class=\"line\">    DIVIDE(<span class=\"string\">\"/\"</span>, (x, y) -&gt; x / y);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String symbol;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> DoubleBinaryOperator op;</span><br><span class=\"line\"></span><br><span class=\"line\">    Opemration(String symbol, DoubleBinaryOperator op) {</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.symbol = symbol;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.op = op;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> symbol;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">apply</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> op.applyAsDouble(x, y);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">double</span> value = Opemration.DIVIDE.apply(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(value);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这里我们提一下<code>DoubleBinaryOperator</code>这个接口，这个接口是java.util.function包中的，也属于jdk1.8新增的包，用来支持 Java的函数式编程。</p>\n<p>那这个接口是什么意思呢 表示：代表了作用于两个double值操作符的操作，并且返回了一个double值的结果。</p>\n<p>这个包下提供了非常多的函数</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201110202033145.png?x-oss-process=style/radio93\" alt=\"image-20201110202033145\"></p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th><strong>接口</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td><strong>BiConsumer&lt;T,U&gt;</strong></td>\n<td>代表了一个接受两个输入参数的操作，并且不返回任何结果</td>\n</tr>\n<tr>\n<td>2</td>\n<td><strong>BiFunction&lt;T,U,R&gt;</strong></td>\n<td>代表了一个接受两个输入参数的方法，并且返回一个结果</td>\n</tr>\n<tr>\n<td>3</td>\n<td><strong>BinaryOperator<t></t></strong></td>\n<td>代表了一个作用于于两个同类型操作符的操作，并且返回了操作符同类型的结果</td>\n</tr>\n<tr>\n<td>4</td>\n<td><strong>BiPredicate&lt;T,U&gt;</strong></td>\n<td>代表了一个两个参数的boolean值方法</td>\n</tr>\n<tr>\n<td>5</td>\n<td><strong>BooleanSupplier</strong></td>\n<td>代表了boolean值结果的提供方</td>\n</tr>\n<tr>\n<td>6</td>\n<td><strong>Consumer<t></t></strong></td>\n<td>代表了接受一个输入参数并且无返回的操作</td>\n</tr>\n<tr>\n<td>7</td>\n<td><strong>DoubleBinaryOperator</strong></td>\n<td>代表了作用于两个double值操作符的操作，并且返回了一个double值的结果。</td>\n</tr>\n<tr>\n<td>8</td>\n<td><strong>DoubleConsumer</strong></td>\n<td>代表一个接受double值参数的操作，并且不返回结果。</td>\n</tr>\n<tr>\n<td>9</td>\n<td><strong>DoubleFunction<r></r></strong></td>\n<td>代表接受一个double值参数的方法，并且返回结果</td>\n</tr>\n<tr>\n<td>10</td>\n<td><strong>DoublePredicate</strong></td>\n<td>代表一个拥有double值参数的boolean值方法</td>\n</tr>\n<tr>\n<td>11</td>\n<td><strong>DoubleSupplier</strong></td>\n<td>代表一个double值结构的提供方</td>\n</tr>\n<tr>\n<td>12</td>\n<td><strong>DoubleToIntFunction</strong></td>\n<td>接受一个double类型输入，返回一个int类型结果。</td>\n</tr>\n<tr>\n<td>13</td>\n<td><strong>DoubleToLongFunction</strong></td>\n<td>接受一个double类型输入，返回一个long类型结果</td>\n</tr>\n<tr>\n<td>14</td>\n<td><strong>DoubleUnaryOperator</strong></td>\n<td>接受一个参数同为类型double,返回值类型也为double 。</td>\n</tr>\n<tr>\n<td>15</td>\n<td><strong>Function&lt;T,R&gt;</strong></td>\n<td>接受一个输入参数，返回一个结果。</td>\n</tr>\n<tr>\n<td>16</td>\n<td><strong>IntBinaryOperator</strong></td>\n<td>接受两个参数同为类型int,返回值类型也为int 。</td>\n</tr>\n<tr>\n<td>17</td>\n<td><strong>IntConsumer</strong></td>\n<td>接受一个int类型的输入参数，无返回值 。</td>\n</tr>\n<tr>\n<td>18</td>\n<td><strong>IntFunction<r></r></strong></td>\n<td>接受一个int类型输入参数，返回一个结果 。</td>\n</tr>\n<tr>\n<td>19</td>\n<td><strong>IntPredicate</strong></td>\n<td>接受一个int输入参数，返回一个布尔值的结果。</td>\n</tr>\n<tr>\n<td>20</td>\n<td><strong>IntSupplier</strong></td>\n<td>无参数，返回一个int类型结果。</td>\n</tr>\n<tr>\n<td>21</td>\n<td><strong>IntToDoubleFunction</strong></td>\n<td>接受一个int类型输入，返回一个double类型结果 。</td>\n</tr>\n<tr>\n<td>22</td>\n<td><strong>IntToLongFunction</strong></td>\n<td>接受一个int类型输入，返回一个long类型结果。</td>\n</tr>\n<tr>\n<td>23</td>\n<td><strong>IntUnaryOperator</strong></td>\n<td>接受一个参数同为类型int,返回值类型也为int 。</td>\n</tr>\n<tr>\n<td>24</td>\n<td><strong>LongBinaryOperator</strong></td>\n<td>接受两个参数同为类型long,返回值类型也为long。</td>\n</tr>\n<tr>\n<td>25</td>\n<td><strong>LongConsumer</strong></td>\n<td>接受一个long类型的输入参数，无返回值。</td>\n</tr>\n<tr>\n<td>26</td>\n<td><strong>LongFunction<r></r></strong></td>\n<td>接受一个long类型输入参数，返回一个结果。</td>\n</tr>\n<tr>\n<td>27</td>\n<td><strong>LongPredicate</strong></td>\n<td>接受一个long输入参数，返回一个布尔值类型结果。</td>\n</tr>\n<tr>\n<td>28</td>\n<td><strong>LongSupplier</strong></td>\n<td>无参数，返回一个结果long类型的值。</td>\n</tr>\n<tr>\n<td>29</td>\n<td><strong>LongToDoubleFunction</strong></td>\n<td>接受一个long类型输入，返回一个double类型结果。</td>\n</tr>\n<tr>\n<td>30</td>\n<td><strong>LongToIntFunction</strong></td>\n<td>接受一个long类型输入，返回一个int类型结果。</td>\n</tr>\n<tr>\n<td>31</td>\n<td><strong>LongUnaryOperator</strong></td>\n<td>接受一个参数同为类型long,返回值类型也为long。</td>\n</tr>\n<tr>\n<td>32</td>\n<td><strong>ObjDoubleConsumer<t></t></strong></td>\n<td>接受一个object类型和一个double类型的输入参数，无返回值。</td>\n</tr>\n<tr>\n<td>33</td>\n<td><strong>ObjIntConsumer<t></t></strong></td>\n<td>接受一个object类型和一个int类型的输入参数，无返回值。</td>\n</tr>\n<tr>\n<td>34</td>\n<td><strong>ObjLongConsumer<t></t></strong></td>\n<td>接受一个object类型和一个long类型的输入参数，无返回值。</td>\n</tr>\n<tr>\n<td>35</td>\n<td><strong>Predicate<t></t></strong></td>\n<td>接受一个输入参数，返回一个布尔值结果。</td>\n</tr>\n<tr>\n<td>36</td>\n<td><strong>Supplier<t></t></strong></td>\n<td>无参数，返回一个结果。</td>\n</tr>\n<tr>\n<td>37</td>\n<td><strong>ToDoubleBiFunction&lt;T,U&gt;</strong></td>\n<td>接受两个输入参数，返回一个double类型结果</td>\n</tr>\n<tr>\n<td>38</td>\n<td><strong>ToDoubleFunction<t></t></strong></td>\n<td>接受一个输入参数，返回一个double类型结果</td>\n</tr>\n<tr>\n<td>39</td>\n<td><strong>ToIntBiFunction&lt;T,U&gt;</strong></td>\n<td>接受两个输入参数，返回一个int类型结果。</td>\n</tr>\n<tr>\n<td>40</td>\n<td><strong>ToIntFunction<t></t></strong></td>\n<td>接受一个输入参数，返回一个int类型结果。</td>\n</tr>\n<tr>\n<td>41</td>\n<td><strong>ToLongBiFunction&lt;T,U&gt;</strong></td>\n<td>接受两个输入参数，返回一个long类型结果。</td>\n</tr>\n<tr>\n<td>42</td>\n<td><strong>ToLongFunction<t></t></strong></td>\n<td>接受一个输入参数，返回一个long类型结果。</td>\n</tr>\n<tr>\n<td>43</td>\n<td><strong>UnaryOperator<t></t></strong></td>\n<td>接受一个参数为类型T,返回值类型也为T。</td>\n</tr>\n</tbody></table>\n<p>我们用35  <strong>Predicate<t></t></strong>  接受一个输入参数，返回一个布尔值结果。来举个例子</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.functionTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Java8Tester</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Predicate&lt;Integer&gt; predicate = n -&gt; true</span></span><br><span class=\"line\">        <span class=\"comment\">// n 是一个参数传递到 Predicate 接口的 test 方法</span></span><br><span class=\"line\">        <span class=\"comment\">// n 如果存在则 test 方法返回 true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"输出所有数据:\"</span>);</span><br><span class=\"line\">        eval(list, n -&gt; <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Predicate&lt;Integer&gt; predicate1 = n -&gt; n%2 == 0</span></span><br><span class=\"line\">        <span class=\"comment\">// n 是一个参数传递到 Predicate 接口的 test 方法</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果 n%2 为 0 test 方法返回 true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"输出所有偶数:\"</span>);</span><br><span class=\"line\">        eval(list, n -&gt; n % <span class=\"number\">2</span> == <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Predicate&lt;Integer&gt; predicate2 = n -&gt; n &gt; 3</span></span><br><span class=\"line\">        <span class=\"comment\">// n 是一个参数传递到 Predicate 接口的 test 方法</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果 n 大于 3 test 方法返回 true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"输出大于 3 的所有数字:\"</span>);</span><br><span class=\"line\">        eval(list, n -&gt; n &gt; <span class=\"number\">3</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">eval</span><span class=\"params\">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer i : list) {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (predicate.test(i)) {</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p>当然是用Lambda后，<code>eval</code>就可以简写为</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">eval</span><span class=\"params\">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> </span>{</span><br><span class=\"line\">    list.stream().filter(predicate).forEach(System.out::println);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>java.util.Function 中共有43个接口。别指望能够全部记住它们，但是如果能记住其中6个基础接口，必要时就可以推断出其余接口了。</p>\n<ol>\n<li>基础接口作用于对象引用类型</li>\n<li>Operator 接口代表其结果与参数类型一致的函数</li>\n<li>Predicate 接口代表带有一个参数 并返回一个 boolean 的函数</li>\n<li>Function 接口代表其参数与返回的类型不一致的函数</li>\n<li>Supplier 接口代表没有参数并且返回（或“提供”）一个值的函数</li>\n<li>Consumer 表的是带有一个函数但不返回任何值的函数，相当于消费掉了其参数</li>\n</ol>\n<p>比如下面这个代码</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">list.stream().filter(a -&gt; a &gt; <span class=\"number\">6</span>).forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这是个很常见的用来打印大于6的值，我们来看下这个<code>filter</code>接口。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Returns a stream consisting of the elements of this stream that match</span></span><br><span class=\"line\"><span class=\"comment\">    * the given predicate.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * &lt;p&gt;This is an &lt;a href=\"package-summary.html#StreamOps\"&gt;intermediate</span></span><br><span class=\"line\"><span class=\"comment\">    * operation&lt;/a&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> predicate a &lt;a href=\"package-summary.html#NonInterference\"&gt;non-interfering&lt;/a&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">    *                  &lt;a href=\"package-summary.html#Statelessness\"&gt;stateless&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    *                  predicate to apply to each element to determine if it</span></span><br><span class=\"line\"><span class=\"comment\">    *                  should be included</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> the new stream</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\">Stream&lt;T&gt; <span class=\"title\">filter</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> T&gt; predicate)</span></span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这里用到的就是我们的函数式编程。再比如</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求最大值</span></span><br><span class=\"line\">Optional&lt;Integer&gt; max1 = list.stream().reduce(Integer::max);</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>等等，java8给我们提供了大量的示例，告诉我们要尽量使用函数式编程。</p>\n<p>jdk8对于许多常用的类都扩展了一些面向函数，lambda表达式，方法引用的功能，使得java面向函数编程更为方便。其中Map.merge方法就是其中一个，merge方法有三个参数，<strong>key</strong>：map中的键，<strong>value</strong>：使用者传入的值，<strong>remappingFunction</strong>：BiFunction函数接口(该接口接收两个值，执行自定义功能并返回最终值)。当map中不存在指定的key时，便将传入的value设置为key的值，当key存在值时，执行一个方法该方法接收key的旧值和传入的value，执行自定义的方法返回最终结果设置为key的值。</p>\n<p>举个例子，当map中存在某个key，那么我们把value取出来加上新值，再存进去；传统办法是先判断，如果不存在key，则直接存，如果存在，则取出值加上新值，再把值重新put进去。当使用了merge后，我们的操作就简便多了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.functionTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapMergeTest</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"id\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        map.merge(<span class=\"string\">\"id\"</span>, <span class=\"number\">1</span>, (oldValue, newValue) -&gt; oldValue + newValue);</span><br><span class=\"line\">        map.merge(<span class=\"string\">\"name\"</span>, <span class=\"number\">1</span>, (oldValue, newValue) -&gt; oldValue + newValue);</span><br><span class=\"line\">        System.out.println(map.toString());</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{name=<span class=\"number\">1</span>, id=<span class=\"number\">2</span>}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>与匿名类相比， Lambda 的主要优势在于更加简洁。Java 提供了生成比 Lambda 更简洁函数对象的方法：<strong>方法引用（method reference）</strong>。</p>\n<p>比如<code>map.merge(\"id\", 1, (oldValue, newValue) -&gt; oldValue + newValue);</code>这段代码我们就可以简写为</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.merge(<span class=\"string\">\"id\"</span>, <span class=\"number\">1</span>, Integer::sum);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>记住一句话：<strong>只要方法引用更加简洁、清晰，就用方法引用；如果方法引用并不简洁，就坚持使用 Lambda。</strong></p>\n<h5 id=\"5，Stream\"><a href=\"#5，Stream\" class=\"headerlink\" title=\"5，Stream\"></a>5，Stream</h5><blockquote>\n<p><code>Stream</code>将要处理的元素集合看作一种流，在流的过程中，借助<code>Stream API</code>对流中的元素进行操作，比如：筛选、排序、聚合等。</p>\n</blockquote>\n<blockquote>\n<p><code>Optional</code>类是一个可以为<code>null</code>的容器对象。如果值存在则<code>isPresent()</code>方法会返回<code>true</code>，调用<code>get()</code>方法会返回该对象。</p>\n</blockquote>\n<p>我们先举个实例</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.functionTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Stream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SteamTest</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">static</span> List&lt;Person&gt; personList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">8900</span>, <span class=\"number\">20</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Jack\"</span>, <span class=\"number\">7000</span>, <span class=\"number\">20</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"Washington\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Lily\"</span>, <span class=\"number\">7800</span>, <span class=\"number\">20</span>, <span class=\"string\">\"female\"</span>, <span class=\"string\">\"Washington\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Anni\"</span>, <span class=\"number\">8200</span>, <span class=\"number\">20</span>, <span class=\"string\">\"female\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Owen\"</span>, <span class=\"number\">9500</span>, <span class=\"number\">20</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Alisa\"</span>, <span class=\"number\">7900</span>, <span class=\"number\">20</span>, <span class=\"string\">\"female\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  <span class=\"comment\">// 姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> salary; <span class=\"comment\">// 薪资</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age; <span class=\"comment\">// 年龄</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex; <span class=\"comment\">//性别</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String area;  <span class=\"comment\">// 地区</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<ol>\n<li><p>筛选（filter）</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFilter</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    list.stream().filter(a -&gt; a &gt; <span class=\"number\">6</span>).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">    Optional&lt;Integer&gt; first = list.stream().filter(a -&gt; a &gt; <span class=\"number\">6</span>).findFirst();</span><br><span class=\"line\"></span><br><span class=\"line\">    Optional&lt;Integer&gt; any = list.stream().filter(a -&gt; a &gt; <span class=\"number\">6</span>).findAny();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 是否包含符合特定条件的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> anyMatch = list.stream().anyMatch(x -&gt; x &lt; <span class=\"number\">6</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"匹配第一个值：\"</span> + first.get());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"匹配任意一个值：\"</span> + any.get());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"是否存在大于6的值：\"</span> + anyMatch);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>聚合（max/min/count）</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMinMaxCount</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//最小值</span></span><br><span class=\"line\">    Optional&lt;Integer&gt; min = list.stream().filter(a -&gt; a &gt; <span class=\"number\">6</span>).min(Integer::compareTo);</span><br><span class=\"line\">    System.out.println(min.get());</span><br><span class=\"line\">\t<span class=\"comment\">//最大值</span></span><br><span class=\"line\">    Optional&lt;Integer&gt; max = list.stream().filter(a -&gt; a &gt; <span class=\"number\">6</span>).max(Comparator.comparingInt(a -&gt; a));</span><br><span class=\"line\">    System.out.println(max.get());</span><br><span class=\"line\">\t<span class=\"comment\">//长度</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> count = list.stream().filter(a -&gt; a &gt; <span class=\"number\">6</span>).count();</span><br><span class=\"line\">    System.out.println(count);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>映射（map/flatMap）</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * map：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * flatMap：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMap</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; list = Arrays.asList(<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"ghi\"</span>, <span class=\"string\">\"jkl\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; strList = list.stream().map(String::toUpperCase).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(strList.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Integer&gt; numList = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; newNumList = numList.stream().map(a -&gt; a + <span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(newNumList.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    list();</span><br><span class=\"line\">    <span class=\"comment\">//不改变</span></span><br><span class=\"line\">    List&lt;Person&gt; newPersonList = personList.stream().map(a -&gt; {</span><br><span class=\"line\">        Person p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> {</span><br><span class=\"line\">            p = (Person) a.clone();</span><br><span class=\"line\">        } <span class=\"keyword\">catch</span> (CloneNotSupportedException e) {</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        p.setSalary(a.getSalary() + <span class=\"number\">10000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    }).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(personList.toString());</span><br><span class=\"line\">    System.out.println(newPersonList.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//改变</span></span><br><span class=\"line\">    personList.stream().map(a -&gt; {</span><br><span class=\"line\">        a.setSalary(a.getSalary() + <span class=\"number\">10000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    }).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(personList.toString());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; flatList = Arrays.asList(<span class=\"string\">\"m,k,l,a\"</span>, <span class=\"string\">\"1,3,5,7\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; newFlatList = flatList.stream().flatMap(a -&gt; {</span><br><span class=\"line\">        String[] strArr = a.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.stream(strArr);</span><br><span class=\"line\">    }).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(flatList.toString());</span><br><span class=\"line\">    System.out.println(newFlatList.toString());</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>归约（reduce）</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * reduce 归约</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testReduce</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//求和</span></span><br><span class=\"line\">    Optional&lt;Integer&gt; sum = list.stream().reduce(Integer::sum);</span><br><span class=\"line\">    System.out.println(sum.get());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//求最大值</span></span><br><span class=\"line\">    Optional&lt;Integer&gt; max1 = list.stream().reduce((a, b) -&gt; a &gt; b ? a : b);</span><br><span class=\"line\">    Optional&lt;Integer&gt; max2 = list.stream().reduce(Integer::max);</span><br><span class=\"line\">    Integer max3 = list.stream().reduce(<span class=\"number\">100</span>, Integer::max);</span><br><span class=\"line\">    System.out.println(max1.get());</span><br><span class=\"line\">    System.out.println(max2.get());</span><br><span class=\"line\">    System.out.println(max3);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>收集（collect）</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCollect</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    list();</span><br><span class=\"line\">    List&lt;Person&gt; newList = personList.stream().filter(a -&gt; a.getSalary() &gt; <span class=\"number\">8000</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(newList.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; nameList = personList.stream().filter(a -&gt; a.getSalary() &gt; <span class=\"number\">8000</span>).map(Person::getName).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(nameList.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String, Person&gt; nameMap = personList.stream().collect(Collectors.toMap(Person::getName, b -&gt; b, (oldValue, newValue) -&gt; newValue));</span><br><span class=\"line\">    System.out.println(nameMap.toString());</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>统计（count/averaging）</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAveraging</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    list();</span><br><span class=\"line\">    <span class=\"comment\">//求和</span></span><br><span class=\"line\">    Long count = personList.stream().collect(Collectors.counting());</span><br><span class=\"line\">    <span class=\"comment\">//平均值</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> average = personList.stream().collect(Collectors.averagingDouble(Person::getSalary));</span><br><span class=\"line\">    <span class=\"comment\">//最大值</span></span><br><span class=\"line\">    Optional&lt;Integer&gt; max = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compareTo));</span><br><span class=\"line\">    <span class=\"comment\">//求和</span></span><br><span class=\"line\">    Integer sum = personList.stream().collect(Collectors.summingInt(Person::getSalary));</span><br><span class=\"line\">    <span class=\"comment\">//统计</span></span><br><span class=\"line\">    DoubleSummaryStatistics statistics = personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));</span><br><span class=\"line\">    statistics.getMax();</span><br><span class=\"line\">    statistics.getMin();</span><br><span class=\"line\">    statistics.getCount();</span><br><span class=\"line\">    statistics.getAverage();</span><br><span class=\"line\">    statistics.getSum();</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>分组（partitioningBy/groupingBy）</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGroupingBy</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    list();</span><br><span class=\"line\">    Map&lt;Boolean, List&lt;Person&gt;&gt; map = personList.stream().collect(Collectors.partitioningBy(a -&gt; a.getSalary() &gt; <span class=\"number\">8000</span>));</span><br><span class=\"line\">    Map&lt;String, List&lt;Person&gt;&gt; sexMap = personList.stream().collect(Collectors.groupingBy(Person::getSex));</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String, Map&lt;String, List&lt;Person&gt;&gt;&gt; tmp =</span><br><span class=\"line\">        personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.groupingBy(Person::getArea)));</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>接合（joining）</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJoin</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    list();</span><br><span class=\"line\">    String str = personList.stream().map(Person::getName).collect(Collectors.joining(<span class=\"string\">\",\"</span>));</span><br><span class=\"line\">    System.out.println(str);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>排序（sorted）</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 排序</span></span><br><span class=\"line\"><span class=\"comment\"> * sorted()：自然排序，流中元素需实现Comparable接口</span></span><br><span class=\"line\"><span class=\"comment\"> * sorted(Comparator com)：Comparator排序器自定义排序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSorted</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    list();</span><br><span class=\"line\">    <span class=\"comment\">//正序</span></span><br><span class=\"line\">    List&lt;Person&gt; newList = personList.stream().sorted(Comparator.comparingInt(Person::getSalary)).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(newList.toString());</span><br><span class=\"line\">    <span class=\"comment\">//倒序</span></span><br><span class=\"line\">    List&lt;Integer&gt; newList2 = personList.stream().map(Person::getSalary).sorted(Comparator.comparingInt(a -&gt; (<span class=\"keyword\">int</span>) a).reversed()).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(newList2.toString());</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>提取/组合</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDistinct</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    String[] arr1 = {<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>};</span><br><span class=\"line\">    String[] arr2 = {<span class=\"string\">\"d\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>};</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; strList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(Arrays.asList(arr1));</span><br><span class=\"line\"></span><br><span class=\"line\">    Stream&lt;String&gt; stream1 = Stream.of(arr1);</span><br><span class=\"line\">    Stream&lt;String&gt; stream2 = Stream.of(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// concat:合并两个流</span></span><br><span class=\"line\">    <span class=\"comment\">// distinct：去重</span></span><br><span class=\"line\">    List&lt;String&gt; list = Stream.concat(stream1, stream2).distinct().collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(list);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// limit：限制从流中获得前n个数据</span></span><br><span class=\"line\">    List&lt;String&gt; list2 = strList.stream().limit(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(list2.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// skip：跳过前n个数据</span></span><br><span class=\"line\">    List&lt;String&gt; list3 = strList.stream().skip(<span class=\"number\">1</span>).limit(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(list3.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// iterate：遍历</span></span><br><span class=\"line\">    List&lt;Integer&gt; list4 = Stream.iterate(<span class=\"number\">1</span>, x -&gt; x + <span class=\"number\">2</span>).skip(<span class=\"number\">1</span>).limit(<span class=\"number\">5</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(list4);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h5 id=\"6，同步访问共享的可变数据\"><a href=\"#6，同步访问共享的可变数据\" class=\"headerlink\" title=\"6，同步访问共享的可变数据\"></a>6，同步访问共享的可变数据</h5><p>举个例子</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.functionTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StopThread</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> stopRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>{</span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread(() -&gt; {</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stopRequest) {</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        });</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        stopRequest = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>你可能期待这个程序运行大约一秒钟左右，之后主线程将 stopRequest 设置为 true ，致使后台线程的循环终止。但是实际上，这个程序永远不会终止：因为后台 线程永远在循环！</p>\n<p>问题在于，由于没有同步，就不能保证后台线程何时‘看到’主线程对 stopRequest 的值所做的改变。没有同步，虚拟机将以下代码：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (!stopRequest) {</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>转变成这样：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!stopRequest){</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>){</span><br><span class=\"line\">\t\ti++;    </span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这种优化称作<strong>提升（ hoisting ）</strong>，正是 OpenJDK Server VM的工作 结果是一个<strong>活性失败 (liveness failure ）</strong>：这个程序并没有得到提升。</p>\n<p>修正这个问题的一种方式是同步访问<code>stopRequest</code>域。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.functionTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StopThread</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> stopRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setStopRequest</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        stopRequest = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getStopRequest</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stopRequest;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>{</span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread(() -&gt; {</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!getStopRequest()) {</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        });</span><br><span class=\"line\"></span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        setStopRequest();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>注意，我们的<strong>读和写操作都要同步</strong>，否则无法保证同步起作用。</p>\n<p>还有一种方式就是<code>volatile</code>关键字，虽然 volatile 修饰符不执行互斥访问，但它可以保证任何一个线程在读取该域的时候都将看到最近刚刚被写入的值：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.functionTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StopThread</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> stopRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>{</span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread(() -&gt; {</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stopRequest) {</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        });</span><br><span class=\"line\"></span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        stopRequest = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在使用volatile关键字的时候，我们需要特别注意，不能使用i++（增量操作符）的操作，因为这个操作<strong>不是原子的</strong>。这个操作域中执行两项操作：首先它读取值，然后写回一个新值，相当于原来的值再加上1。如果第二个线程在第一个线程读取旧值和写回新值期间读取这个域，第二个线程就会与第一个线程一起看到同一个值，并返回相同的序列号，这就是<strong>安全性失败（ safety failure ）</strong>：这个程序会计算出错误的结果。修复方法是用synchronized来代替volatile。当然最好的办法是替换成原子类java.util.concurrent.atomic。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Atomiclang i =<span class=\"keyword\">new</span> Atomiclong(); </span><br><span class=\"line\">i.getAndincrement();</span><br></pre></td></tr></tbody></table></figure>\n\n<p>总而言之， <strong>当多个线程共享可变数据的时候，每个读或者写数据的线程都必须执行同步。</strong></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h5 id=\"1，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱\"><a href=\"#1，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱\" class=\"headerlink\" title=\"1，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱\"></a>1，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱</h5><p>比如下面这段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.date.DateUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(DateUtil.now());</span><br><span class=\"line\">        sum();</span><br><span class=\"line\">        System.out.println(DateUtil.now());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">sum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Long sum = <span class=\"number\">0L</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = <span class=\"number\">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们运行一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2020</span>-<span class=\"number\">11</span>-<span class=\"number\">09</span> <span class=\"number\">19</span>:<span class=\"number\">57</span>:<span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">2020</span>-<span class=\"number\">11</span>-<span class=\"number\">09</span> <span class=\"number\">19</span>:<span class=\"number\">57</span>:<span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<p>这段程序是没有问题的，慢的原因在哪，在<code>Long sum = 0L</code>这里，意味着程序构造了大约 2^31 个多余的 Long 实例（大约每次往 Long sum 中增加 long 时构造一个实例） 。将sum 的声明从 Long 改成 long ，我们再试一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2020</span>-<span class=\"number\">11</span>-<span class=\"number\">09</span> <span class=\"number\">19</span>:<span class=\"number\">59</span>:<span class=\"number\">44</span></span><br><span class=\"line\"><span class=\"number\">2020</span>-<span class=\"number\">11</span>-<span class=\"number\">09</span> <span class=\"number\">19</span>:<span class=\"number\">59</span>:<span class=\"number\">45</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2，避免创建不必要的对象\"><a href=\"#2，避免创建不必要的对象\" class=\"headerlink\" title=\"2，避免创建不必要的对象\"></a>2，避免创建不必要的对象</h5><p>比如下面这个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(isNumber(<span class=\"string\">&quot;312&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNumber</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.matches(<span class=\"string\">&quot;^[0-9]*$&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个正则表达式，判断传过来的字符串是不是数字，这个方案看起来没有问题，但是如果这个方法使用的非常频繁，那么这种写法就不太合适了，我们先来看看<code>matcher</code>这个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Pattern.matches(regex, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再往里走</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex, CharSequence input)</span> </span>&#123;</span><br><span class=\"line\">    Pattern p = Pattern.compile(regex);</span><br><span class=\"line\">    Matcher m = p.matcher(input);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m.matches();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再往里走</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Pattern <span class=\"title\">compile</span><span class=\"params\">(String regex)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pattern(regex, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它在内部为正则表达式创建了一个 <code>Pattern</code> 实例，却只用了1次，之后就可以进行垃圾回收了，创建 <code>Pattenr</code>实例的成本很高 ，因为需要将正则表达式编译成一个有限状态机（ finite state machine）。</p>\n<p>为了提升性能，应该显式地将正则表达式编译成一个 <code>Pattern</code> 实例（不可变），让它成为类初始化的一部分，并将它缓存起来，每当调用 <code>isNumber</code>方法的时候就重用同一个实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Pattern ISNUM = Pattern.compile(<span class=\"string\">&quot;^[0-9]*$&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(isNumber(<span class=\"string\">&quot;312&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNumber</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ISNUM.matcher(s).matches();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3，覆盖equals必须覆盖hashCode\"><a href=\"#3，覆盖equals必须覆盖hashCode\" class=\"headerlink\" title=\"3，覆盖equals必须覆盖hashCode\"></a>3，覆盖equals必须覆盖hashCode</h5><p>在每个覆盖了equals方法的类中，也必须覆盖hashCode方法。如果不这样做的话，就会违反Object.hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，这样的集合包括HashMap、HashSet和Hashtable</p>\n<ol>\n<li>只要对象的equals方法的比较操作所用到的信息未被修改，那么对同一个对象调用多次其hashCode返回值不变</li>\n<li>若两个对象通过equals得到是相等的，那么调用这两个对象任意一个对象的hashCode方法产生整数结果一样</li>\n<li>若两个对象通过equals得到是不相等的，那么调用这两个对象任意一个对象的hashCode方法产生的结果也可能相等,但是从提高散列表(hash table)的性能分析，给不相等的对象产生不同的结果会更好</li>\n</ol>\n<h5 id=\"4，Lambda-优先于匿名类，和-java-util-function使用\"><a href=\"#4，Lambda-优先于匿名类，和-java-util-function使用\" class=\"headerlink\" title=\"4，Lambda 优先于匿名类，和 java.util.function使用\"></a>4，Lambda 优先于匿名类，和 java.util.function使用</h5><p>举个例子，我们看下面这个代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.enumTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">OpemrationOld</span> </span>&#123;</span><br><span class=\"line\">    PLUS(<span class=\"string\">&quot;+&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">apply</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    MINUS(<span class=\"string\">&quot;-&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">apply</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x - y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    TIMES(<span class=\"string\">&quot;*&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">apply</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    DIVIDE(<span class=\"string\">&quot;/&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">apply</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x / y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String symbol;</span><br><span class=\"line\"></span><br><span class=\"line\">    OpemrationOld(String symbol) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.symbol = symbol;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">apply</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">testold</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> value = OpemrationOld.DIVIDE.apply(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个代码表示对任意两个数进行加减乘除运算，jdk1.8新增了Lambda表达式后，我们就可以简写这段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.enumTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.DoubleBinaryOperator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Opemration</span> </span>&#123;</span><br><span class=\"line\">    PLUS(<span class=\"string\">&quot;+&quot;</span>, (x, y) -&gt; x + y),</span><br><span class=\"line\">    MINUS(<span class=\"string\">&quot;-&quot;</span>, (x, y) -&gt; x - y),</span><br><span class=\"line\">    TIMES(<span class=\"string\">&quot;*&quot;</span>, (x, y) -&gt; x * y),</span><br><span class=\"line\">    DIVIDE(<span class=\"string\">&quot;/&quot;</span>, (x, y) -&gt; x / y);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String symbol;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> DoubleBinaryOperator op;</span><br><span class=\"line\"></span><br><span class=\"line\">    Opemration(String symbol, DoubleBinaryOperator op) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.symbol = symbol;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.op = op;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> symbol;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">apply</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> op.applyAsDouble(x, y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> value = Opemration.DIVIDE.apply(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们提一下<code>DoubleBinaryOperator</code>这个接口，这个接口是java.util.function包中的，也属于jdk1.8新增的包，用来支持 Java的函数式编程。</p>\n<p>那这个接口是什么意思呢 表示：代表了作用于两个double值操作符的操作，并且返回了一个double值的结果。</p>\n<p>这个包下提供了非常多的函数</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201110202033145.png?x-oss-process=style/radio93\" alt=\"image-20201110202033145\"></p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th><strong>接口</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td><strong>BiConsumer&lt;T,U&gt;</strong></td>\n<td>代表了一个接受两个输入参数的操作，并且不返回任何结果</td>\n</tr>\n<tr>\n<td>2</td>\n<td><strong>BiFunction&lt;T,U,R&gt;</strong></td>\n<td>代表了一个接受两个输入参数的方法，并且返回一个结果</td>\n</tr>\n<tr>\n<td>3</td>\n<td><strong>BinaryOperator<T></T></strong></td>\n<td>代表了一个作用于于两个同类型操作符的操作，并且返回了操作符同类型的结果</td>\n</tr>\n<tr>\n<td>4</td>\n<td><strong>BiPredicate&lt;T,U&gt;</strong></td>\n<td>代表了一个两个参数的boolean值方法</td>\n</tr>\n<tr>\n<td>5</td>\n<td><strong>BooleanSupplier</strong></td>\n<td>代表了boolean值结果的提供方</td>\n</tr>\n<tr>\n<td>6</td>\n<td><strong>Consumer<T></T></strong></td>\n<td>代表了接受一个输入参数并且无返回的操作</td>\n</tr>\n<tr>\n<td>7</td>\n<td><strong>DoubleBinaryOperator</strong></td>\n<td>代表了作用于两个double值操作符的操作，并且返回了一个double值的结果。</td>\n</tr>\n<tr>\n<td>8</td>\n<td><strong>DoubleConsumer</strong></td>\n<td>代表一个接受double值参数的操作，并且不返回结果。</td>\n</tr>\n<tr>\n<td>9</td>\n<td><strong>DoubleFunction<R></R></strong></td>\n<td>代表接受一个double值参数的方法，并且返回结果</td>\n</tr>\n<tr>\n<td>10</td>\n<td><strong>DoublePredicate</strong></td>\n<td>代表一个拥有double值参数的boolean值方法</td>\n</tr>\n<tr>\n<td>11</td>\n<td><strong>DoubleSupplier</strong></td>\n<td>代表一个double值结构的提供方</td>\n</tr>\n<tr>\n<td>12</td>\n<td><strong>DoubleToIntFunction</strong></td>\n<td>接受一个double类型输入，返回一个int类型结果。</td>\n</tr>\n<tr>\n<td>13</td>\n<td><strong>DoubleToLongFunction</strong></td>\n<td>接受一个double类型输入，返回一个long类型结果</td>\n</tr>\n<tr>\n<td>14</td>\n<td><strong>DoubleUnaryOperator</strong></td>\n<td>接受一个参数同为类型double,返回值类型也为double 。</td>\n</tr>\n<tr>\n<td>15</td>\n<td><strong>Function&lt;T,R&gt;</strong></td>\n<td>接受一个输入参数，返回一个结果。</td>\n</tr>\n<tr>\n<td>16</td>\n<td><strong>IntBinaryOperator</strong></td>\n<td>接受两个参数同为类型int,返回值类型也为int 。</td>\n</tr>\n<tr>\n<td>17</td>\n<td><strong>IntConsumer</strong></td>\n<td>接受一个int类型的输入参数，无返回值 。</td>\n</tr>\n<tr>\n<td>18</td>\n<td><strong>IntFunction<R></R></strong></td>\n<td>接受一个int类型输入参数，返回一个结果 。</td>\n</tr>\n<tr>\n<td>19</td>\n<td><strong>IntPredicate</strong></td>\n<td>接受一个int输入参数，返回一个布尔值的结果。</td>\n</tr>\n<tr>\n<td>20</td>\n<td><strong>IntSupplier</strong></td>\n<td>无参数，返回一个int类型结果。</td>\n</tr>\n<tr>\n<td>21</td>\n<td><strong>IntToDoubleFunction</strong></td>\n<td>接受一个int类型输入，返回一个double类型结果 。</td>\n</tr>\n<tr>\n<td>22</td>\n<td><strong>IntToLongFunction</strong></td>\n<td>接受一个int类型输入，返回一个long类型结果。</td>\n</tr>\n<tr>\n<td>23</td>\n<td><strong>IntUnaryOperator</strong></td>\n<td>接受一个参数同为类型int,返回值类型也为int 。</td>\n</tr>\n<tr>\n<td>24</td>\n<td><strong>LongBinaryOperator</strong></td>\n<td>接受两个参数同为类型long,返回值类型也为long。</td>\n</tr>\n<tr>\n<td>25</td>\n<td><strong>LongConsumer</strong></td>\n<td>接受一个long类型的输入参数，无返回值。</td>\n</tr>\n<tr>\n<td>26</td>\n<td><strong>LongFunction<R></R></strong></td>\n<td>接受一个long类型输入参数，返回一个结果。</td>\n</tr>\n<tr>\n<td>27</td>\n<td><strong>LongPredicate</strong></td>\n<td>接受一个long输入参数，返回一个布尔值类型结果。</td>\n</tr>\n<tr>\n<td>28</td>\n<td><strong>LongSupplier</strong></td>\n<td>无参数，返回一个结果long类型的值。</td>\n</tr>\n<tr>\n<td>29</td>\n<td><strong>LongToDoubleFunction</strong></td>\n<td>接受一个long类型输入，返回一个double类型结果。</td>\n</tr>\n<tr>\n<td>30</td>\n<td><strong>LongToIntFunction</strong></td>\n<td>接受一个long类型输入，返回一个int类型结果。</td>\n</tr>\n<tr>\n<td>31</td>\n<td><strong>LongUnaryOperator</strong></td>\n<td>接受一个参数同为类型long,返回值类型也为long。</td>\n</tr>\n<tr>\n<td>32</td>\n<td><strong>ObjDoubleConsumer<T></T></strong></td>\n<td>接受一个object类型和一个double类型的输入参数，无返回值。</td>\n</tr>\n<tr>\n<td>33</td>\n<td><strong>ObjIntConsumer<T></T></strong></td>\n<td>接受一个object类型和一个int类型的输入参数，无返回值。</td>\n</tr>\n<tr>\n<td>34</td>\n<td><strong>ObjLongConsumer<T></T></strong></td>\n<td>接受一个object类型和一个long类型的输入参数，无返回值。</td>\n</tr>\n<tr>\n<td>35</td>\n<td><strong>Predicate<T></T></strong></td>\n<td>接受一个输入参数，返回一个布尔值结果。</td>\n</tr>\n<tr>\n<td>36</td>\n<td><strong>Supplier<T></T></strong></td>\n<td>无参数，返回一个结果。</td>\n</tr>\n<tr>\n<td>37</td>\n<td><strong>ToDoubleBiFunction&lt;T,U&gt;</strong></td>\n<td>接受两个输入参数，返回一个double类型结果</td>\n</tr>\n<tr>\n<td>38</td>\n<td><strong>ToDoubleFunction<T></T></strong></td>\n<td>接受一个输入参数，返回一个double类型结果</td>\n</tr>\n<tr>\n<td>39</td>\n<td><strong>ToIntBiFunction&lt;T,U&gt;</strong></td>\n<td>接受两个输入参数，返回一个int类型结果。</td>\n</tr>\n<tr>\n<td>40</td>\n<td><strong>ToIntFunction<T></T></strong></td>\n<td>接受一个输入参数，返回一个int类型结果。</td>\n</tr>\n<tr>\n<td>41</td>\n<td><strong>ToLongBiFunction&lt;T,U&gt;</strong></td>\n<td>接受两个输入参数，返回一个long类型结果。</td>\n</tr>\n<tr>\n<td>42</td>\n<td><strong>ToLongFunction<T></T></strong></td>\n<td>接受一个输入参数，返回一个long类型结果。</td>\n</tr>\n<tr>\n<td>43</td>\n<td><strong>UnaryOperator<T></T></strong></td>\n<td>接受一个参数为类型T,返回值类型也为T。</td>\n</tr>\n</tbody></table>\n<p>我们用35  <strong>Predicate<T></T></strong>  接受一个输入参数，返回一个布尔值结果。来举个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.functionTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Java8Tester</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Predicate&lt;Integer&gt; predicate = n -&gt; true</span></span><br><span class=\"line\">        <span class=\"comment\">// n 是一个参数传递到 Predicate 接口的 test 方法</span></span><br><span class=\"line\">        <span class=\"comment\">// n 如果存在则 test 方法返回 true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;输出所有数据:&quot;</span>);</span><br><span class=\"line\">        eval(list, n -&gt; <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Predicate&lt;Integer&gt; predicate1 = n -&gt; n%2 == 0</span></span><br><span class=\"line\">        <span class=\"comment\">// n 是一个参数传递到 Predicate 接口的 test 方法</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果 n%2 为 0 test 方法返回 true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;输出所有偶数:&quot;</span>);</span><br><span class=\"line\">        eval(list, n -&gt; n % <span class=\"number\">2</span> == <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Predicate&lt;Integer&gt; predicate2 = n -&gt; n &gt; 3</span></span><br><span class=\"line\">        <span class=\"comment\">// n 是一个参数传递到 Predicate 接口的 test 方法</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果 n 大于 3 test 方法返回 true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;输出大于 3 的所有数字:&quot;</span>);</span><br><span class=\"line\">        eval(list, n -&gt; n &gt; <span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">eval</span><span class=\"params\">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer i : list) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (predicate.test(i)) &#123;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>当然是用Lambda后，<code>eval</code>就可以简写为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">eval</span><span class=\"params\">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> </span>&#123;</span><br><span class=\"line\">    list.stream().filter(predicate).forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>java.util.Function 中共有43个接口。别指望能够全部记住它们，但是如果能记住其中6个基础接口，必要时就可以推断出其余接口了。</p>\n<ol>\n<li>基础接口作用于对象引用类型</li>\n<li>Operator 接口代表其结果与参数类型一致的函数</li>\n<li>Predicate 接口代表带有一个参数 并返回一个 boolean 的函数</li>\n<li>Function 接口代表其参数与返回的类型不一致的函数</li>\n<li>Supplier 接口代表没有参数并且返回（或“提供”）一个值的函数</li>\n<li>Consumer 表的是带有一个函数但不返回任何值的函数，相当于消费掉了其参数</li>\n</ol>\n<p>比如下面这个代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">list.stream().filter(a -&gt; a &gt; <span class=\"number\">6</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<p>这是个很常见的用来打印大于6的值，我们来看下这个<code>filter</code>接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Returns a stream consisting of the elements of this stream that match</span></span><br><span class=\"line\"><span class=\"comment\">    * the given predicate.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span></span><br><span class=\"line\"><span class=\"comment\">    * operation&lt;/a&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> predicate a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">    *                  &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    *                  predicate to apply to each element to determine if it</span></span><br><span class=\"line\"><span class=\"comment\">    *                  should be included</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> the new stream</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\">Stream&lt;T&gt; <span class=\"title\">filter</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> T&gt; predicate)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>这里用到的就是我们的函数式编程。再比如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求最大值</span></span><br><span class=\"line\">Optional&lt;Integer&gt; max1 = list.stream().reduce(Integer::max);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</span><br></pre></td></tr></table></figure>\n\n<p>等等，java8给我们提供了大量的示例，告诉我们要尽量使用函数式编程。</p>\n<p>jdk8对于许多常用的类都扩展了一些面向函数，lambda表达式，方法引用的功能，使得java面向函数编程更为方便。其中Map.merge方法就是其中一个，merge方法有三个参数，<strong>key</strong>：map中的键，<strong>value</strong>：使用者传入的值，<strong>remappingFunction</strong>：BiFunction函数接口(该接口接收两个值，执行自定义功能并返回最终值)。当map中不存在指定的key时，便将传入的value设置为key的值，当key存在值时，执行一个方法该方法接收key的旧值和传入的value，执行自定义的方法返回最终结果设置为key的值。</p>\n<p>举个例子，当map中存在某个key，那么我们把value取出来加上新值，再存进去；传统办法是先判断，如果不存在key，则直接存，如果存在，则取出值加上新值，再把值重新put进去。当使用了merge后，我们的操作就简便多了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.functionTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapMergeTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;id&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        map.merge(<span class=\"string\">&quot;id&quot;</span>, <span class=\"number\">1</span>, (oldValue, newValue) -&gt; oldValue + newValue);</span><br><span class=\"line\">        map.merge(<span class=\"string\">&quot;name&quot;</span>, <span class=\"number\">1</span>, (oldValue, newValue) -&gt; oldValue + newValue);</span><br><span class=\"line\">        System.out.println(map.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;name=<span class=\"number\">1</span>, id=<span class=\"number\">2</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>与匿名类相比， Lambda 的主要优势在于更加简洁。Java 提供了生成比 Lambda 更简洁函数对象的方法：<strong>方法引用（method reference）</strong>。</p>\n<p>比如<code>map.merge(&quot;id&quot;, 1, (oldValue, newValue) -&gt; oldValue + newValue);</code>这段代码我们就可以简写为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.merge(<span class=\"string\">&quot;id&quot;</span>, <span class=\"number\">1</span>, Integer::sum);</span><br></pre></td></tr></table></figure>\n\n<p>记住一句话：<strong>只要方法引用更加简洁、清晰，就用方法引用；如果方法引用并不简洁，就坚持使用 Lambda。</strong></p>\n<h5 id=\"5，Stream\"><a href=\"#5，Stream\" class=\"headerlink\" title=\"5，Stream\"></a>5，Stream</h5><blockquote>\n<p><code>Stream</code>将要处理的元素集合看作一种流，在流的过程中，借助<code>Stream API</code>对流中的元素进行操作，比如：筛选、排序、聚合等。</p>\n</blockquote>\n<blockquote>\n<p><code>Optional</code>类是一个可以为<code>null</code>的容器对象。如果值存在则<code>isPresent()</code>方法会返回<code>true</code>，调用<code>get()</code>方法会返回该对象。</p>\n</blockquote>\n<p>我们先举个实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.functionTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Stream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SteamTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> List&lt;Person&gt; personList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"number\">8900</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"string\">&quot;New York&quot;</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Jack&quot;</span>, <span class=\"number\">7000</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"string\">&quot;Washington&quot;</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">7800</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;female&quot;</span>, <span class=\"string\">&quot;Washington&quot;</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Anni&quot;</span>, <span class=\"number\">8200</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;female&quot;</span>, <span class=\"string\">&quot;New York&quot;</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Owen&quot;</span>, <span class=\"number\">9500</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"string\">&quot;New York&quot;</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Alisa&quot;</span>, <span class=\"number\">7900</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;female&quot;</span>, <span class=\"string\">&quot;New York&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  <span class=\"comment\">// 姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> salary; <span class=\"comment\">// 薪资</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age; <span class=\"comment\">// 年龄</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex; <span class=\"comment\">//性别</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String area;  <span class=\"comment\">// 地区</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>筛选（filter）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    list.stream().filter(a -&gt; a &gt; <span class=\"number\">6</span>).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">    Optional&lt;Integer&gt; first = list.stream().filter(a -&gt; a &gt; <span class=\"number\">6</span>).findFirst();</span><br><span class=\"line\"></span><br><span class=\"line\">    Optional&lt;Integer&gt; any = list.stream().filter(a -&gt; a &gt; <span class=\"number\">6</span>).findAny();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 是否包含符合特定条件的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> anyMatch = list.stream().anyMatch(x -&gt; x &lt; <span class=\"number\">6</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;匹配第一个值：&quot;</span> + first.get());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;匹配任意一个值：&quot;</span> + any.get());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;是否存在大于6的值：&quot;</span> + anyMatch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>聚合（max/min/count）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMinMaxCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//最小值</span></span><br><span class=\"line\">    Optional&lt;Integer&gt; min = list.stream().filter(a -&gt; a &gt; <span class=\"number\">6</span>).min(Integer::compareTo);</span><br><span class=\"line\">    System.out.println(min.get());</span><br><span class=\"line\">\t<span class=\"comment\">//最大值</span></span><br><span class=\"line\">    Optional&lt;Integer&gt; max = list.stream().filter(a -&gt; a &gt; <span class=\"number\">6</span>).max(Comparator.comparingInt(a -&gt; a));</span><br><span class=\"line\">    System.out.println(max.get());</span><br><span class=\"line\">\t<span class=\"comment\">//长度</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> count = list.stream().filter(a -&gt; a &gt; <span class=\"number\">6</span>).count();</span><br><span class=\"line\">    System.out.println(count);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>映射（map/flatMap）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * map：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * flatMap：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;def&quot;</span>, <span class=\"string\">&quot;ghi&quot;</span>, <span class=\"string\">&quot;jkl&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; strList = list.stream().map(String::toUpperCase).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(strList.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Integer&gt; numList = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; newNumList = numList.stream().map(a -&gt; a + <span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(newNumList.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    list();</span><br><span class=\"line\">    <span class=\"comment\">//不改变</span></span><br><span class=\"line\">    List&lt;Person&gt; newPersonList = personList.stream().map(a -&gt; &#123;</span><br><span class=\"line\">        Person p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            p = (Person) a.clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.setSalary(a.getSalary() + <span class=\"number\">10000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(personList.toString());</span><br><span class=\"line\">    System.out.println(newPersonList.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//改变</span></span><br><span class=\"line\">    personList.stream().map(a -&gt; &#123;</span><br><span class=\"line\">        a.setSalary(a.getSalary() + <span class=\"number\">10000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(personList.toString());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; flatList = Arrays.asList(<span class=\"string\">&quot;m,k,l,a&quot;</span>, <span class=\"string\">&quot;1,3,5,7&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; newFlatList = flatList.stream().flatMap(a -&gt; &#123;</span><br><span class=\"line\">        String[] strArr = a.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.stream(strArr);</span><br><span class=\"line\">    &#125;).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(flatList.toString());</span><br><span class=\"line\">    System.out.println(newFlatList.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>归约（reduce）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * reduce 归约</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testReduce</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//求和</span></span><br><span class=\"line\">    Optional&lt;Integer&gt; sum = list.stream().reduce(Integer::sum);</span><br><span class=\"line\">    System.out.println(sum.get());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//求最大值</span></span><br><span class=\"line\">    Optional&lt;Integer&gt; max1 = list.stream().reduce((a, b) -&gt; a &gt; b ? a : b);</span><br><span class=\"line\">    Optional&lt;Integer&gt; max2 = list.stream().reduce(Integer::max);</span><br><span class=\"line\">    Integer max3 = list.stream().reduce(<span class=\"number\">100</span>, Integer::max);</span><br><span class=\"line\">    System.out.println(max1.get());</span><br><span class=\"line\">    System.out.println(max2.get());</span><br><span class=\"line\">    System.out.println(max3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>收集（collect）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCollect</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    list();</span><br><span class=\"line\">    List&lt;Person&gt; newList = personList.stream().filter(a -&gt; a.getSalary() &gt; <span class=\"number\">8000</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(newList.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; nameList = personList.stream().filter(a -&gt; a.getSalary() &gt; <span class=\"number\">8000</span>).map(Person::getName).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(nameList.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String, Person&gt; nameMap = personList.stream().collect(Collectors.toMap(Person::getName, b -&gt; b, (oldValue, newValue) -&gt; newValue));</span><br><span class=\"line\">    System.out.println(nameMap.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>统计（count/averaging）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAveraging</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    list();</span><br><span class=\"line\">    <span class=\"comment\">//求和</span></span><br><span class=\"line\">    Long count = personList.stream().collect(Collectors.counting());</span><br><span class=\"line\">    <span class=\"comment\">//平均值</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> average = personList.stream().collect(Collectors.averagingDouble(Person::getSalary));</span><br><span class=\"line\">    <span class=\"comment\">//最大值</span></span><br><span class=\"line\">    Optional&lt;Integer&gt; max = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compareTo));</span><br><span class=\"line\">    <span class=\"comment\">//求和</span></span><br><span class=\"line\">    Integer sum = personList.stream().collect(Collectors.summingInt(Person::getSalary));</span><br><span class=\"line\">    <span class=\"comment\">//统计</span></span><br><span class=\"line\">    DoubleSummaryStatistics statistics = personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));</span><br><span class=\"line\">    statistics.getMax();</span><br><span class=\"line\">    statistics.getMin();</span><br><span class=\"line\">    statistics.getCount();</span><br><span class=\"line\">    statistics.getAverage();</span><br><span class=\"line\">    statistics.getSum();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分组（partitioningBy/groupingBy）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGroupingBy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    list();</span><br><span class=\"line\">    Map&lt;Boolean, List&lt;Person&gt;&gt; map = personList.stream().collect(Collectors.partitioningBy(a -&gt; a.getSalary() &gt; <span class=\"number\">8000</span>));</span><br><span class=\"line\">    Map&lt;String, List&lt;Person&gt;&gt; sexMap = personList.stream().collect(Collectors.groupingBy(Person::getSex));</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String, Map&lt;String, List&lt;Person&gt;&gt;&gt; tmp =</span><br><span class=\"line\">        personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.groupingBy(Person::getArea)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接合（joining）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJoin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    list();</span><br><span class=\"line\">    String str = personList.stream().map(Person::getName).collect(Collectors.joining(<span class=\"string\">&quot;,&quot;</span>));</span><br><span class=\"line\">    System.out.println(str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>排序（sorted）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 排序</span></span><br><span class=\"line\"><span class=\"comment\"> * sorted()：自然排序，流中元素需实现Comparable接口</span></span><br><span class=\"line\"><span class=\"comment\"> * sorted(Comparator com)：Comparator排序器自定义排序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSorted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    list();</span><br><span class=\"line\">    <span class=\"comment\">//正序</span></span><br><span class=\"line\">    List&lt;Person&gt; newList = personList.stream().sorted(Comparator.comparingInt(Person::getSalary)).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(newList.toString());</span><br><span class=\"line\">    <span class=\"comment\">//倒序</span></span><br><span class=\"line\">    List&lt;Integer&gt; newList2 = personList.stream().map(Person::getSalary).sorted(Comparator.comparingInt(a -&gt; (<span class=\"keyword\">int</span>) a).reversed()).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(newList2.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提取/组合</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDistinct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String[] arr1 = &#123;<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;d&quot;</span>&#125;;</span><br><span class=\"line\">    String[] arr2 = &#123;<span class=\"string\">&quot;d&quot;</span>, <span class=\"string\">&quot;e&quot;</span>, <span class=\"string\">&quot;f&quot;</span>, <span class=\"string\">&quot;g&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; strList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(Arrays.asList(arr1));</span><br><span class=\"line\"></span><br><span class=\"line\">    Stream&lt;String&gt; stream1 = Stream.of(arr1);</span><br><span class=\"line\">    Stream&lt;String&gt; stream2 = Stream.of(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// concat:合并两个流</span></span><br><span class=\"line\">    <span class=\"comment\">// distinct：去重</span></span><br><span class=\"line\">    List&lt;String&gt; list = Stream.concat(stream1, stream2).distinct().collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(list);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// limit：限制从流中获得前n个数据</span></span><br><span class=\"line\">    List&lt;String&gt; list2 = strList.stream().limit(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(list2.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// skip：跳过前n个数据</span></span><br><span class=\"line\">    List&lt;String&gt; list3 = strList.stream().skip(<span class=\"number\">1</span>).limit(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(list3.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// iterate：遍历</span></span><br><span class=\"line\">    List&lt;Integer&gt; list4 = Stream.iterate(<span class=\"number\">1</span>, x -&gt; x + <span class=\"number\">2</span>).skip(<span class=\"number\">1</span>).limit(<span class=\"number\">5</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(list4);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"6，同步访问共享的可变数据\"><a href=\"#6，同步访问共享的可变数据\" class=\"headerlink\" title=\"6，同步访问共享的可变数据\"></a>6，同步访问共享的可变数据</h5><p>举个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.functionTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StopThread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> stopRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stopRequest) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        stopRequest = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可能期待这个程序运行大约一秒钟左右，之后主线程将 stopRequest 设置为 true ，致使后台线程的循环终止。但是实际上，这个程序永远不会终止：因为后台 线程永远在循环！</p>\n<p>问题在于，由于没有同步，就不能保证后台线程何时‘看到’主线程对 stopRequest 的值所做的改变。没有同步，虚拟机将以下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (!stopRequest) &#123;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>转变成这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!stopRequest)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">\t\ti++;    </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种优化称作<strong>提升（ hoisting ）</strong>，正是 OpenJDK Server VM的工作 结果是一个<strong>活性失败 (liveness failure ）</strong>：这个程序并没有得到提升。</p>\n<p>修正这个问题的一种方式是同步访问<code>stopRequest</code>域。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.functionTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StopThread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> stopRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setStopRequest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        stopRequest = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getStopRequest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stopRequest;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!getStopRequest()) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        setStopRequest();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，我们的<strong>读和写操作都要同步</strong>，否则无法保证同步起作用。</p>\n<p>还有一种方式就是<code>volatile</code>关键字，虽然 volatile 修饰符不执行互斥访问，但它可以保证任何一个线程在读取该域的时候都将看到最近刚刚被写入的值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.functionTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StopThread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> stopRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stopRequest) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        stopRequest = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用volatile关键字的时候，我们需要特别注意，不能使用i++（增量操作符）的操作，因为这个操作<strong>不是原子的</strong>。这个操作域中执行两项操作：首先它读取值，然后写回一个新值，相当于原来的值再加上1。如果第二个线程在第一个线程读取旧值和写回新值期间读取这个域，第二个线程就会与第一个线程一起看到同一个值，并返回相同的序列号，这就是<strong>安全性失败（ safety failure ）</strong>：这个程序会计算出错误的结果。修复方法是用synchronized来代替volatile。当然最好的办法是替换成原子类java.util.concurrent.atomic。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Atomiclang i =<span class=\"keyword\">new</span> Atomiclong(); </span><br><span class=\"line\">i.getAndincrement();</span><br></pre></td></tr></table></figure>\n\n<p>总而言之， <strong>当多个线程共享可变数据的时候，每个读或者写数据的线程都必须执行同步。</strong></p>\n"},{"title":"深入理解java虚拟机（一）：内存分配策略","date":"2020-11-19T09:03:54.000Z","_content":"\n##### 引用计数算法\n\n很多教科书判断对象是否存活的算法是这样的：在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；这种说法是错误的，\n\n引用计数算法（Reference Counting）虽然占用了一些额外的内存空间来进行计数，但它的原理简单，判定效率也很高，在大多数情况下它都是一个不错的算法。也有一些比较著名的应用案例，例如微软COM（Component Object Model）技术、使用ActionScript 3的FlashPlayer、Python语言以及在游戏脚本领域得到许多应用的Squirrel中都使用了引用计数算法进行内存管理。但是，在Java领域，至少主流的Java虚拟机里面都没有选用引用计数算法来管理内存，主要原因是，这个看似简单的算法有很多例外情况要考虑，必须要配合大量额外处理才能保证正确地工作，譬如单纯的引用计数就很难解决对象之间相互循环引用的问题。\n\n举个简单的例子：对象objA和objB都有字段instance，赋值令objA.instance=objB及objB.instance=objA，除此之外，这两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着对方，导致它们的引用计数都不为零，引用计数算法也就无法回收它们。所以Java虚拟机并不是通过引用计数算法来判断对象是否存活的。\n\n##### 可达性分析算法\n\n当前主流的商用程序语言（Java、C#，上溯至前面提到的古老的Lisp）的内存管理子系统，都是通过可达性分析（Reachability Analysis）算法来判定对象是否存活的。这个算法的基本思路就是通过一系列称为“GC Roots”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain），如果某个对象到GC Roots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。\n\n![image-20201119170850993](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119170850993.png?x-oss-process=style/radio93)\n\n如图所示，对象object 5、object 6、object 7虽然互有关联，但是它们到GC Roots是不可达的，因此它们将会被判定为可回收的对象。\n\n###### 在Java技术体系里面，固定可作为GC Roots的对象包括以下几种：\n\n1. 在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。\n2. 在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。\n3. 在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。\n4. 在本地方法栈中JNI（即通常所说的Native方法）引用的对象。\n5. Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。\n6. 所有被同步锁（synchronized关键字）持有的对象。\n7. 反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。\n\n除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。譬如后文将会提到的分代收集和局部回收（Partial GC），如果只针对Java堆中某一块区域发起垃圾收集时（如最典型的只针对新生代的垃圾收集），必须考虑到内存区域是虚拟机自己的实现细节（在用户视角里任何内存区域都是不可见的），更不是孤立封闭的，所以某个区域里的对象完全有可能被位于堆中其他区域的对象所引用，这时候就需要将这些关联区域的对象也一并加入GC Roots集合中去，才能保证可达性分析的正确性。\n\n##### 引用\n\n无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否引用链可达，判定对象是否存活都和“引用”离不开关系。在JDK1.2版之前，Java里面的引用是很传统的定义：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称该reference数据是代表某块内存、某个对象的引用。这种定义并没有什么不对，只是现在看来有些过于狭隘了，一个对象在这种定义下只有“被引用”或者“未被引用”两种状态，对于描述一些“食之无味，弃之可惜”的对象就显得无能为力。譬如我们希望能描述一类对象：当内存空间还足够时，能保留在内存之中，如果内存空间在进行垃圾收集后仍然非常紧张，那就可以抛弃这些对象——很多系统的缓存功能都符合这样的应用场景。\n\n在JDK1.2版之后，Java对引用的概念进行了扩充，将引用分为强引用（Strongly Re-ference）、软引用（Soft Reference）、弱引用（Weak Reference）和虚引用（Phantom Reference）4种，这4种引用强度依次逐渐减弱。\n\n1. 强引用是最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似“Object obj=new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。\n2. 软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK1.2版之后提供了SoftReference类来实现软引用。\n3. 弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2版之后提供了WeakReference类来实现弱引用。\n4. 虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK1.2版之后提供了PhantomReference类来实现虚引用。\n\n##### finalize\n\n即使在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记，随后进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。假如对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。\n\n如果这个对象被判定为确有必要执行finalize()方法，那么该对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低调度优先级的Finalizer线程去执行它们的finalize()方法。这里所说的“执行”是指虚拟机会触发这个方法开始运行，但并不承诺一定会等待它运行结束。这样做的原因是，如果某个对象的finalize()方法执行缓慢，或者更极端地发生了死循环，将很可能导致F-Queue队列中的其他对象永久处于等待，甚至导致整个内存回收子系统的崩溃。finalize()方法是对象逃脱死亡命运的最后一次机会，稍后收集器将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或者对象的成员变量，那在第二次标记时它将被移出“即将回收”的集合；如果对象这时候还没有逃脱，那基本上它就真的要被回收了。\n\n下面这个例子我们可以看到一个对象的finalize()被执行，但是它仍然可以存活。\n\n```java\npackage effectiveJava.functionTest;\n\n/**\n * 此代码演示了两点：\n * 1.对象可以在被GC时自我拯救。\n * 2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次\n */\npublic class FinalizeEscapeGC {\n    public static FinalizeEscapeGC SAVE_HOOK = null;\n\n    public void isAlive() {\n        System.out.println(\"yes, i am still alive;\");\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        super.finalize();\n        System.out.println(\"finalize method executed!\");\n        SAVE_HOOK = this;\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        SAVE_HOOK = new FinalizeEscapeGC();\n        SAVE_HOOK = null;\n\n        System.gc();\n\n        // 因为finalize方法优先级很低，暂停0.5秒，以等待它\n        Thread.sleep(500);\n        if (SAVE_HOOK != null) {\n            SAVE_HOOK.isAlive();\n        } else {\n            System.out.println(\"no , i am dead\");\n        }\n\n    }\n}\n```\n\n运行结果：\n\n```java\nfinalize method executed!\nyes, i am still alive;\n```\n\n如果我们接着在main方法后面再写一遍，那它就会被回收了\n\n```java\n//下面这段代码与上面的完全相同，但是这次自救却失败了。\n//这是因为任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临\n//下一次回收，它的finalize()方法不会被再次执行，因此第二段代码的自救行动失败了。\nSAVE_HOOK = null;\nSystem.gc();\nThread.sleep(500);\nif (SAVE_HOOK != null) {\n    SAVE_HOOK.isAlive();\n} else {\n    System.out.println(\"no , i am dead\");\n}\n```\n\n运行结果：\n\n```java\nfinalize method executed!\nyes, i am still alive;\nno , i am dead\n```\n\n>有一点需要特别说明，上面关于对象死亡时finalize()方法的描述可能带点悲情的艺术加工，我们并不鼓励大家使用这个方法来拯救对象。相反，建议大家尽量避免使用它，因为它并不能等同于C和C++语言中的析构函数，而是Java刚诞生时为了使传统C、C++程序员更容易接受Java所做出的一项妥协。它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序，如今已被官方明确声明为不推荐使用的语法。有些教材中描述它适合做“关闭外部资源”之类的清理性工作，这完全是对finalize()方法用途的一种自我安慰。finalize()能做的所有工作，使用try-finally或者其他方式都可以做得更好、更及时，所以笔者建议大家完全可以忘掉Java语言里面的这个方法。\n\n##### 回收方法区\n\n有些人认为方法区（如HotSpot虚拟机中的元空间或者永久代）是没有垃圾收集行为的，《Java虚拟机规范》中提到过可以不要求虚拟机在方法区中实现垃圾收集，事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如JDK11时期的ZGC收集器就不支持类卸载），方法区垃圾收集的“性价比”通常也是比较低的：在Java堆中，尤其是在新生代中，对常规应用进行一次垃圾收集通常可以回收70%至99%的内存空间，相比之下，方法区回收囿于苛刻的判定条件，其区域垃圾收集的回收成果往往远低于此。\n\n方法区的垃圾收集主要回收两部分内容：**废弃的常量**和**不再使用的类型**。回收废弃常量与回收Java堆中的对象非常类似。举个常量池中字面量回收的例子，假如一个字符串“java”曾经进入常量池中，但是当前系统又没有任何一个字符串对象的值是“java”，换句话说，已经没有任何字符串对象引用常量池中的“java”常量，且虚拟机中也没有其他地方引用这个字面量。如果在这时发生内存回收，而且垃圾收集器判断确有必要的话，这个“java”常量就将会被系统清理出常量池。常量池中其他类（接口）、方法、字段的符号引用也与此类似。\n\n判定一个常量是否“废弃”还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足下面三个条件：\n\n1. 该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。\n2. 加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的。\n3. 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。\n\nJava虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，HotSpot虚拟机提供了Xnoclassgc参数进行控制，还可以使用-verbose：class以及-XX：+TraceClass-Loading、-XX：+TraceClassUnLoading查看类加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，-XX：+TraceClassUnLoading参数需要FastDebug版的虚拟机支持。\n\n在大量使用反射、动态代理、CGLib等字节码框架，动态生成JSP以及OSGi这类频繁自定义类加载器的场景中，通常都需要Java虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力。\n\n##### 垃圾收集算法\n\n从如何判定对象消亡的角度出发，垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。由于引用计数式垃圾收集算法在主流Java虚拟机中均未涉及，所以我们暂不介绍，后面涉及到的算法均属于追踪式垃圾收集的范畴。\n\n###### 分代收集理论\n\n当前商业虚拟机的垃圾收集器，大多数都遵循了“分代收集”（Generational Collection）的理论进行设计，分代收集名为理论，实质是一套符合大多数程序运行实际情况的经验法则，它建立在两个分代假说之上：\n\n1. 弱分代假说（Weak Generational Hypothesis）：绝大多数对象都是朝生夕灭的。\n2. 强分代假说（Strong Generational Hypothesis）：熬过越多次垃圾收集过程的对象就越难以消亡。\n\n这两个分代假说共同奠定了多款常用的垃圾收集器的一致的设计原则：收集器应该将Java堆划分出不同的区域，然后将回收对象依据其年龄（年龄即对象熬过垃圾收集过程的次数）分配到不同的区域之中存储。显而易见，如果一个区域中大多数对象都是朝生夕灭，难以熬过垃圾收集过程的话，那么把它们集中放在一起，每次回收时只关注如何保留少量存活而不是去标记那些大量将要被回收的对象，就能以较低代价回收到大量的空间；如果剩下的都是难以消亡的对象，那把它们集中放在一块，虚拟机便可以使用较低的频率来回收这个区域，这就同时兼顾了垃圾收集的时间开销和内存的空间有效利用。\n\n在Java堆划分出不同的区域之后，垃圾收集器才可以每次只回收其中某一个或者某些部分的区域——因而才有了“Minor GC”“Major GC”“Full GC”这样的回收类型的划分；也才能够针对不同的区域安排与里面存储对象存亡特征相匹配的垃圾收集算法——因而发展出了“标记-复制算法”“标记-清除算法”“标记-整理算法”等针对性的垃圾收集算法。这里我们需要知道，这一切的出现都始于分代收集理论。\n\n把分代收集理论具体放到现在的商用Java虚拟机里，设计者一般至少会把Java堆划分为新生代（Young Generation）和老年代（Old Generation）两个区域。顾名思义，在新生代中，每次垃圾收集时都发现有大批对象死去，而每次回收后存活的少量对象，将会逐步晋升到老年代中存放。如果读者有兴趣阅读HotSpot虚拟机源码的话，会发现里面存在着一些名为“*Generation”的实现，如“DefNewGeneration”和“ParNewGeneration”等，这些就是HotSpot的“分代式垃圾收集器框架”。原本HotSpot鼓励开发者尽量在这个框架内开发新的垃圾收集器，但除了最早期的两组四款收集器之外，后来的开发者并没有继续遵循。导致此事的原因有很多，最根本的是分代收集理论仍在不断发展之中，如何实现也有许多细节可以改进，被既定的代码框架约束反而不便。其实我们只要仔细思考一下，也很容易发现分代收集并非只是简单划分一下内存区域那么容易，它至少存在一个明显的困难：对象不是孤立的，对象之间会存在跨代引用。\n\n假如要现在进行一次只局限于新生代区域内的收集（Minor GC），但新生代中的对象是完全有可能被老年代所引用的，为了找出该区域中的存活对象，不得不在固定的GC Roots之外，再额外遍历整个老年代中所有对象来确保可达性分析结果的正确性，反过来也是一样。遍历整个老年代所有对象的方案虽然理论上可行，但无疑会为内存回收带来很大的性能负担。为了解决这个问题，就需要对分代收集理论添加第三条经验法则：\n\n3. 跨代引用假说（Intergenerational Reference Hypothesis）：跨代引用相对于同代引用来说仅占极少数。\n\n这其实是可根据前两条假说逻辑推理得出的隐含推论：存在互相引用关系的两个对象，是应该倾向于同时生存或者同时消亡的。举个例子，如果某个新生代对象存在跨代引用，由于老年代对象难以消亡，该引用会使得新生代对象在收集时同样得以存活，进而在年龄增长之后晋升到老年代中，这时跨代引用也随即被消除了。\n\n依据这条假说，我们就不应再为了少量的跨代引用去扫描整个老年代，也不必浪费空间专门记录每一个对象是否存在及存在哪些跨代引用，只需在新生代上建立一个全局的数据结构（该结构被称为“记忆集”，Remembered Set），这个结构把老年代划分成若干小块，标识出老年代的哪一块内存会存在跨代引用。此后当发生Minor GC时，只有包含了跨代引用的小块内存里的对象才会被加入到GC Roots进行扫描。虽然这种方法需要在对象改变引用关系（如将自己或者某个属性赋值）时维护记录数据的正确性，会增加一些运行时的开销，但比起收集时扫描整个老年代来说仍然是划算的。\n\n这里我们提到了一些垃圾收集的名词，我们整理一下\n\n1. 部分收集（Partial GC）：指目标不是完整收集整个Java堆的垃圾收集，其中又分为：\n   1. 新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。\n   2. 老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。另外请注意“Major GC”这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集。\n   3. 混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。\n2. 整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。\n\n>值得注意的是，分代收集理论也有其缺陷，最新出现（或在实验中）的几款垃圾收集器都展现出了面向全区域收集设计的思想，或者可以支持全区域不分代的收集的工作模式。\n>\n>新生代（Young）、老年代（Old）是HotSpot虚拟机，也是现在业界主流的命名方式。在IBM J9虚拟机中对应称为婴儿区（Nursery）和长存区（Tenured），名字不同但其含义是一样的。\n>\n>通常能单独发生收集行为的只是新生代，所以这里“反过来”的情况只是理论上允许，实际上除了CMS收集器，其他都不存在只针对老年代的收集。\n\n###### 标记-清除算法\n\n最早出现也是最基础的垃圾收集算法是“标记-清除”（Mark-Sweep）算法，在1960年由Lisp之父John McCarthy所提出。如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，也可以反过来，标记存活的对象，统一回收所有未被标记的对象。标记过程就是对象是否属于垃圾的判定过程，这在上面讲述垃圾对象标记判定算法时其实已经介绍过了。\n\n之所以说它是最基础的收集算法，是因为后续的收集算法大多都是以标记-清除算法为基础，对其缺点进行改进而得到的。它的主要缺点有两个：\n\n1. 第一个是执行效率不稳定，如果Java堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低。\n2. 第二个是内存空间的碎片化问题，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n\n标记-清除算法的执行过程如图所示：\n\n![image-20201119174808185](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119174808185.png?x-oss-process=style/radio93)\n\n###### 标记-复制算法\n\n标记-复制算法常被简称为复制算法。为了解决标记-清除算法面对大量可回收对象时执行效率低的问题，1969年Fenichel提出了一种称为“半区复制”（Semispace Copying）的垃圾收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。如果内存中多数对象都是存活的，这种算法将会产生大量的内存间复制的开销，但对于多数对象都是可回收的情况，算法需要复制的就是占少数的存活对象，而且每次都是针对整个半区进行内存回收，分配内存时也就不用考虑有空间碎片的复杂情况，只要移动堆顶指针，按顺序分配即可。这样实现简单，运行高效，不过其缺陷也显而易见，这种复制回收算法的代价是将可用内存缩小为了原来的一半，空间浪费未免太多了一点。\n\n标记-复制算法的执行过程如图所示：\n\n![image-20201119174918095](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119174918095.png?x-oss-process=style/radio93)\n\n现在的商用Java虚拟机大多都优先采用了这种收集算法去回收新生代，IBM公司曾有一项专门研究对新生代“朝生夕灭”的特点做了更量化的诠释——新生代中的对象有98%熬不过第一轮收集。因此并不需要按照1∶1的比例来划分新生代的内存空间。\n\n在1989年，Andrew Appel针对具备“朝生夕灭”特点的对象，提出了一种更优化的半区复制分代策略，现在称为“Appel式回收”。HotSpot虚拟机的Serial、ParNew等新生代收集器均采用了这种策略来设计新生代的内存布局。Appel式回收的具体做法是把新生代分为一块较大的Eden空间和两块较小的Survivor空间，每次分配内存只使用Eden和其中一块Survivor。发生垃圾搜集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8∶1，也即每次新生代中可用内存空间为整个新生代容量的90%（Eden的80%加上一个Survivor的10%），只有一个Survivor空间，即10%的新生代是会被“浪费”的。当然，98%的对象可被回收仅仅是“普通场景”下测得的数据，任何人都没有办法百分百保证每次回收都只有不多于10%的对象存活，因此Appel式回收还有一个充当罕见情况的“逃生门”的安全设计，当Survivor空间不足以容纳一次Minor GC之后存活的对象时，就需要依赖其他内存区域（实际上大多就是老年代）进行分配担保（Handle Promotion）。\n\n![image-20201119175401527](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119175401527.png?x-oss-process=style/radio93)\n\n 内存的分配担保好比我们去银行借款，如果我们信誉很好，在98%的情况下都能按时偿还，于是银行可能会默认我们下一次也能按时按量地偿还贷款，只需要有一个担保人能保证如果我不能还款时，可以从他的账户扣钱，那银行就认为没有什么风险了。内存的分配担保也一样，如果另外一块Survivor空间没有足够空间存放上一次新生代收集下来的存活对象，这些对象便将通过分配担保机制直接进入老年代，这对虚拟机来说就是安全的。\n\n>这里需要说明一下，HotSpot中的这种分代方式从最初就是这种布局，和IBM的研究并没有什么实际关系。这里列举IBM的研究只是为了说明这种分代布局的意义所在。\n\n###### 标记-整理算法\n\n标记-复制算法在对象存活率较高时就要进行较多的复制操作，效率将会降低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。\n\n针对老年代对象的存亡特征，1974年Edward Lueders提出了另外一种有针对性的“标记-整理”（Mark-Compact）算法，其中的标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。\n\n标记-整理算法的示意图如图所示：\n\n![image-20201119191802016](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119191802016.png?x-oss-process=style/radio93)\n\n>标记-清除算法与标记-整理算法的本质差异在于前者是一种非移动式的回收算法，而后者是移动式的。是否移动回收后的存活对象是一项优缺点并存的风险决策。\n\n如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活区域，移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作，而且这种对象移动操作必须全程暂停用户应用程序才能进行，这就更加让使用者不得不小心翼翼地权衡其弊端了，像这样的停顿被最初的虚拟机设计者形象地描述为“Stop The World”。\n\n但如果跟标记-清除算法那样完全不考虑移动和整理存活对象的话，弥散于堆中的存活对象导致的空间碎片化问题就只能依赖更为复杂的内存分配器和内存访问器来解决。譬如通过“分区空闲分配链表”来解决内存分配问题（计算机硬盘存储大文件就不要求物理连续的磁盘空间，能够在碎片化的硬盘上存储和访问就是通过硬盘分区表实现的）。内存的访问是用户程序最频繁的操作，甚至都没有之一，假如在这个环节上增加了额外的负担，势必会直接影响应用程序的吞吐量。\n\n基于以上两点，是否移动对象都存在弊端，移动则内存回收时会更复杂，不移动则内存分配时会更复杂。从垃圾收集的停顿时间来看，不移动对象停顿时间会更短，甚至可以不需要停顿，但是从整个程序的吞吐量来看，移动对象会更划算。此语境中，吞吐量的实质是赋值器（Mutator，可以理解为使用垃圾收集的用户程序，本书为便于理解，多数地方用“用户程序”或“用户线程”代替）与收集器的效率总和。即使不移动对象会使得收集器的效率提升一些，但因内存分配和访问相比垃圾收集频率要高得多，这部分的耗时增加，总吞吐量仍然是下降的。HotSpot虚拟机里面关注吞吐量的Parallel Scavenge收集器是基于标记-整理算法的，而关注延迟的CMS收集器则是基于标记-清除算法的，这也从侧面印证这点。\n\n另外，还有一种“和稀泥式”解决方案可以不在内存分配和访问上增加太大额外负担，做法是让虚拟机平时多数时间都采用标记-清除算法，暂时容忍内存碎片的存在，直到内存空间的碎片化程度已经大到影响对象分配时，再采用标记-整理算法收集一次，以获得规整的内存空间。前面提到的基于标记-清除算法的CMS收集器面临空间碎片过多时采用的就是这种处理办法。\n\n> 最新的ZGC和Shenandoah收集器使用读屏障（Read Barrier）技术实现了整理过程与用户线程的并发执行。\n>\n> 通常标记-清除算法也是需要停顿用户线程来标记、清理可回收对象的，只是停顿时间相对而言要来的短而已。\n\n##### HotSpot的算法细节实现-------根节点枚举\n\n我们以可达性分析算法中从GC Roots集合找引用链这个操作作为介绍虚拟机高效实现的第一个例子。固定可作为GC Roots的节点主要在全局性的引用（例如常量或类静态属性）与执行上下文（例如栈帧中的本地变量表）中，尽管目标明确，但查找过程要做到高效并非一件容易的事情，现在Java应用越做越庞大，光是方法区的大小就常有数百上千兆，里面的类、常量等更是恒河沙数，若要逐个检查以这里为起源的引用肯定得消耗不少时间。\n\n迄今为止，所有收集器在根节点枚举这一步骤时都是必须暂停用户线程的，因此毫无疑问根节点枚举与之前提及的整理内存碎片一样会面临相似的“Stop The World”的困扰。现在可达性分析算法耗时最长的查找引用链的过程已经可以做到与用户线程一起并发，但根节点枚举始终还是必须在一个能保障一致性的快照中才得以进行——这里“一致性”的意思是整个枚举期间执行子系统看起来就像被冻结在某个时间点上，不会出现分析过程中，根节点集合的对象引用关系还在不断变化的情况，若这点不能满足的话，分析结果准确性也就无法保证。这是导致垃圾收集过程必须停顿所有用户线程的其中一个重要原因，即使是号称停顿时间可控，或者（几乎）不会发生停顿的CMS、G1、ZGC等收集器，枚举根节点时也是必须要停顿的。\n\n由于目前主流Java虚拟机使用的都是准确式垃圾收集，所以当用户线程停顿下来之后，其实并不需要一个不漏地检查完所有执行上下文和全局的引用位置，虚拟机应当是有办法直接得到哪些地方存放着对象引用的。在HotSpot的解决方案里，是使用一组称为**OopMap**的数据结构来达到这个目的。一旦类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么类型的数据计算出来，在即时编译过程中，也会在特定的位置记录下栈里和寄存器里哪些位置是引用。这样收集器在扫描时就可以直接得知这些信息了，并不需要真正一个不漏地从方法区等GC Roots开始查找。\n\n##### HotSpot的算法细节实现-------安全点\n\n在OopMap的协助下，HotSpot可以快速准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说导致OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外存储空间，这样垃圾收集伴随而来的空间成本就会变得无法忍受的高昂。\n\n实际上HotSpot也的确没有为每条指令都生成OopMap，前面已经提到，只是在“特定的位置”记录了这些信息，这些位置被称为安全点（Safepoint）。有了安全点的设定，也就决定了用户程序执行时并非在代码指令流的任意位置都能够停顿下来开始垃圾收集，而是**强制要求必须执行到达安全点后能够暂停**。因此，安全点的选定既不能太少以至于让收集器等待时间过长，也不能太过频繁以至于过分增大运行时的内存负荷。安全点位置的选取基本上是以“是否具有让程序长时间执行的特征”为标准进行选定的，因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这样的原因而长时间执行，“长时间执行”的最明显特征就是指令序列的复用，例如方法调用、循环跳转、异常跳转等都属于指令序列复用，所以只有具有这些功能的指令才会产生安全点。\n\n对于安全点，另外一个需要考虑的问题是，如何在垃圾收集发生时让所有线程（这里其实不包括执行JNI调用的线程）都跑到最近的安全点，然后停顿下来。这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和**主动式中断**（Voluntary Suspension），抢先式中断不需要线程的执行代码主动去配合，在垃圾收集发生时，系统首先把所有用户线程全部中断，如果发现有用户线程中断的地方不在安全点上，就恢复这条线程执行，让它一会再重新中断，直到跑到安全点上。现在几乎没有虚拟机实现采用抢先式中断来暂停线程响应GC事件。\n\n而主动式中断的思想是当垃圾收集需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志位，各个线程执行过程时会不停地主动去轮询这个标志，**一旦发现中断标志为真时就自己在最近的安全点上主动中断挂起**。轮询标志的地方和安全点是重合的，另外还要加上所有创建对象和其他需要在Java堆上分配内存的地方，这是为了检查是否即将要发生垃圾收集，避免没有足够内存分配新对象。\n\n>由于轮询操作在代码中会频繁出现，这要求它必须足够高效。HotSpot使用内存保护陷阱的方式，把轮询操作精简至只有一条汇编指令的程度。\n\n##### HotSpot的算法细节实现-------安全区域\n\n使用安全点的设计似乎已经完美解决如何停顿用户线程，让虚拟机进入垃圾回收状态的问题了，但实际情况却并不一定。安全点机制保证了程序执行时，在不太长的时间内就会遇到可进入垃圾收集过程的安全点。但是，程序“不执行”的时候呢？所谓的程序不执行就是没有分配处理器时间，典型的场景便是用户**线程处于Sleep状态或者Blocked状态**，这时候线程无法响应虚拟机的中断请求，不能再走到安全的地方去中断挂起自己，虚拟机也显然不可能持续等待线程重新被激活分配处理器时间。对于这种情况，就必须引入安全区域（Safe Region）来解决。\n\n**安全区域是指能够确保在某一段代码片段之中，引用关系不会发生变化，因此，在这个区域中任意地方开始垃圾收集都是安全的。**我们也可以把安全区域看作被扩展拉伸了的安全点。\n\n当用户线程执行到安全区域里面的代码时，首先会标识自己已经进入了安全区域，那样当这段时间里虚拟机要发起垃圾收集时就不必去管这些已声明自己在安全区域内的线程了。当线程要离开安全区域时，它要检查虚拟机是否已经完成了根节点枚举（或者垃圾收集过程中其他需要暂停用户线程的阶段），如果完成了，那线程就当作没事发生过，继续执行；否则它就必须一直等待，直到收到可以离开安全区域的信号为止。\n\n##### HotSpot的算法细节实现-------记忆集与卡表\n\n上面我们再说分代收集理论的时候，提到了为解决对象跨代引用所带来的问题，垃圾收集器在新生代中建立了名为记忆集（Remembered Set）的数据结构，用以避免把整个老年代加进GC Roots扫描范围。事实上并不只是新生代、老年代之间才有跨代引用的问题，所有涉及部分区域收集（Partial GC）行为的垃圾收集器，典型的如G1、ZGC和Shenandoah收集器，都会面临相同的问题。\n\n记忆集是一种用于记录从非收集区域指向收集区域的指针集合的抽象数据结构。如果我们不考虑效率和成本的话，最简单的实现可以用非收集区域中所有含跨代引用的对象数组来实现这个数据结构。如代码：\n\n```java\nClass RememberedSet {\n\tObject[] set[OBJECT_INTERGENERATIONAL_REFERENCE_SIZE];\n}\n```\n\n这种记录全部含跨代引用对象的实现方案，无论是空间占用还是维护成本都相当高昂。而在垃圾收集的场景中，收集器只需要通过记忆集判断出某一块非收集区域是否存在有指向了收集区域的指针就可以了，并不需要了解这些跨代指针的全部细节。那设计者在实现记忆集的时候，便可以选择更为粗犷的记录粒度来节省记忆集的存储和维护成本，下面列举了一些可供选择（当然也可以选择这个范围以外的）的记录精度：\n\n1. 字长精度：每个记录精确到一个机器字长（就是处理器的寻址位数，如常见的32位或64位，这个精度决定了机器访问物理内存地址的指针长度），该字包含跨代指针。\n2. 对象精度：每个记录精确到一个对象，该对象里有字段含有跨代指针。\n3. 卡精度：每个记录精确到一块内存区域，该区域内有对象含有跨代指针。\n\n其中，**第三种“卡精度”所指的是用一种称为“卡表”**（Card Table）的方式去实现记忆集，这也是目前最常用的一种记忆集实现形式，一些资料中甚至直接把它和记忆集混为一谈。前面定义中提到记忆集其实是一种“抽象”的数据结构，抽象的意思是只定义了记忆集的行为意图，并没有定义其行为的具体实现。卡表就是记忆集的一种具体实现，它定义了记忆集的记录精度、与堆内存的映射关系等。\n\n卡表最简单的形式可以只是一个字节数组，而HotSpot虚拟机确实也是这样做的。以下这行代码是HotSpot默认的卡表标记逻辑：\n\n```java\nCARD_TABLE [this address >> 9] = 0;\n```\n\n字节数组CARD_TABLE的每一个元素都对应着其标识的内存区域中一块特定大小的内存块，这个内存块被称作“卡页”（Card Page）。一般来说，卡页大小都是以2的N次幂的字节数，通过上面代码可以看出HotSpot中使用的卡页是2的9次幂，即512字节（地址右移9位，相当于用地址除以512）。那如果卡表标识内存区域的起始地址是0x0000的话，数组CARD_TABLE的第0、1、2号元素，分别对应了地址范围为0x0000～0x01FF、0x0200～0x03FF、0x0400～0x05FF的卡页内存块，如图所示：\n\n![image-20201119194852586](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119194852586.png?x-oss-process=style/radio93)\n\n一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty），没有则标识为0。在垃圾收集发生时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，把它们加入GC Roots中一并扫描。\n\n>由Antony Hosking在1993年发表的论文《Remembered sets can also play cards》中提出。\n>\n>之所以使用byte数组而不是bit数组主要是速度上的考量，现代计算机硬件都是最小按字节寻址的，没有直接存储一个bit的指令，所以要用bit的话就不得不多消耗几条shift+mask指令。\n\n##### HotSpot的算法细节实现-------写屏障\n\n我们已经解决了如何使用记忆集来缩减GC Roots扫描范围的问题，但还没有解决卡表元素如何维护的问题，例如它们何时变脏、谁来把它们变脏等。\n\n卡表元素何时变脏的答案是很明确的——有其他分代区域中对象引用了本区域对象时，其对应的卡表元素就应该变脏，变脏时间点原则上应该发生在引用类型字段赋值的那一刻。但问题是如何变脏，即如何在对象赋值的那一刻去更新维护卡表呢？假如是解释执行的字节码，那相对好处理，虚拟机负责每条字节码指令的执行，有充分的介入空间；但在编译执行的场景中呢？经过即时编译后的代码已经是纯粹的机器指令流了，这就必须找到一个在机器码层面的手段，把维护卡表的动作放到每一个赋值操作之中。\n\n在HotSpot虚拟机里是通过写屏障（Write Barrier）技术维护卡表状态的。\n\n写屏障可以看作在虚拟机层面对“引用类型字段赋值”这个动作的AOP切面，在引用对象赋值时会产生一个环形（Around）通知，供程序执行额外的动作，也就是说赋值的前后都在写屏障的覆盖范畴内。在赋值前的部分的写屏障叫作写前屏障（Pre-Write Barrier），在赋值后的则叫作写后屏障（Post-Write Barrier）。HotSpot虚拟机的许多收集器中都有使用到写屏障，但直至G1收集器出现之前，其他收集器都只用到了写后屏障。\n\n下面这段代码是一段更新卡表状态的简化逻辑：\n\n```java\nvoid oop_field_store(oop* field, oop new_value) {\n    // 引用字段赋值操作\n    *field = new_value;\n    // 写后屏障，在这里完成卡表状态更新\n    post_write_barrier(field, new_value);\n}\n```\n\n应用写屏障后，虚拟机就会为所有赋值操作生成相应的指令，一旦收集器在写屏障中增加了更新卡表操作，无论更新的是不是老年代对新生代对象的引用，每次只要对引用进行更新，就会产生额外的开销，不过这个开销与Minor GC时扫描整个老年代的代价相比还是低得多的。\n\n除了写屏障的开销外，卡表在高并发场景下还面临着“伪共享”（False Sharing）问题。伪共享是处理并发底层细节时一种经常需要考虑的问题，现代中央处理器的缓存系统中是以缓存行（Cache Line）为单位存储的，当多线程修改互相独立的变量时，如果这些变量恰好共享同一个缓存行，就会彼此影响（写回、无效化或者同步）而导致性能降低，这就是伪共享问题。\n\n假设处理器的缓存行大小为64字节，由于一个卡表元素占1个字节，64个卡表元素将共享同一个缓存行。这64个卡表元素对应的卡页总的内存为32KB（64×512字节），也就是说如果不同线程更新的对象正好处于这32KB的内存区域内，就会导致更新卡表时正好写入同一个缓存行而影响性能。为了避免伪共享问题，一种简单的解决方案是不采用无条件的写屏障，而是先检查卡表标记，只有当该卡表元素未被标记过时才将其标记为变脏，即将卡表更新的逻辑变为以下代码所示：\n\n```java\nif (CARD_TABLE [this address >> 9] != 0)\n\tCARD_TABLE [this address >> 9] = 0;\n```\n\n在JDK 7之后，HotSpot虚拟机增加了一个新的参数-XX：+UseCondCardMark，用来决定是否开启卡表更新的条件判断。开启会增加一次额外判断的开销，但能够避免伪共享问题，两者各有性能损耗，是否打开要根据应用实际运行情况来进行测试权衡。\n\n>这个语境上的内存屏障（Memory Barrier）的目的是为了指令不因编译优化、CPU执行优化等原因而导致乱序执行，它也是可以细分为仅确保读操作顺序正确性和仅确保写操作顺序正确性的内存屏障的。\n>\n>AOP为Aspect Oriented Programming的缩写，意为面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。后面提到的“环形通知”也是AOP中的概念。\n\n##### HotSpot的算法细节实现-------并发的可达性分析\n\n前面我们曾经提到了当前主流编程语言的垃圾收集器基本上都是依靠可达性分析算法来判定对象是否存活的，可达性分析算法理论上要求全过程都基于一个能保障一致性的快照中才能够进行分析，这意味着必须全程冻结用户线程的运行。在根节点枚举这个步骤中，由于GC Roots相比起整个Java堆中全部的对象毕竟还算是极少数，且在各种优化技巧（如OopMap）的加持下，它带来的停顿已经是非常短暂且相对固定（不随堆容量而增长）的了。可从GC Roots再继续往下遍历对象图，这一步骤的停顿时间就必定会与Java堆容量直接成正比例关系了：堆越大，存储的对象越多，对象图结构越复杂，要标记更多对象而产生的停顿时间自然就更长，这听起来是理所当然的事情。\n\n要知道包含“标记”阶段是所有追踪式垃圾收集算法的共同特征，如果这个阶段会随着堆变大而等比例增加停顿时间，其影响就会波及几乎所有的垃圾收集器，同理可知，如果能够削减这部分停顿时间的话，那收益也将会是系统性的。\n\n想解决或者降低用户线程的停顿，就要先搞清楚为什么必须在一个能保障一致性的快照上才能进行对象图的遍历？为了能解释清楚这个问题，我们引入三色标记（Tri-color Marking）作为工具来辅助推导，把遍历对象图过程中遇到的对象，按照“是否访问过”这个条件标记成以下三种颜色：\n\n1. 白色：表示对象尚未被垃圾收集器访问过。显然在可达性分析刚刚开始的阶段，所有的对象都是白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达。\n2. 黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接（不经过灰色对象）指向某个白色对象。\n3. 灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过。\n\n关于可达性分析的扫描过程，我们不妨发挥一下想象力，把它看作对象图上一股以灰色为波峰的波纹从黑向白推进的过程，如果用户线程此时是冻结的，只有收集器线程在工作，那不会有任何问题。但如果用户线程与收集器是并发工作呢？收集器在对象图上标记颜色，同时用户线程在修改引用关系——即修改对象图的结构，这样可能出现两种后果。一种是把原本消亡的对象错误标记为存活，这不是好事，但其实是可以容忍的，只不过产生了一点逃过本次收集的浮动垃圾而已，下次收集清理掉就好。另一种是把原本存活的对象错误标记为已消亡，这就是非常致命的后果了，程序肯定会因此发生错误。\n\n下面演示了这样的致命错误具体是如何产生的：\n\n![image-20201119202121202](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119202121202.png?x-oss-process=style/radio93)\n\nWilson于1994年在理论上证明了，当且仅当以下两个条件同时满足时，会产生“对象消失”的问题，即原本应该是黑色的对象被误标为白色：\n\n1. 赋值器插入了一条或多条从黑色对象到白色对象的新引用。\n2. 赋值器删除了全部从灰色对象到该白色对象的直接或间接引用。\n\n因此，我们要解决并发扫描时的对象消失问题，只需破坏这两个条件的任意一个即可。由此分别产生了两种解决方案：增量更新（Incremental Update）和原始快照（Snapshot At The Beginning，SATB）。\n\n增量更新要破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了。\n\n原始快照要破坏的是第二个条件，当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索。\n\n以上无论是对引用关系记录的插入还是删除，虚拟机的记录操作都是通过写屏障实现的。在HotSpot虚拟机中，增量更新和原始快照这两种解决方案都有实际应用，譬如，CMS是基于增量更新来做并发标记的，G1、Shenandoah则是用原始快照来实现。","source":"_posts/深入理解java虚拟机（一）：内存分配策略.md","raw":"---\ntitle: 深入理解java虚拟机（一）：内存分配策略\ndate: 2020-11-19 17:03:54\ntags:\n- java\n---\n\n##### 引用计数算法\n\n很多教科书判断对象是否存活的算法是这样的：在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；这种说法是错误的，\n\n引用计数算法（Reference Counting）虽然占用了一些额外的内存空间来进行计数，但它的原理简单，判定效率也很高，在大多数情况下它都是一个不错的算法。也有一些比较著名的应用案例，例如微软COM（Component Object Model）技术、使用ActionScript 3的FlashPlayer、Python语言以及在游戏脚本领域得到许多应用的Squirrel中都使用了引用计数算法进行内存管理。但是，在Java领域，至少主流的Java虚拟机里面都没有选用引用计数算法来管理内存，主要原因是，这个看似简单的算法有很多例外情况要考虑，必须要配合大量额外处理才能保证正确地工作，譬如单纯的引用计数就很难解决对象之间相互循环引用的问题。\n\n举个简单的例子：对象objA和objB都有字段instance，赋值令objA.instance=objB及objB.instance=objA，除此之外，这两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着对方，导致它们的引用计数都不为零，引用计数算法也就无法回收它们。所以Java虚拟机并不是通过引用计数算法来判断对象是否存活的。\n\n##### 可达性分析算法\n\n当前主流的商用程序语言（Java、C#，上溯至前面提到的古老的Lisp）的内存管理子系统，都是通过可达性分析（Reachability Analysis）算法来判定对象是否存活的。这个算法的基本思路就是通过一系列称为“GC Roots”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain），如果某个对象到GC Roots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。\n\n![image-20201119170850993](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119170850993.png?x-oss-process=style/radio93)\n\n如图所示，对象object 5、object 6、object 7虽然互有关联，但是它们到GC Roots是不可达的，因此它们将会被判定为可回收的对象。\n\n###### 在Java技术体系里面，固定可作为GC Roots的对象包括以下几种：\n\n1. 在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。\n2. 在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。\n3. 在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。\n4. 在本地方法栈中JNI（即通常所说的Native方法）引用的对象。\n5. Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。\n6. 所有被同步锁（synchronized关键字）持有的对象。\n7. 反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。\n\n除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。譬如后文将会提到的分代收集和局部回收（Partial GC），如果只针对Java堆中某一块区域发起垃圾收集时（如最典型的只针对新生代的垃圾收集），必须考虑到内存区域是虚拟机自己的实现细节（在用户视角里任何内存区域都是不可见的），更不是孤立封闭的，所以某个区域里的对象完全有可能被位于堆中其他区域的对象所引用，这时候就需要将这些关联区域的对象也一并加入GC Roots集合中去，才能保证可达性分析的正确性。\n\n##### 引用\n\n无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否引用链可达，判定对象是否存活都和“引用”离不开关系。在JDK1.2版之前，Java里面的引用是很传统的定义：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称该reference数据是代表某块内存、某个对象的引用。这种定义并没有什么不对，只是现在看来有些过于狭隘了，一个对象在这种定义下只有“被引用”或者“未被引用”两种状态，对于描述一些“食之无味，弃之可惜”的对象就显得无能为力。譬如我们希望能描述一类对象：当内存空间还足够时，能保留在内存之中，如果内存空间在进行垃圾收集后仍然非常紧张，那就可以抛弃这些对象——很多系统的缓存功能都符合这样的应用场景。\n\n在JDK1.2版之后，Java对引用的概念进行了扩充，将引用分为强引用（Strongly Re-ference）、软引用（Soft Reference）、弱引用（Weak Reference）和虚引用（Phantom Reference）4种，这4种引用强度依次逐渐减弱。\n\n1. 强引用是最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似“Object obj=new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。\n2. 软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK1.2版之后提供了SoftReference类来实现软引用。\n3. 弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2版之后提供了WeakReference类来实现弱引用。\n4. 虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK1.2版之后提供了PhantomReference类来实现虚引用。\n\n##### finalize\n\n即使在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记，随后进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。假如对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。\n\n如果这个对象被判定为确有必要执行finalize()方法，那么该对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低调度优先级的Finalizer线程去执行它们的finalize()方法。这里所说的“执行”是指虚拟机会触发这个方法开始运行，但并不承诺一定会等待它运行结束。这样做的原因是，如果某个对象的finalize()方法执行缓慢，或者更极端地发生了死循环，将很可能导致F-Queue队列中的其他对象永久处于等待，甚至导致整个内存回收子系统的崩溃。finalize()方法是对象逃脱死亡命运的最后一次机会，稍后收集器将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或者对象的成员变量，那在第二次标记时它将被移出“即将回收”的集合；如果对象这时候还没有逃脱，那基本上它就真的要被回收了。\n\n下面这个例子我们可以看到一个对象的finalize()被执行，但是它仍然可以存活。\n\n```java\npackage effectiveJava.functionTest;\n\n/**\n * 此代码演示了两点：\n * 1.对象可以在被GC时自我拯救。\n * 2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次\n */\npublic class FinalizeEscapeGC {\n    public static FinalizeEscapeGC SAVE_HOOK = null;\n\n    public void isAlive() {\n        System.out.println(\"yes, i am still alive;\");\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        super.finalize();\n        System.out.println(\"finalize method executed!\");\n        SAVE_HOOK = this;\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        SAVE_HOOK = new FinalizeEscapeGC();\n        SAVE_HOOK = null;\n\n        System.gc();\n\n        // 因为finalize方法优先级很低，暂停0.5秒，以等待它\n        Thread.sleep(500);\n        if (SAVE_HOOK != null) {\n            SAVE_HOOK.isAlive();\n        } else {\n            System.out.println(\"no , i am dead\");\n        }\n\n    }\n}\n```\n\n运行结果：\n\n```java\nfinalize method executed!\nyes, i am still alive;\n```\n\n如果我们接着在main方法后面再写一遍，那它就会被回收了\n\n```java\n//下面这段代码与上面的完全相同，但是这次自救却失败了。\n//这是因为任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临\n//下一次回收，它的finalize()方法不会被再次执行，因此第二段代码的自救行动失败了。\nSAVE_HOOK = null;\nSystem.gc();\nThread.sleep(500);\nif (SAVE_HOOK != null) {\n    SAVE_HOOK.isAlive();\n} else {\n    System.out.println(\"no , i am dead\");\n}\n```\n\n运行结果：\n\n```java\nfinalize method executed!\nyes, i am still alive;\nno , i am dead\n```\n\n>有一点需要特别说明，上面关于对象死亡时finalize()方法的描述可能带点悲情的艺术加工，我们并不鼓励大家使用这个方法来拯救对象。相反，建议大家尽量避免使用它，因为它并不能等同于C和C++语言中的析构函数，而是Java刚诞生时为了使传统C、C++程序员更容易接受Java所做出的一项妥协。它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序，如今已被官方明确声明为不推荐使用的语法。有些教材中描述它适合做“关闭外部资源”之类的清理性工作，这完全是对finalize()方法用途的一种自我安慰。finalize()能做的所有工作，使用try-finally或者其他方式都可以做得更好、更及时，所以笔者建议大家完全可以忘掉Java语言里面的这个方法。\n\n##### 回收方法区\n\n有些人认为方法区（如HotSpot虚拟机中的元空间或者永久代）是没有垃圾收集行为的，《Java虚拟机规范》中提到过可以不要求虚拟机在方法区中实现垃圾收集，事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如JDK11时期的ZGC收集器就不支持类卸载），方法区垃圾收集的“性价比”通常也是比较低的：在Java堆中，尤其是在新生代中，对常规应用进行一次垃圾收集通常可以回收70%至99%的内存空间，相比之下，方法区回收囿于苛刻的判定条件，其区域垃圾收集的回收成果往往远低于此。\n\n方法区的垃圾收集主要回收两部分内容：**废弃的常量**和**不再使用的类型**。回收废弃常量与回收Java堆中的对象非常类似。举个常量池中字面量回收的例子，假如一个字符串“java”曾经进入常量池中，但是当前系统又没有任何一个字符串对象的值是“java”，换句话说，已经没有任何字符串对象引用常量池中的“java”常量，且虚拟机中也没有其他地方引用这个字面量。如果在这时发生内存回收，而且垃圾收集器判断确有必要的话，这个“java”常量就将会被系统清理出常量池。常量池中其他类（接口）、方法、字段的符号引用也与此类似。\n\n判定一个常量是否“废弃”还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足下面三个条件：\n\n1. 该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。\n2. 加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的。\n3. 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。\n\nJava虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，HotSpot虚拟机提供了Xnoclassgc参数进行控制，还可以使用-verbose：class以及-XX：+TraceClass-Loading、-XX：+TraceClassUnLoading查看类加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，-XX：+TraceClassUnLoading参数需要FastDebug版的虚拟机支持。\n\n在大量使用反射、动态代理、CGLib等字节码框架，动态生成JSP以及OSGi这类频繁自定义类加载器的场景中，通常都需要Java虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力。\n\n##### 垃圾收集算法\n\n从如何判定对象消亡的角度出发，垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。由于引用计数式垃圾收集算法在主流Java虚拟机中均未涉及，所以我们暂不介绍，后面涉及到的算法均属于追踪式垃圾收集的范畴。\n\n###### 分代收集理论\n\n当前商业虚拟机的垃圾收集器，大多数都遵循了“分代收集”（Generational Collection）的理论进行设计，分代收集名为理论，实质是一套符合大多数程序运行实际情况的经验法则，它建立在两个分代假说之上：\n\n1. 弱分代假说（Weak Generational Hypothesis）：绝大多数对象都是朝生夕灭的。\n2. 强分代假说（Strong Generational Hypothesis）：熬过越多次垃圾收集过程的对象就越难以消亡。\n\n这两个分代假说共同奠定了多款常用的垃圾收集器的一致的设计原则：收集器应该将Java堆划分出不同的区域，然后将回收对象依据其年龄（年龄即对象熬过垃圾收集过程的次数）分配到不同的区域之中存储。显而易见，如果一个区域中大多数对象都是朝生夕灭，难以熬过垃圾收集过程的话，那么把它们集中放在一起，每次回收时只关注如何保留少量存活而不是去标记那些大量将要被回收的对象，就能以较低代价回收到大量的空间；如果剩下的都是难以消亡的对象，那把它们集中放在一块，虚拟机便可以使用较低的频率来回收这个区域，这就同时兼顾了垃圾收集的时间开销和内存的空间有效利用。\n\n在Java堆划分出不同的区域之后，垃圾收集器才可以每次只回收其中某一个或者某些部分的区域——因而才有了“Minor GC”“Major GC”“Full GC”这样的回收类型的划分；也才能够针对不同的区域安排与里面存储对象存亡特征相匹配的垃圾收集算法——因而发展出了“标记-复制算法”“标记-清除算法”“标记-整理算法”等针对性的垃圾收集算法。这里我们需要知道，这一切的出现都始于分代收集理论。\n\n把分代收集理论具体放到现在的商用Java虚拟机里，设计者一般至少会把Java堆划分为新生代（Young Generation）和老年代（Old Generation）两个区域。顾名思义，在新生代中，每次垃圾收集时都发现有大批对象死去，而每次回收后存活的少量对象，将会逐步晋升到老年代中存放。如果读者有兴趣阅读HotSpot虚拟机源码的话，会发现里面存在着一些名为“*Generation”的实现，如“DefNewGeneration”和“ParNewGeneration”等，这些就是HotSpot的“分代式垃圾收集器框架”。原本HotSpot鼓励开发者尽量在这个框架内开发新的垃圾收集器，但除了最早期的两组四款收集器之外，后来的开发者并没有继续遵循。导致此事的原因有很多，最根本的是分代收集理论仍在不断发展之中，如何实现也有许多细节可以改进，被既定的代码框架约束反而不便。其实我们只要仔细思考一下，也很容易发现分代收集并非只是简单划分一下内存区域那么容易，它至少存在一个明显的困难：对象不是孤立的，对象之间会存在跨代引用。\n\n假如要现在进行一次只局限于新生代区域内的收集（Minor GC），但新生代中的对象是完全有可能被老年代所引用的，为了找出该区域中的存活对象，不得不在固定的GC Roots之外，再额外遍历整个老年代中所有对象来确保可达性分析结果的正确性，反过来也是一样。遍历整个老年代所有对象的方案虽然理论上可行，但无疑会为内存回收带来很大的性能负担。为了解决这个问题，就需要对分代收集理论添加第三条经验法则：\n\n3. 跨代引用假说（Intergenerational Reference Hypothesis）：跨代引用相对于同代引用来说仅占极少数。\n\n这其实是可根据前两条假说逻辑推理得出的隐含推论：存在互相引用关系的两个对象，是应该倾向于同时生存或者同时消亡的。举个例子，如果某个新生代对象存在跨代引用，由于老年代对象难以消亡，该引用会使得新生代对象在收集时同样得以存活，进而在年龄增长之后晋升到老年代中，这时跨代引用也随即被消除了。\n\n依据这条假说，我们就不应再为了少量的跨代引用去扫描整个老年代，也不必浪费空间专门记录每一个对象是否存在及存在哪些跨代引用，只需在新生代上建立一个全局的数据结构（该结构被称为“记忆集”，Remembered Set），这个结构把老年代划分成若干小块，标识出老年代的哪一块内存会存在跨代引用。此后当发生Minor GC时，只有包含了跨代引用的小块内存里的对象才会被加入到GC Roots进行扫描。虽然这种方法需要在对象改变引用关系（如将自己或者某个属性赋值）时维护记录数据的正确性，会增加一些运行时的开销，但比起收集时扫描整个老年代来说仍然是划算的。\n\n这里我们提到了一些垃圾收集的名词，我们整理一下\n\n1. 部分收集（Partial GC）：指目标不是完整收集整个Java堆的垃圾收集，其中又分为：\n   1. 新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。\n   2. 老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。另外请注意“Major GC”这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集。\n   3. 混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。\n2. 整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。\n\n>值得注意的是，分代收集理论也有其缺陷，最新出现（或在实验中）的几款垃圾收集器都展现出了面向全区域收集设计的思想，或者可以支持全区域不分代的收集的工作模式。\n>\n>新生代（Young）、老年代（Old）是HotSpot虚拟机，也是现在业界主流的命名方式。在IBM J9虚拟机中对应称为婴儿区（Nursery）和长存区（Tenured），名字不同但其含义是一样的。\n>\n>通常能单独发生收集行为的只是新生代，所以这里“反过来”的情况只是理论上允许，实际上除了CMS收集器，其他都不存在只针对老年代的收集。\n\n###### 标记-清除算法\n\n最早出现也是最基础的垃圾收集算法是“标记-清除”（Mark-Sweep）算法，在1960年由Lisp之父John McCarthy所提出。如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，也可以反过来，标记存活的对象，统一回收所有未被标记的对象。标记过程就是对象是否属于垃圾的判定过程，这在上面讲述垃圾对象标记判定算法时其实已经介绍过了。\n\n之所以说它是最基础的收集算法，是因为后续的收集算法大多都是以标记-清除算法为基础，对其缺点进行改进而得到的。它的主要缺点有两个：\n\n1. 第一个是执行效率不稳定，如果Java堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低。\n2. 第二个是内存空间的碎片化问题，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n\n标记-清除算法的执行过程如图所示：\n\n![image-20201119174808185](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119174808185.png?x-oss-process=style/radio93)\n\n###### 标记-复制算法\n\n标记-复制算法常被简称为复制算法。为了解决标记-清除算法面对大量可回收对象时执行效率低的问题，1969年Fenichel提出了一种称为“半区复制”（Semispace Copying）的垃圾收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。如果内存中多数对象都是存活的，这种算法将会产生大量的内存间复制的开销，但对于多数对象都是可回收的情况，算法需要复制的就是占少数的存活对象，而且每次都是针对整个半区进行内存回收，分配内存时也就不用考虑有空间碎片的复杂情况，只要移动堆顶指针，按顺序分配即可。这样实现简单，运行高效，不过其缺陷也显而易见，这种复制回收算法的代价是将可用内存缩小为了原来的一半，空间浪费未免太多了一点。\n\n标记-复制算法的执行过程如图所示：\n\n![image-20201119174918095](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119174918095.png?x-oss-process=style/radio93)\n\n现在的商用Java虚拟机大多都优先采用了这种收集算法去回收新生代，IBM公司曾有一项专门研究对新生代“朝生夕灭”的特点做了更量化的诠释——新生代中的对象有98%熬不过第一轮收集。因此并不需要按照1∶1的比例来划分新生代的内存空间。\n\n在1989年，Andrew Appel针对具备“朝生夕灭”特点的对象，提出了一种更优化的半区复制分代策略，现在称为“Appel式回收”。HotSpot虚拟机的Serial、ParNew等新生代收集器均采用了这种策略来设计新生代的内存布局。Appel式回收的具体做法是把新生代分为一块较大的Eden空间和两块较小的Survivor空间，每次分配内存只使用Eden和其中一块Survivor。发生垃圾搜集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8∶1，也即每次新生代中可用内存空间为整个新生代容量的90%（Eden的80%加上一个Survivor的10%），只有一个Survivor空间，即10%的新生代是会被“浪费”的。当然，98%的对象可被回收仅仅是“普通场景”下测得的数据，任何人都没有办法百分百保证每次回收都只有不多于10%的对象存活，因此Appel式回收还有一个充当罕见情况的“逃生门”的安全设计，当Survivor空间不足以容纳一次Minor GC之后存活的对象时，就需要依赖其他内存区域（实际上大多就是老年代）进行分配担保（Handle Promotion）。\n\n![image-20201119175401527](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119175401527.png?x-oss-process=style/radio93)\n\n 内存的分配担保好比我们去银行借款，如果我们信誉很好，在98%的情况下都能按时偿还，于是银行可能会默认我们下一次也能按时按量地偿还贷款，只需要有一个担保人能保证如果我不能还款时，可以从他的账户扣钱，那银行就认为没有什么风险了。内存的分配担保也一样，如果另外一块Survivor空间没有足够空间存放上一次新生代收集下来的存活对象，这些对象便将通过分配担保机制直接进入老年代，这对虚拟机来说就是安全的。\n\n>这里需要说明一下，HotSpot中的这种分代方式从最初就是这种布局，和IBM的研究并没有什么实际关系。这里列举IBM的研究只是为了说明这种分代布局的意义所在。\n\n###### 标记-整理算法\n\n标记-复制算法在对象存活率较高时就要进行较多的复制操作，效率将会降低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。\n\n针对老年代对象的存亡特征，1974年Edward Lueders提出了另外一种有针对性的“标记-整理”（Mark-Compact）算法，其中的标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。\n\n标记-整理算法的示意图如图所示：\n\n![image-20201119191802016](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119191802016.png?x-oss-process=style/radio93)\n\n>标记-清除算法与标记-整理算法的本质差异在于前者是一种非移动式的回收算法，而后者是移动式的。是否移动回收后的存活对象是一项优缺点并存的风险决策。\n\n如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活区域，移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作，而且这种对象移动操作必须全程暂停用户应用程序才能进行，这就更加让使用者不得不小心翼翼地权衡其弊端了，像这样的停顿被最初的虚拟机设计者形象地描述为“Stop The World”。\n\n但如果跟标记-清除算法那样完全不考虑移动和整理存活对象的话，弥散于堆中的存活对象导致的空间碎片化问题就只能依赖更为复杂的内存分配器和内存访问器来解决。譬如通过“分区空闲分配链表”来解决内存分配问题（计算机硬盘存储大文件就不要求物理连续的磁盘空间，能够在碎片化的硬盘上存储和访问就是通过硬盘分区表实现的）。内存的访问是用户程序最频繁的操作，甚至都没有之一，假如在这个环节上增加了额外的负担，势必会直接影响应用程序的吞吐量。\n\n基于以上两点，是否移动对象都存在弊端，移动则内存回收时会更复杂，不移动则内存分配时会更复杂。从垃圾收集的停顿时间来看，不移动对象停顿时间会更短，甚至可以不需要停顿，但是从整个程序的吞吐量来看，移动对象会更划算。此语境中，吞吐量的实质是赋值器（Mutator，可以理解为使用垃圾收集的用户程序，本书为便于理解，多数地方用“用户程序”或“用户线程”代替）与收集器的效率总和。即使不移动对象会使得收集器的效率提升一些，但因内存分配和访问相比垃圾收集频率要高得多，这部分的耗时增加，总吞吐量仍然是下降的。HotSpot虚拟机里面关注吞吐量的Parallel Scavenge收集器是基于标记-整理算法的，而关注延迟的CMS收集器则是基于标记-清除算法的，这也从侧面印证这点。\n\n另外，还有一种“和稀泥式”解决方案可以不在内存分配和访问上增加太大额外负担，做法是让虚拟机平时多数时间都采用标记-清除算法，暂时容忍内存碎片的存在，直到内存空间的碎片化程度已经大到影响对象分配时，再采用标记-整理算法收集一次，以获得规整的内存空间。前面提到的基于标记-清除算法的CMS收集器面临空间碎片过多时采用的就是这种处理办法。\n\n> 最新的ZGC和Shenandoah收集器使用读屏障（Read Barrier）技术实现了整理过程与用户线程的并发执行。\n>\n> 通常标记-清除算法也是需要停顿用户线程来标记、清理可回收对象的，只是停顿时间相对而言要来的短而已。\n\n##### HotSpot的算法细节实现-------根节点枚举\n\n我们以可达性分析算法中从GC Roots集合找引用链这个操作作为介绍虚拟机高效实现的第一个例子。固定可作为GC Roots的节点主要在全局性的引用（例如常量或类静态属性）与执行上下文（例如栈帧中的本地变量表）中，尽管目标明确，但查找过程要做到高效并非一件容易的事情，现在Java应用越做越庞大，光是方法区的大小就常有数百上千兆，里面的类、常量等更是恒河沙数，若要逐个检查以这里为起源的引用肯定得消耗不少时间。\n\n迄今为止，所有收集器在根节点枚举这一步骤时都是必须暂停用户线程的，因此毫无疑问根节点枚举与之前提及的整理内存碎片一样会面临相似的“Stop The World”的困扰。现在可达性分析算法耗时最长的查找引用链的过程已经可以做到与用户线程一起并发，但根节点枚举始终还是必须在一个能保障一致性的快照中才得以进行——这里“一致性”的意思是整个枚举期间执行子系统看起来就像被冻结在某个时间点上，不会出现分析过程中，根节点集合的对象引用关系还在不断变化的情况，若这点不能满足的话，分析结果准确性也就无法保证。这是导致垃圾收集过程必须停顿所有用户线程的其中一个重要原因，即使是号称停顿时间可控，或者（几乎）不会发生停顿的CMS、G1、ZGC等收集器，枚举根节点时也是必须要停顿的。\n\n由于目前主流Java虚拟机使用的都是准确式垃圾收集，所以当用户线程停顿下来之后，其实并不需要一个不漏地检查完所有执行上下文和全局的引用位置，虚拟机应当是有办法直接得到哪些地方存放着对象引用的。在HotSpot的解决方案里，是使用一组称为**OopMap**的数据结构来达到这个目的。一旦类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么类型的数据计算出来，在即时编译过程中，也会在特定的位置记录下栈里和寄存器里哪些位置是引用。这样收集器在扫描时就可以直接得知这些信息了，并不需要真正一个不漏地从方法区等GC Roots开始查找。\n\n##### HotSpot的算法细节实现-------安全点\n\n在OopMap的协助下，HotSpot可以快速准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说导致OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外存储空间，这样垃圾收集伴随而来的空间成本就会变得无法忍受的高昂。\n\n实际上HotSpot也的确没有为每条指令都生成OopMap，前面已经提到，只是在“特定的位置”记录了这些信息，这些位置被称为安全点（Safepoint）。有了安全点的设定，也就决定了用户程序执行时并非在代码指令流的任意位置都能够停顿下来开始垃圾收集，而是**强制要求必须执行到达安全点后能够暂停**。因此，安全点的选定既不能太少以至于让收集器等待时间过长，也不能太过频繁以至于过分增大运行时的内存负荷。安全点位置的选取基本上是以“是否具有让程序长时间执行的特征”为标准进行选定的，因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这样的原因而长时间执行，“长时间执行”的最明显特征就是指令序列的复用，例如方法调用、循环跳转、异常跳转等都属于指令序列复用，所以只有具有这些功能的指令才会产生安全点。\n\n对于安全点，另外一个需要考虑的问题是，如何在垃圾收集发生时让所有线程（这里其实不包括执行JNI调用的线程）都跑到最近的安全点，然后停顿下来。这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和**主动式中断**（Voluntary Suspension），抢先式中断不需要线程的执行代码主动去配合，在垃圾收集发生时，系统首先把所有用户线程全部中断，如果发现有用户线程中断的地方不在安全点上，就恢复这条线程执行，让它一会再重新中断，直到跑到安全点上。现在几乎没有虚拟机实现采用抢先式中断来暂停线程响应GC事件。\n\n而主动式中断的思想是当垃圾收集需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志位，各个线程执行过程时会不停地主动去轮询这个标志，**一旦发现中断标志为真时就自己在最近的安全点上主动中断挂起**。轮询标志的地方和安全点是重合的，另外还要加上所有创建对象和其他需要在Java堆上分配内存的地方，这是为了检查是否即将要发生垃圾收集，避免没有足够内存分配新对象。\n\n>由于轮询操作在代码中会频繁出现，这要求它必须足够高效。HotSpot使用内存保护陷阱的方式，把轮询操作精简至只有一条汇编指令的程度。\n\n##### HotSpot的算法细节实现-------安全区域\n\n使用安全点的设计似乎已经完美解决如何停顿用户线程，让虚拟机进入垃圾回收状态的问题了，但实际情况却并不一定。安全点机制保证了程序执行时，在不太长的时间内就会遇到可进入垃圾收集过程的安全点。但是，程序“不执行”的时候呢？所谓的程序不执行就是没有分配处理器时间，典型的场景便是用户**线程处于Sleep状态或者Blocked状态**，这时候线程无法响应虚拟机的中断请求，不能再走到安全的地方去中断挂起自己，虚拟机也显然不可能持续等待线程重新被激活分配处理器时间。对于这种情况，就必须引入安全区域（Safe Region）来解决。\n\n**安全区域是指能够确保在某一段代码片段之中，引用关系不会发生变化，因此，在这个区域中任意地方开始垃圾收集都是安全的。**我们也可以把安全区域看作被扩展拉伸了的安全点。\n\n当用户线程执行到安全区域里面的代码时，首先会标识自己已经进入了安全区域，那样当这段时间里虚拟机要发起垃圾收集时就不必去管这些已声明自己在安全区域内的线程了。当线程要离开安全区域时，它要检查虚拟机是否已经完成了根节点枚举（或者垃圾收集过程中其他需要暂停用户线程的阶段），如果完成了，那线程就当作没事发生过，继续执行；否则它就必须一直等待，直到收到可以离开安全区域的信号为止。\n\n##### HotSpot的算法细节实现-------记忆集与卡表\n\n上面我们再说分代收集理论的时候，提到了为解决对象跨代引用所带来的问题，垃圾收集器在新生代中建立了名为记忆集（Remembered Set）的数据结构，用以避免把整个老年代加进GC Roots扫描范围。事实上并不只是新生代、老年代之间才有跨代引用的问题，所有涉及部分区域收集（Partial GC）行为的垃圾收集器，典型的如G1、ZGC和Shenandoah收集器，都会面临相同的问题。\n\n记忆集是一种用于记录从非收集区域指向收集区域的指针集合的抽象数据结构。如果我们不考虑效率和成本的话，最简单的实现可以用非收集区域中所有含跨代引用的对象数组来实现这个数据结构。如代码：\n\n```java\nClass RememberedSet {\n\tObject[] set[OBJECT_INTERGENERATIONAL_REFERENCE_SIZE];\n}\n```\n\n这种记录全部含跨代引用对象的实现方案，无论是空间占用还是维护成本都相当高昂。而在垃圾收集的场景中，收集器只需要通过记忆集判断出某一块非收集区域是否存在有指向了收集区域的指针就可以了，并不需要了解这些跨代指针的全部细节。那设计者在实现记忆集的时候，便可以选择更为粗犷的记录粒度来节省记忆集的存储和维护成本，下面列举了一些可供选择（当然也可以选择这个范围以外的）的记录精度：\n\n1. 字长精度：每个记录精确到一个机器字长（就是处理器的寻址位数，如常见的32位或64位，这个精度决定了机器访问物理内存地址的指针长度），该字包含跨代指针。\n2. 对象精度：每个记录精确到一个对象，该对象里有字段含有跨代指针。\n3. 卡精度：每个记录精确到一块内存区域，该区域内有对象含有跨代指针。\n\n其中，**第三种“卡精度”所指的是用一种称为“卡表”**（Card Table）的方式去实现记忆集，这也是目前最常用的一种记忆集实现形式，一些资料中甚至直接把它和记忆集混为一谈。前面定义中提到记忆集其实是一种“抽象”的数据结构，抽象的意思是只定义了记忆集的行为意图，并没有定义其行为的具体实现。卡表就是记忆集的一种具体实现，它定义了记忆集的记录精度、与堆内存的映射关系等。\n\n卡表最简单的形式可以只是一个字节数组，而HotSpot虚拟机确实也是这样做的。以下这行代码是HotSpot默认的卡表标记逻辑：\n\n```java\nCARD_TABLE [this address >> 9] = 0;\n```\n\n字节数组CARD_TABLE的每一个元素都对应着其标识的内存区域中一块特定大小的内存块，这个内存块被称作“卡页”（Card Page）。一般来说，卡页大小都是以2的N次幂的字节数，通过上面代码可以看出HotSpot中使用的卡页是2的9次幂，即512字节（地址右移9位，相当于用地址除以512）。那如果卡表标识内存区域的起始地址是0x0000的话，数组CARD_TABLE的第0、1、2号元素，分别对应了地址范围为0x0000～0x01FF、0x0200～0x03FF、0x0400～0x05FF的卡页内存块，如图所示：\n\n![image-20201119194852586](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119194852586.png?x-oss-process=style/radio93)\n\n一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty），没有则标识为0。在垃圾收集发生时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，把它们加入GC Roots中一并扫描。\n\n>由Antony Hosking在1993年发表的论文《Remembered sets can also play cards》中提出。\n>\n>之所以使用byte数组而不是bit数组主要是速度上的考量，现代计算机硬件都是最小按字节寻址的，没有直接存储一个bit的指令，所以要用bit的话就不得不多消耗几条shift+mask指令。\n\n##### HotSpot的算法细节实现-------写屏障\n\n我们已经解决了如何使用记忆集来缩减GC Roots扫描范围的问题，但还没有解决卡表元素如何维护的问题，例如它们何时变脏、谁来把它们变脏等。\n\n卡表元素何时变脏的答案是很明确的——有其他分代区域中对象引用了本区域对象时，其对应的卡表元素就应该变脏，变脏时间点原则上应该发生在引用类型字段赋值的那一刻。但问题是如何变脏，即如何在对象赋值的那一刻去更新维护卡表呢？假如是解释执行的字节码，那相对好处理，虚拟机负责每条字节码指令的执行，有充分的介入空间；但在编译执行的场景中呢？经过即时编译后的代码已经是纯粹的机器指令流了，这就必须找到一个在机器码层面的手段，把维护卡表的动作放到每一个赋值操作之中。\n\n在HotSpot虚拟机里是通过写屏障（Write Barrier）技术维护卡表状态的。\n\n写屏障可以看作在虚拟机层面对“引用类型字段赋值”这个动作的AOP切面，在引用对象赋值时会产生一个环形（Around）通知，供程序执行额外的动作，也就是说赋值的前后都在写屏障的覆盖范畴内。在赋值前的部分的写屏障叫作写前屏障（Pre-Write Barrier），在赋值后的则叫作写后屏障（Post-Write Barrier）。HotSpot虚拟机的许多收集器中都有使用到写屏障，但直至G1收集器出现之前，其他收集器都只用到了写后屏障。\n\n下面这段代码是一段更新卡表状态的简化逻辑：\n\n```java\nvoid oop_field_store(oop* field, oop new_value) {\n    // 引用字段赋值操作\n    *field = new_value;\n    // 写后屏障，在这里完成卡表状态更新\n    post_write_barrier(field, new_value);\n}\n```\n\n应用写屏障后，虚拟机就会为所有赋值操作生成相应的指令，一旦收集器在写屏障中增加了更新卡表操作，无论更新的是不是老年代对新生代对象的引用，每次只要对引用进行更新，就会产生额外的开销，不过这个开销与Minor GC时扫描整个老年代的代价相比还是低得多的。\n\n除了写屏障的开销外，卡表在高并发场景下还面临着“伪共享”（False Sharing）问题。伪共享是处理并发底层细节时一种经常需要考虑的问题，现代中央处理器的缓存系统中是以缓存行（Cache Line）为单位存储的，当多线程修改互相独立的变量时，如果这些变量恰好共享同一个缓存行，就会彼此影响（写回、无效化或者同步）而导致性能降低，这就是伪共享问题。\n\n假设处理器的缓存行大小为64字节，由于一个卡表元素占1个字节，64个卡表元素将共享同一个缓存行。这64个卡表元素对应的卡页总的内存为32KB（64×512字节），也就是说如果不同线程更新的对象正好处于这32KB的内存区域内，就会导致更新卡表时正好写入同一个缓存行而影响性能。为了避免伪共享问题，一种简单的解决方案是不采用无条件的写屏障，而是先检查卡表标记，只有当该卡表元素未被标记过时才将其标记为变脏，即将卡表更新的逻辑变为以下代码所示：\n\n```java\nif (CARD_TABLE [this address >> 9] != 0)\n\tCARD_TABLE [this address >> 9] = 0;\n```\n\n在JDK 7之后，HotSpot虚拟机增加了一个新的参数-XX：+UseCondCardMark，用来决定是否开启卡表更新的条件判断。开启会增加一次额外判断的开销，但能够避免伪共享问题，两者各有性能损耗，是否打开要根据应用实际运行情况来进行测试权衡。\n\n>这个语境上的内存屏障（Memory Barrier）的目的是为了指令不因编译优化、CPU执行优化等原因而导致乱序执行，它也是可以细分为仅确保读操作顺序正确性和仅确保写操作顺序正确性的内存屏障的。\n>\n>AOP为Aspect Oriented Programming的缩写，意为面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。后面提到的“环形通知”也是AOP中的概念。\n\n##### HotSpot的算法细节实现-------并发的可达性分析\n\n前面我们曾经提到了当前主流编程语言的垃圾收集器基本上都是依靠可达性分析算法来判定对象是否存活的，可达性分析算法理论上要求全过程都基于一个能保障一致性的快照中才能够进行分析，这意味着必须全程冻结用户线程的运行。在根节点枚举这个步骤中，由于GC Roots相比起整个Java堆中全部的对象毕竟还算是极少数，且在各种优化技巧（如OopMap）的加持下，它带来的停顿已经是非常短暂且相对固定（不随堆容量而增长）的了。可从GC Roots再继续往下遍历对象图，这一步骤的停顿时间就必定会与Java堆容量直接成正比例关系了：堆越大，存储的对象越多，对象图结构越复杂，要标记更多对象而产生的停顿时间自然就更长，这听起来是理所当然的事情。\n\n要知道包含“标记”阶段是所有追踪式垃圾收集算法的共同特征，如果这个阶段会随着堆变大而等比例增加停顿时间，其影响就会波及几乎所有的垃圾收集器，同理可知，如果能够削减这部分停顿时间的话，那收益也将会是系统性的。\n\n想解决或者降低用户线程的停顿，就要先搞清楚为什么必须在一个能保障一致性的快照上才能进行对象图的遍历？为了能解释清楚这个问题，我们引入三色标记（Tri-color Marking）作为工具来辅助推导，把遍历对象图过程中遇到的对象，按照“是否访问过”这个条件标记成以下三种颜色：\n\n1. 白色：表示对象尚未被垃圾收集器访问过。显然在可达性分析刚刚开始的阶段，所有的对象都是白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达。\n2. 黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接（不经过灰色对象）指向某个白色对象。\n3. 灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过。\n\n关于可达性分析的扫描过程，我们不妨发挥一下想象力，把它看作对象图上一股以灰色为波峰的波纹从黑向白推进的过程，如果用户线程此时是冻结的，只有收集器线程在工作，那不会有任何问题。但如果用户线程与收集器是并发工作呢？收集器在对象图上标记颜色，同时用户线程在修改引用关系——即修改对象图的结构，这样可能出现两种后果。一种是把原本消亡的对象错误标记为存活，这不是好事，但其实是可以容忍的，只不过产生了一点逃过本次收集的浮动垃圾而已，下次收集清理掉就好。另一种是把原本存活的对象错误标记为已消亡，这就是非常致命的后果了，程序肯定会因此发生错误。\n\n下面演示了这样的致命错误具体是如何产生的：\n\n![image-20201119202121202](https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119202121202.png?x-oss-process=style/radio93)\n\nWilson于1994年在理论上证明了，当且仅当以下两个条件同时满足时，会产生“对象消失”的问题，即原本应该是黑色的对象被误标为白色：\n\n1. 赋值器插入了一条或多条从黑色对象到白色对象的新引用。\n2. 赋值器删除了全部从灰色对象到该白色对象的直接或间接引用。\n\n因此，我们要解决并发扫描时的对象消失问题，只需破坏这两个条件的任意一个即可。由此分别产生了两种解决方案：增量更新（Incremental Update）和原始快照（Snapshot At The Beginning，SATB）。\n\n增量更新要破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了。\n\n原始快照要破坏的是第二个条件，当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索。\n\n以上无论是对引用关系记录的插入还是删除，虚拟机的记录操作都是通过写屏障实现的。在HotSpot虚拟机中，增量更新和原始快照这两种解决方案都有实际应用，譬如，CMS是基于增量更新来做并发标记的，G1、Shenandoah则是用原始快照来实现。","slug":"深入理解java虚拟机（一）：内存分配策略","published":1,"updated":"2020-11-19T12:52:26.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhou44xu0034rcwohd27g4b9","content":"<h5 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h5><p>很多教科书判断对象是否存活的算法是这样的：在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；这种说法是错误的，</p>\n<p>引用计数算法（Reference Counting）虽然占用了一些额外的内存空间来进行计数，但它的原理简单，判定效率也很高，在大多数情况下它都是一个不错的算法。也有一些比较著名的应用案例，例如微软COM（Component Object Model）技术、使用ActionScript 3的FlashPlayer、Python语言以及在游戏脚本领域得到许多应用的Squirrel中都使用了引用计数算法进行内存管理。但是，在Java领域，至少主流的Java虚拟机里面都没有选用引用计数算法来管理内存，主要原因是，这个看似简单的算法有很多例外情况要考虑，必须要配合大量额外处理才能保证正确地工作，譬如单纯的引用计数就很难解决对象之间相互循环引用的问题。</p>\n<p>举个简单的例子：对象objA和objB都有字段instance，赋值令objA.instance=objB及objB.instance=objA，除此之外，这两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着对方，导致它们的引用计数都不为零，引用计数算法也就无法回收它们。所以Java虚拟机并不是通过引用计数算法来判断对象是否存活的。</p>\n<h5 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h5><p>当前主流的商用程序语言（Java、C#，上溯至前面提到的古老的Lisp）的内存管理子系统，都是通过可达性分析（Reachability Analysis）算法来判定对象是否存活的。这个算法的基本思路就是通过一系列称为“GC Roots”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain），如果某个对象到GC Roots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119170850993.png?x-oss-process=style/radio93\" alt=\"image-20201119170850993\"></p>\n<p>如图所示，对象object 5、object 6、object 7虽然互有关联，但是它们到GC Roots是不可达的，因此它们将会被判定为可回收的对象。</p>\n<h6 id=\"在Java技术体系里面，固定可作为GC-Roots的对象包括以下几种：\"><a href=\"#在Java技术体系里面，固定可作为GC-Roots的对象包括以下几种：\" class=\"headerlink\" title=\"在Java技术体系里面，固定可作为GC Roots的对象包括以下几种：\"></a>在Java技术体系里面，固定可作为GC Roots的对象包括以下几种：</h6><ol>\n<li>在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。</li>\n<li>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。</li>\n<li>在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。</li>\n<li>在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</li>\n<li>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。</li>\n<li>所有被同步锁（synchronized关键字）持有的对象。</li>\n<li>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</li>\n</ol>\n<p>除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。譬如后文将会提到的分代收集和局部回收（Partial GC），如果只针对Java堆中某一块区域发起垃圾收集时（如最典型的只针对新生代的垃圾收集），必须考虑到内存区域是虚拟机自己的实现细节（在用户视角里任何内存区域都是不可见的），更不是孤立封闭的，所以某个区域里的对象完全有可能被位于堆中其他区域的对象所引用，这时候就需要将这些关联区域的对象也一并加入GC Roots集合中去，才能保证可达性分析的正确性。</p>\n<h5 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h5><p>无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否引用链可达，判定对象是否存活都和“引用”离不开关系。在JDK1.2版之前，Java里面的引用是很传统的定义：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称该reference数据是代表某块内存、某个对象的引用。这种定义并没有什么不对，只是现在看来有些过于狭隘了，一个对象在这种定义下只有“被引用”或者“未被引用”两种状态，对于描述一些“食之无味，弃之可惜”的对象就显得无能为力。譬如我们希望能描述一类对象：当内存空间还足够时，能保留在内存之中，如果内存空间在进行垃圾收集后仍然非常紧张，那就可以抛弃这些对象——很多系统的缓存功能都符合这样的应用场景。</p>\n<p>在JDK1.2版之后，Java对引用的概念进行了扩充，将引用分为强引用（Strongly Re-ference）、软引用（Soft Reference）、弱引用（Weak Reference）和虚引用（Phantom Reference）4种，这4种引用强度依次逐渐减弱。</p>\n<ol>\n<li>强引用是最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似“Object obj=new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</li>\n<li>软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK1.2版之后提供了SoftReference类来实现软引用。</li>\n<li>弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2版之后提供了WeakReference类来实现弱引用。</li>\n<li>虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK1.2版之后提供了PhantomReference类来实现虚引用。</li>\n</ol>\n<h5 id=\"finalize\"><a href=\"#finalize\" class=\"headerlink\" title=\"finalize\"></a>finalize</h5><p>即使在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记，随后进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。假如对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。</p>\n<p>如果这个对象被判定为确有必要执行finalize()方法，那么该对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低调度优先级的Finalizer线程去执行它们的finalize()方法。这里所说的“执行”是指虚拟机会触发这个方法开始运行，但并不承诺一定会等待它运行结束。这样做的原因是，如果某个对象的finalize()方法执行缓慢，或者更极端地发生了死循环，将很可能导致F-Queue队列中的其他对象永久处于等待，甚至导致整个内存回收子系统的崩溃。finalize()方法是对象逃脱死亡命运的最后一次机会，稍后收集器将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或者对象的成员变量，那在第二次标记时它将被移出“即将回收”的集合；如果对象这时候还没有逃脱，那基本上它就真的要被回收了。</p>\n<p>下面这个例子我们可以看到一个对象的finalize()被执行，但是它仍然可以存活。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.functionTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 此代码演示了两点：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.对象可以在被GC时自我拯救。</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalizeEscapeGC</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FinalizeEscapeGC SAVE_HOOK = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">isAlive</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"yes, i am still alive;\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>{</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.finalize();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"finalize method executed!\"</span>);</span><br><span class=\"line\">        SAVE_HOOK = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>{</span><br><span class=\"line\">        SAVE_HOOK = <span class=\"keyword\">new</span> FinalizeEscapeGC();</span><br><span class=\"line\">        SAVE_HOOK = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 因为finalize方法优先级很低，暂停0.5秒，以等待它</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SAVE_HOOK != <span class=\"keyword\">null</span>) {</span><br><span class=\"line\">            SAVE_HOOK.isAlive();</span><br><span class=\"line\">        } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"no , i am dead\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finalize method executed!</span><br><span class=\"line\">yes, i am still alive;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果我们接着在main方法后面再写一遍，那它就会被回收了</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//下面这段代码与上面的完全相同，但是这次自救却失败了。</span></span><br><span class=\"line\"><span class=\"comment\">//这是因为任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临</span></span><br><span class=\"line\"><span class=\"comment\">//下一次回收，它的finalize()方法不会被再次执行，因此第二段代码的自救行动失败了。</span></span><br><span class=\"line\">SAVE_HOOK = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">System.gc();</span><br><span class=\"line\">Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (SAVE_HOOK != <span class=\"keyword\">null</span>) {</span><br><span class=\"line\">    SAVE_HOOK.isAlive();</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"no , i am dead\"</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finalize method executed!</span><br><span class=\"line\">yes, i am still alive;</span><br><span class=\"line\">no , i am dead</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>有一点需要特别说明，上面关于对象死亡时finalize()方法的描述可能带点悲情的艺术加工，我们并不鼓励大家使用这个方法来拯救对象。相反，建议大家尽量避免使用它，因为它并不能等同于C和C++语言中的析构函数，而是Java刚诞生时为了使传统C、C++程序员更容易接受Java所做出的一项妥协。它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序，如今已被官方明确声明为不推荐使用的语法。有些教材中描述它适合做“关闭外部资源”之类的清理性工作，这完全是对finalize()方法用途的一种自我安慰。finalize()能做的所有工作，使用try-finally或者其他方式都可以做得更好、更及时，所以笔者建议大家完全可以忘掉Java语言里面的这个方法。</p>\n</blockquote>\n<h5 id=\"回收方法区\"><a href=\"#回收方法区\" class=\"headerlink\" title=\"回收方法区\"></a>回收方法区</h5><p>有些人认为方法区（如HotSpot虚拟机中的元空间或者永久代）是没有垃圾收集行为的，《Java虚拟机规范》中提到过可以不要求虚拟机在方法区中实现垃圾收集，事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如JDK11时期的ZGC收集器就不支持类卸载），方法区垃圾收集的“性价比”通常也是比较低的：在Java堆中，尤其是在新生代中，对常规应用进行一次垃圾收集通常可以回收70%至99%的内存空间，相比之下，方法区回收囿于苛刻的判定条件，其区域垃圾收集的回收成果往往远低于此。</p>\n<p>方法区的垃圾收集主要回收两部分内容：<strong>废弃的常量</strong>和<strong>不再使用的类型</strong>。回收废弃常量与回收Java堆中的对象非常类似。举个常量池中字面量回收的例子，假如一个字符串“java”曾经进入常量池中，但是当前系统又没有任何一个字符串对象的值是“java”，换句话说，已经没有任何字符串对象引用常量池中的“java”常量，且虚拟机中也没有其他地方引用这个字面量。如果在这时发生内存回收，而且垃圾收集器判断确有必要的话，这个“java”常量就将会被系统清理出常量池。常量池中其他类（接口）、方法、字段的符号引用也与此类似。</p>\n<p>判定一个常量是否“废弃”还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足下面三个条件：</p>\n<ol>\n<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。</li>\n<li>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的。</li>\n<li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>\n</ol>\n<p>Java虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，HotSpot虚拟机提供了Xnoclassgc参数进行控制，还可以使用-verbose：class以及-XX：+TraceClass-Loading、-XX：+TraceClassUnLoading查看类加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，-XX：+TraceClassUnLoading参数需要FastDebug版的虚拟机支持。</p>\n<p>在大量使用反射、动态代理、CGLib等字节码框架，动态生成JSP以及OSGi这类频繁自定义类加载器的场景中，通常都需要Java虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力。</p>\n<h5 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h5><p>从如何判定对象消亡的角度出发，垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。由于引用计数式垃圾收集算法在主流Java虚拟机中均未涉及，所以我们暂不介绍，后面涉及到的算法均属于追踪式垃圾收集的范畴。</p>\n<h6 id=\"分代收集理论\"><a href=\"#分代收集理论\" class=\"headerlink\" title=\"分代收集理论\"></a>分代收集理论</h6><p>当前商业虚拟机的垃圾收集器，大多数都遵循了“分代收集”（Generational Collection）的理论进行设计，分代收集名为理论，实质是一套符合大多数程序运行实际情况的经验法则，它建立在两个分代假说之上：</p>\n<ol>\n<li>弱分代假说（Weak Generational Hypothesis）：绝大多数对象都是朝生夕灭的。</li>\n<li>强分代假说（Strong Generational Hypothesis）：熬过越多次垃圾收集过程的对象就越难以消亡。</li>\n</ol>\n<p>这两个分代假说共同奠定了多款常用的垃圾收集器的一致的设计原则：收集器应该将Java堆划分出不同的区域，然后将回收对象依据其年龄（年龄即对象熬过垃圾收集过程的次数）分配到不同的区域之中存储。显而易见，如果一个区域中大多数对象都是朝生夕灭，难以熬过垃圾收集过程的话，那么把它们集中放在一起，每次回收时只关注如何保留少量存活而不是去标记那些大量将要被回收的对象，就能以较低代价回收到大量的空间；如果剩下的都是难以消亡的对象，那把它们集中放在一块，虚拟机便可以使用较低的频率来回收这个区域，这就同时兼顾了垃圾收集的时间开销和内存的空间有效利用。</p>\n<p>在Java堆划分出不同的区域之后，垃圾收集器才可以每次只回收其中某一个或者某些部分的区域——因而才有了“Minor GC”“Major GC”“Full GC”这样的回收类型的划分；也才能够针对不同的区域安排与里面存储对象存亡特征相匹配的垃圾收集算法——因而发展出了“标记-复制算法”“标记-清除算法”“标记-整理算法”等针对性的垃圾收集算法。这里我们需要知道，这一切的出现都始于分代收集理论。</p>\n<p>把分代收集理论具体放到现在的商用Java虚拟机里，设计者一般至少会把Java堆划分为新生代（Young Generation）和老年代（Old Generation）两个区域。顾名思义，在新生代中，每次垃圾收集时都发现有大批对象死去，而每次回收后存活的少量对象，将会逐步晋升到老年代中存放。如果读者有兴趣阅读HotSpot虚拟机源码的话，会发现里面存在着一些名为“*Generation”的实现，如“DefNewGeneration”和“ParNewGeneration”等，这些就是HotSpot的“分代式垃圾收集器框架”。原本HotSpot鼓励开发者尽量在这个框架内开发新的垃圾收集器，但除了最早期的两组四款收集器之外，后来的开发者并没有继续遵循。导致此事的原因有很多，最根本的是分代收集理论仍在不断发展之中，如何实现也有许多细节可以改进，被既定的代码框架约束反而不便。其实我们只要仔细思考一下，也很容易发现分代收集并非只是简单划分一下内存区域那么容易，它至少存在一个明显的困难：对象不是孤立的，对象之间会存在跨代引用。</p>\n<p>假如要现在进行一次只局限于新生代区域内的收集（Minor GC），但新生代中的对象是完全有可能被老年代所引用的，为了找出该区域中的存活对象，不得不在固定的GC Roots之外，再额外遍历整个老年代中所有对象来确保可达性分析结果的正确性，反过来也是一样。遍历整个老年代所有对象的方案虽然理论上可行，但无疑会为内存回收带来很大的性能负担。为了解决这个问题，就需要对分代收集理论添加第三条经验法则：</p>\n<ol start=\"3\">\n<li>跨代引用假说（Intergenerational Reference Hypothesis）：跨代引用相对于同代引用来说仅占极少数。</li>\n</ol>\n<p>这其实是可根据前两条假说逻辑推理得出的隐含推论：存在互相引用关系的两个对象，是应该倾向于同时生存或者同时消亡的。举个例子，如果某个新生代对象存在跨代引用，由于老年代对象难以消亡，该引用会使得新生代对象在收集时同样得以存活，进而在年龄增长之后晋升到老年代中，这时跨代引用也随即被消除了。</p>\n<p>依据这条假说，我们就不应再为了少量的跨代引用去扫描整个老年代，也不必浪费空间专门记录每一个对象是否存在及存在哪些跨代引用，只需在新生代上建立一个全局的数据结构（该结构被称为“记忆集”，Remembered Set），这个结构把老年代划分成若干小块，标识出老年代的哪一块内存会存在跨代引用。此后当发生Minor GC时，只有包含了跨代引用的小块内存里的对象才会被加入到GC Roots进行扫描。虽然这种方法需要在对象改变引用关系（如将自己或者某个属性赋值）时维护记录数据的正确性，会增加一些运行时的开销，但比起收集时扫描整个老年代来说仍然是划算的。</p>\n<p>这里我们提到了一些垃圾收集的名词，我们整理一下</p>\n<ol>\n<li>部分收集（Partial GC）：指目标不是完整收集整个Java堆的垃圾收集，其中又分为：<ol>\n<li>新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。</li>\n<li>老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。另外请注意“Major GC”这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集。</li>\n<li>混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。</li>\n</ol>\n</li>\n<li>整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。</li>\n</ol>\n<blockquote>\n<p>值得注意的是，分代收集理论也有其缺陷，最新出现（或在实验中）的几款垃圾收集器都展现出了面向全区域收集设计的思想，或者可以支持全区域不分代的收集的工作模式。</p>\n<p>新生代（Young）、老年代（Old）是HotSpot虚拟机，也是现在业界主流的命名方式。在IBM J9虚拟机中对应称为婴儿区（Nursery）和长存区（Tenured），名字不同但其含义是一样的。</p>\n<p>通常能单独发生收集行为的只是新生代，所以这里“反过来”的情况只是理论上允许，实际上除了CMS收集器，其他都不存在只针对老年代的收集。</p>\n</blockquote>\n<h6 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h6><p>最早出现也是最基础的垃圾收集算法是“标记-清除”（Mark-Sweep）算法，在1960年由Lisp之父John McCarthy所提出。如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，也可以反过来，标记存活的对象，统一回收所有未被标记的对象。标记过程就是对象是否属于垃圾的判定过程，这在上面讲述垃圾对象标记判定算法时其实已经介绍过了。</p>\n<p>之所以说它是最基础的收集算法，是因为后续的收集算法大多都是以标记-清除算法为基础，对其缺点进行改进而得到的。它的主要缺点有两个：</p>\n<ol>\n<li>第一个是执行效率不稳定，如果Java堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低。</li>\n<li>第二个是内存空间的碎片化问题，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>\n</ol>\n<p>标记-清除算法的执行过程如图所示：</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119174808185.png?x-oss-process=style/radio93\" alt=\"image-20201119174808185\"></p>\n<h6 id=\"标记-复制算法\"><a href=\"#标记-复制算法\" class=\"headerlink\" title=\"标记-复制算法\"></a>标记-复制算法</h6><p>标记-复制算法常被简称为复制算法。为了解决标记-清除算法面对大量可回收对象时执行效率低的问题，1969年Fenichel提出了一种称为“半区复制”（Semispace Copying）的垃圾收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。如果内存中多数对象都是存活的，这种算法将会产生大量的内存间复制的开销，但对于多数对象都是可回收的情况，算法需要复制的就是占少数的存活对象，而且每次都是针对整个半区进行内存回收，分配内存时也就不用考虑有空间碎片的复杂情况，只要移动堆顶指针，按顺序分配即可。这样实现简单，运行高效，不过其缺陷也显而易见，这种复制回收算法的代价是将可用内存缩小为了原来的一半，空间浪费未免太多了一点。</p>\n<p>标记-复制算法的执行过程如图所示：</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119174918095.png?x-oss-process=style/radio93\" alt=\"image-20201119174918095\"></p>\n<p>现在的商用Java虚拟机大多都优先采用了这种收集算法去回收新生代，IBM公司曾有一项专门研究对新生代“朝生夕灭”的特点做了更量化的诠释——新生代中的对象有98%熬不过第一轮收集。因此并不需要按照1∶1的比例来划分新生代的内存空间。</p>\n<p>在1989年，Andrew Appel针对具备“朝生夕灭”特点的对象，提出了一种更优化的半区复制分代策略，现在称为“Appel式回收”。HotSpot虚拟机的Serial、ParNew等新生代收集器均采用了这种策略来设计新生代的内存布局。Appel式回收的具体做法是把新生代分为一块较大的Eden空间和两块较小的Survivor空间，每次分配内存只使用Eden和其中一块Survivor。发生垃圾搜集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8∶1，也即每次新生代中可用内存空间为整个新生代容量的90%（Eden的80%加上一个Survivor的10%），只有一个Survivor空间，即10%的新生代是会被“浪费”的。当然，98%的对象可被回收仅仅是“普通场景”下测得的数据，任何人都没有办法百分百保证每次回收都只有不多于10%的对象存活，因此Appel式回收还有一个充当罕见情况的“逃生门”的安全设计，当Survivor空间不足以容纳一次Minor GC之后存活的对象时，就需要依赖其他内存区域（实际上大多就是老年代）进行分配担保（Handle Promotion）。</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119175401527.png?x-oss-process=style/radio93\" alt=\"image-20201119175401527\"></p>\n<p> 内存的分配担保好比我们去银行借款，如果我们信誉很好，在98%的情况下都能按时偿还，于是银行可能会默认我们下一次也能按时按量地偿还贷款，只需要有一个担保人能保证如果我不能还款时，可以从他的账户扣钱，那银行就认为没有什么风险了。内存的分配担保也一样，如果另外一块Survivor空间没有足够空间存放上一次新生代收集下来的存活对象，这些对象便将通过分配担保机制直接进入老年代，这对虚拟机来说就是安全的。</p>\n<blockquote>\n<p>这里需要说明一下，HotSpot中的这种分代方式从最初就是这种布局，和IBM的研究并没有什么实际关系。这里列举IBM的研究只是为了说明这种分代布局的意义所在。</p>\n</blockquote>\n<h6 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h6><p>标记-复制算法在对象存活率较高时就要进行较多的复制操作，效率将会降低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。</p>\n<p>针对老年代对象的存亡特征，1974年Edward Lueders提出了另外一种有针对性的“标记-整理”（Mark-Compact）算法，其中的标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。</p>\n<p>标记-整理算法的示意图如图所示：</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119191802016.png?x-oss-process=style/radio93\" alt=\"image-20201119191802016\"></p>\n<blockquote>\n<p>标记-清除算法与标记-整理算法的本质差异在于前者是一种非移动式的回收算法，而后者是移动式的。是否移动回收后的存活对象是一项优缺点并存的风险决策。</p>\n</blockquote>\n<p>如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活区域，移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作，而且这种对象移动操作必须全程暂停用户应用程序才能进行，这就更加让使用者不得不小心翼翼地权衡其弊端了，像这样的停顿被最初的虚拟机设计者形象地描述为“Stop The World”。</p>\n<p>但如果跟标记-清除算法那样完全不考虑移动和整理存活对象的话，弥散于堆中的存活对象导致的空间碎片化问题就只能依赖更为复杂的内存分配器和内存访问器来解决。譬如通过“分区空闲分配链表”来解决内存分配问题（计算机硬盘存储大文件就不要求物理连续的磁盘空间，能够在碎片化的硬盘上存储和访问就是通过硬盘分区表实现的）。内存的访问是用户程序最频繁的操作，甚至都没有之一，假如在这个环节上增加了额外的负担，势必会直接影响应用程序的吞吐量。</p>\n<p>基于以上两点，是否移动对象都存在弊端，移动则内存回收时会更复杂，不移动则内存分配时会更复杂。从垃圾收集的停顿时间来看，不移动对象停顿时间会更短，甚至可以不需要停顿，但是从整个程序的吞吐量来看，移动对象会更划算。此语境中，吞吐量的实质是赋值器（Mutator，可以理解为使用垃圾收集的用户程序，本书为便于理解，多数地方用“用户程序”或“用户线程”代替）与收集器的效率总和。即使不移动对象会使得收集器的效率提升一些，但因内存分配和访问相比垃圾收集频率要高得多，这部分的耗时增加，总吞吐量仍然是下降的。HotSpot虚拟机里面关注吞吐量的Parallel Scavenge收集器是基于标记-整理算法的，而关注延迟的CMS收集器则是基于标记-清除算法的，这也从侧面印证这点。</p>\n<p>另外，还有一种“和稀泥式”解决方案可以不在内存分配和访问上增加太大额外负担，做法是让虚拟机平时多数时间都采用标记-清除算法，暂时容忍内存碎片的存在，直到内存空间的碎片化程度已经大到影响对象分配时，再采用标记-整理算法收集一次，以获得规整的内存空间。前面提到的基于标记-清除算法的CMS收集器面临空间碎片过多时采用的就是这种处理办法。</p>\n<blockquote>\n<p>最新的ZGC和Shenandoah收集器使用读屏障（Read Barrier）技术实现了整理过程与用户线程的并发执行。</p>\n<p>通常标记-清除算法也是需要停顿用户线程来标记、清理可回收对象的，只是停顿时间相对而言要来的短而已。</p>\n</blockquote>\n<h5 id=\"HotSpot的算法细节实现——-根节点枚举\"><a href=\"#HotSpot的算法细节实现——-根节点枚举\" class=\"headerlink\" title=\"HotSpot的算法细节实现——-根节点枚举\"></a>HotSpot的算法细节实现——-根节点枚举</h5><p>我们以可达性分析算法中从GC Roots集合找引用链这个操作作为介绍虚拟机高效实现的第一个例子。固定可作为GC Roots的节点主要在全局性的引用（例如常量或类静态属性）与执行上下文（例如栈帧中的本地变量表）中，尽管目标明确，但查找过程要做到高效并非一件容易的事情，现在Java应用越做越庞大，光是方法区的大小就常有数百上千兆，里面的类、常量等更是恒河沙数，若要逐个检查以这里为起源的引用肯定得消耗不少时间。</p>\n<p>迄今为止，所有收集器在根节点枚举这一步骤时都是必须暂停用户线程的，因此毫无疑问根节点枚举与之前提及的整理内存碎片一样会面临相似的“Stop The World”的困扰。现在可达性分析算法耗时最长的查找引用链的过程已经可以做到与用户线程一起并发，但根节点枚举始终还是必须在一个能保障一致性的快照中才得以进行——这里“一致性”的意思是整个枚举期间执行子系统看起来就像被冻结在某个时间点上，不会出现分析过程中，根节点集合的对象引用关系还在不断变化的情况，若这点不能满足的话，分析结果准确性也就无法保证。这是导致垃圾收集过程必须停顿所有用户线程的其中一个重要原因，即使是号称停顿时间可控，或者（几乎）不会发生停顿的CMS、G1、ZGC等收集器，枚举根节点时也是必须要停顿的。</p>\n<p>由于目前主流Java虚拟机使用的都是准确式垃圾收集，所以当用户线程停顿下来之后，其实并不需要一个不漏地检查完所有执行上下文和全局的引用位置，虚拟机应当是有办法直接得到哪些地方存放着对象引用的。在HotSpot的解决方案里，是使用一组称为<strong>OopMap</strong>的数据结构来达到这个目的。一旦类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么类型的数据计算出来，在即时编译过程中，也会在特定的位置记录下栈里和寄存器里哪些位置是引用。这样收集器在扫描时就可以直接得知这些信息了，并不需要真正一个不漏地从方法区等GC Roots开始查找。</p>\n<h5 id=\"HotSpot的算法细节实现——-安全点\"><a href=\"#HotSpot的算法细节实现——-安全点\" class=\"headerlink\" title=\"HotSpot的算法细节实现——-安全点\"></a>HotSpot的算法细节实现——-安全点</h5><p>在OopMap的协助下，HotSpot可以快速准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说导致OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外存储空间，这样垃圾收集伴随而来的空间成本就会变得无法忍受的高昂。</p>\n<p>实际上HotSpot也的确没有为每条指令都生成OopMap，前面已经提到，只是在“特定的位置”记录了这些信息，这些位置被称为安全点（Safepoint）。有了安全点的设定，也就决定了用户程序执行时并非在代码指令流的任意位置都能够停顿下来开始垃圾收集，而是<strong>强制要求必须执行到达安全点后能够暂停</strong>。因此，安全点的选定既不能太少以至于让收集器等待时间过长，也不能太过频繁以至于过分增大运行时的内存负荷。安全点位置的选取基本上是以“是否具有让程序长时间执行的特征”为标准进行选定的，因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这样的原因而长时间执行，“长时间执行”的最明显特征就是指令序列的复用，例如方法调用、循环跳转、异常跳转等都属于指令序列复用，所以只有具有这些功能的指令才会产生安全点。</p>\n<p>对于安全点，另外一个需要考虑的问题是，如何在垃圾收集发生时让所有线程（这里其实不包括执行JNI调用的线程）都跑到最近的安全点，然后停顿下来。这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和<strong>主动式中断</strong>（Voluntary Suspension），抢先式中断不需要线程的执行代码主动去配合，在垃圾收集发生时，系统首先把所有用户线程全部中断，如果发现有用户线程中断的地方不在安全点上，就恢复这条线程执行，让它一会再重新中断，直到跑到安全点上。现在几乎没有虚拟机实现采用抢先式中断来暂停线程响应GC事件。</p>\n<p>而主动式中断的思想是当垃圾收集需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志位，各个线程执行过程时会不停地主动去轮询这个标志，<strong>一旦发现中断标志为真时就自己在最近的安全点上主动中断挂起</strong>。轮询标志的地方和安全点是重合的，另外还要加上所有创建对象和其他需要在Java堆上分配内存的地方，这是为了检查是否即将要发生垃圾收集，避免没有足够内存分配新对象。</p>\n<blockquote>\n<p>由于轮询操作在代码中会频繁出现，这要求它必须足够高效。HotSpot使用内存保护陷阱的方式，把轮询操作精简至只有一条汇编指令的程度。</p>\n</blockquote>\n<h5 id=\"HotSpot的算法细节实现——-安全区域\"><a href=\"#HotSpot的算法细节实现——-安全区域\" class=\"headerlink\" title=\"HotSpot的算法细节实现——-安全区域\"></a>HotSpot的算法细节实现——-安全区域</h5><p>使用安全点的设计似乎已经完美解决如何停顿用户线程，让虚拟机进入垃圾回收状态的问题了，但实际情况却并不一定。安全点机制保证了程序执行时，在不太长的时间内就会遇到可进入垃圾收集过程的安全点。但是，程序“不执行”的时候呢？所谓的程序不执行就是没有分配处理器时间，典型的场景便是用户<strong>线程处于Sleep状态或者Blocked状态</strong>，这时候线程无法响应虚拟机的中断请求，不能再走到安全的地方去中断挂起自己，虚拟机也显然不可能持续等待线程重新被激活分配处理器时间。对于这种情况，就必须引入安全区域（Safe Region）来解决。</p>\n<p><strong>安全区域是指能够确保在某一段代码片段之中，引用关系不会发生变化，因此，在这个区域中任意地方开始垃圾收集都是安全的。</strong>我们也可以把安全区域看作被扩展拉伸了的安全点。</p>\n<p>当用户线程执行到安全区域里面的代码时，首先会标识自己已经进入了安全区域，那样当这段时间里虚拟机要发起垃圾收集时就不必去管这些已声明自己在安全区域内的线程了。当线程要离开安全区域时，它要检查虚拟机是否已经完成了根节点枚举（或者垃圾收集过程中其他需要暂停用户线程的阶段），如果完成了，那线程就当作没事发生过，继续执行；否则它就必须一直等待，直到收到可以离开安全区域的信号为止。</p>\n<h5 id=\"HotSpot的算法细节实现——-记忆集与卡表\"><a href=\"#HotSpot的算法细节实现——-记忆集与卡表\" class=\"headerlink\" title=\"HotSpot的算法细节实现——-记忆集与卡表\"></a>HotSpot的算法细节实现——-记忆集与卡表</h5><p>上面我们再说分代收集理论的时候，提到了为解决对象跨代引用所带来的问题，垃圾收集器在新生代中建立了名为记忆集（Remembered Set）的数据结构，用以避免把整个老年代加进GC Roots扫描范围。事实上并不只是新生代、老年代之间才有跨代引用的问题，所有涉及部分区域收集（Partial GC）行为的垃圾收集器，典型的如G1、ZGC和Shenandoah收集器，都会面临相同的问题。</p>\n<p>记忆集是一种用于记录从非收集区域指向收集区域的指针集合的抽象数据结构。如果我们不考虑效率和成本的话，最简单的实现可以用非收集区域中所有含跨代引用的对象数组来实现这个数据结构。如代码：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class RememberedSet {</span><br><span class=\"line\">\tObject[] set[OBJECT_INTERGENERATIONAL_REFERENCE_SIZE];</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这种记录全部含跨代引用对象的实现方案，无论是空间占用还是维护成本都相当高昂。而在垃圾收集的场景中，收集器只需要通过记忆集判断出某一块非收集区域是否存在有指向了收集区域的指针就可以了，并不需要了解这些跨代指针的全部细节。那设计者在实现记忆集的时候，便可以选择更为粗犷的记录粒度来节省记忆集的存储和维护成本，下面列举了一些可供选择（当然也可以选择这个范围以外的）的记录精度：</p>\n<ol>\n<li>字长精度：每个记录精确到一个机器字长（就是处理器的寻址位数，如常见的32位或64位，这个精度决定了机器访问物理内存地址的指针长度），该字包含跨代指针。</li>\n<li>对象精度：每个记录精确到一个对象，该对象里有字段含有跨代指针。</li>\n<li>卡精度：每个记录精确到一块内存区域，该区域内有对象含有跨代指针。</li>\n</ol>\n<p>其中，<strong>第三种“卡精度”所指的是用一种称为“卡表”</strong>（Card Table）的方式去实现记忆集，这也是目前最常用的一种记忆集实现形式，一些资料中甚至直接把它和记忆集混为一谈。前面定义中提到记忆集其实是一种“抽象”的数据结构，抽象的意思是只定义了记忆集的行为意图，并没有定义其行为的具体实现。卡表就是记忆集的一种具体实现，它定义了记忆集的记录精度、与堆内存的映射关系等。</p>\n<p>卡表最简单的形式可以只是一个字节数组，而HotSpot虚拟机确实也是这样做的。以下这行代码是HotSpot默认的卡表标记逻辑：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CARD_TABLE [<span class=\"keyword\">this</span> address &gt;&gt; <span class=\"number\">9</span>] = <span class=\"number\">0</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>字节数组CARD_TABLE的每一个元素都对应着其标识的内存区域中一块特定大小的内存块，这个内存块被称作“卡页”（Card Page）。一般来说，卡页大小都是以2的N次幂的字节数，通过上面代码可以看出HotSpot中使用的卡页是2的9次幂，即512字节（地址右移9位，相当于用地址除以512）。那如果卡表标识内存区域的起始地址是0x0000的话，数组CARD_TABLE的第0、1、2号元素，分别对应了地址范围为0x0000～0x01FF、0x0200～0x03FF、0x0400～0x05FF的卡页内存块，如图所示：</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119194852586.png?x-oss-process=style/radio93\" alt=\"image-20201119194852586\"></p>\n<p>一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty），没有则标识为0。在垃圾收集发生时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，把它们加入GC Roots中一并扫描。</p>\n<blockquote>\n<p>由Antony Hosking在1993年发表的论文《Remembered sets can also play cards》中提出。</p>\n<p>之所以使用byte数组而不是bit数组主要是速度上的考量，现代计算机硬件都是最小按字节寻址的，没有直接存储一个bit的指令，所以要用bit的话就不得不多消耗几条shift+mask指令。</p>\n</blockquote>\n<h5 id=\"HotSpot的算法细节实现——-写屏障\"><a href=\"#HotSpot的算法细节实现——-写屏障\" class=\"headerlink\" title=\"HotSpot的算法细节实现——-写屏障\"></a>HotSpot的算法细节实现——-写屏障</h5><p>我们已经解决了如何使用记忆集来缩减GC Roots扫描范围的问题，但还没有解决卡表元素如何维护的问题，例如它们何时变脏、谁来把它们变脏等。</p>\n<p>卡表元素何时变脏的答案是很明确的——有其他分代区域中对象引用了本区域对象时，其对应的卡表元素就应该变脏，变脏时间点原则上应该发生在引用类型字段赋值的那一刻。但问题是如何变脏，即如何在对象赋值的那一刻去更新维护卡表呢？假如是解释执行的字节码，那相对好处理，虚拟机负责每条字节码指令的执行，有充分的介入空间；但在编译执行的场景中呢？经过即时编译后的代码已经是纯粹的机器指令流了，这就必须找到一个在机器码层面的手段，把维护卡表的动作放到每一个赋值操作之中。</p>\n<p>在HotSpot虚拟机里是通过写屏障（Write Barrier）技术维护卡表状态的。</p>\n<p>写屏障可以看作在虚拟机层面对“引用类型字段赋值”这个动作的AOP切面，在引用对象赋值时会产生一个环形（Around）通知，供程序执行额外的动作，也就是说赋值的前后都在写屏障的覆盖范畴内。在赋值前的部分的写屏障叫作写前屏障（Pre-Write Barrier），在赋值后的则叫作写后屏障（Post-Write Barrier）。HotSpot虚拟机的许多收集器中都有使用到写屏障，但直至G1收集器出现之前，其他收集器都只用到了写后屏障。</p>\n<p>下面这段代码是一段更新卡表状态的简化逻辑：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">oop_field_store</span><span class=\"params\">(oop* field, oop new_value)</span> </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 引用字段赋值操作</span></span><br><span class=\"line\">    *field = new_value;</span><br><span class=\"line\">    <span class=\"comment\">// 写后屏障，在这里完成卡表状态更新</span></span><br><span class=\"line\">    post_write_barrier(field, new_value);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>应用写屏障后，虚拟机就会为所有赋值操作生成相应的指令，一旦收集器在写屏障中增加了更新卡表操作，无论更新的是不是老年代对新生代对象的引用，每次只要对引用进行更新，就会产生额外的开销，不过这个开销与Minor GC时扫描整个老年代的代价相比还是低得多的。</p>\n<p>除了写屏障的开销外，卡表在高并发场景下还面临着“伪共享”（False Sharing）问题。伪共享是处理并发底层细节时一种经常需要考虑的问题，现代中央处理器的缓存系统中是以缓存行（Cache Line）为单位存储的，当多线程修改互相独立的变量时，如果这些变量恰好共享同一个缓存行，就会彼此影响（写回、无效化或者同步）而导致性能降低，这就是伪共享问题。</p>\n<p>假设处理器的缓存行大小为64字节，由于一个卡表元素占1个字节，64个卡表元素将共享同一个缓存行。这64个卡表元素对应的卡页总的内存为32KB（64×512字节），也就是说如果不同线程更新的对象正好处于这32KB的内存区域内，就会导致更新卡表时正好写入同一个缓存行而影响性能。为了避免伪共享问题，一种简单的解决方案是不采用无条件的写屏障，而是先检查卡表标记，只有当该卡表元素未被标记过时才将其标记为变脏，即将卡表更新的逻辑变为以下代码所示：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (CARD_TABLE [<span class=\"keyword\">this</span> address &gt;&gt; <span class=\"number\">9</span>] != <span class=\"number\">0</span>)</span><br><span class=\"line\">\tCARD_TABLE [<span class=\"keyword\">this</span> address &gt;&gt; <span class=\"number\">9</span>] = <span class=\"number\">0</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在JDK 7之后，HotSpot虚拟机增加了一个新的参数-XX：+UseCondCardMark，用来决定是否开启卡表更新的条件判断。开启会增加一次额外判断的开销，但能够避免伪共享问题，两者各有性能损耗，是否打开要根据应用实际运行情况来进行测试权衡。</p>\n<blockquote>\n<p>这个语境上的内存屏障（Memory Barrier）的目的是为了指令不因编译优化、CPU执行优化等原因而导致乱序执行，它也是可以细分为仅确保读操作顺序正确性和仅确保写操作顺序正确性的内存屏障的。</p>\n<p>AOP为Aspect Oriented Programming的缩写，意为面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。后面提到的“环形通知”也是AOP中的概念。</p>\n</blockquote>\n<h5 id=\"HotSpot的算法细节实现——-并发的可达性分析\"><a href=\"#HotSpot的算法细节实现——-并发的可达性分析\" class=\"headerlink\" title=\"HotSpot的算法细节实现——-并发的可达性分析\"></a>HotSpot的算法细节实现——-并发的可达性分析</h5><p>前面我们曾经提到了当前主流编程语言的垃圾收集器基本上都是依靠可达性分析算法来判定对象是否存活的，可达性分析算法理论上要求全过程都基于一个能保障一致性的快照中才能够进行分析，这意味着必须全程冻结用户线程的运行。在根节点枚举这个步骤中，由于GC Roots相比起整个Java堆中全部的对象毕竟还算是极少数，且在各种优化技巧（如OopMap）的加持下，它带来的停顿已经是非常短暂且相对固定（不随堆容量而增长）的了。可从GC Roots再继续往下遍历对象图，这一步骤的停顿时间就必定会与Java堆容量直接成正比例关系了：堆越大，存储的对象越多，对象图结构越复杂，要标记更多对象而产生的停顿时间自然就更长，这听起来是理所当然的事情。</p>\n<p>要知道包含“标记”阶段是所有追踪式垃圾收集算法的共同特征，如果这个阶段会随着堆变大而等比例增加停顿时间，其影响就会波及几乎所有的垃圾收集器，同理可知，如果能够削减这部分停顿时间的话，那收益也将会是系统性的。</p>\n<p>想解决或者降低用户线程的停顿，就要先搞清楚为什么必须在一个能保障一致性的快照上才能进行对象图的遍历？为了能解释清楚这个问题，我们引入三色标记（Tri-color Marking）作为工具来辅助推导，把遍历对象图过程中遇到的对象，按照“是否访问过”这个条件标记成以下三种颜色：</p>\n<ol>\n<li>白色：表示对象尚未被垃圾收集器访问过。显然在可达性分析刚刚开始的阶段，所有的对象都是白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达。</li>\n<li>黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接（不经过灰色对象）指向某个白色对象。</li>\n<li>灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过。</li>\n</ol>\n<p>关于可达性分析的扫描过程，我们不妨发挥一下想象力，把它看作对象图上一股以灰色为波峰的波纹从黑向白推进的过程，如果用户线程此时是冻结的，只有收集器线程在工作，那不会有任何问题。但如果用户线程与收集器是并发工作呢？收集器在对象图上标记颜色，同时用户线程在修改引用关系——即修改对象图的结构，这样可能出现两种后果。一种是把原本消亡的对象错误标记为存活，这不是好事，但其实是可以容忍的，只不过产生了一点逃过本次收集的浮动垃圾而已，下次收集清理掉就好。另一种是把原本存活的对象错误标记为已消亡，这就是非常致命的后果了，程序肯定会因此发生错误。</p>\n<p>下面演示了这样的致命错误具体是如何产生的：</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119202121202.png?x-oss-process=style/radio93\" alt=\"image-20201119202121202\"></p>\n<p>Wilson于1994年在理论上证明了，当且仅当以下两个条件同时满足时，会产生“对象消失”的问题，即原本应该是黑色的对象被误标为白色：</p>\n<ol>\n<li>赋值器插入了一条或多条从黑色对象到白色对象的新引用。</li>\n<li>赋值器删除了全部从灰色对象到该白色对象的直接或间接引用。</li>\n</ol>\n<p>因此，我们要解决并发扫描时的对象消失问题，只需破坏这两个条件的任意一个即可。由此分别产生了两种解决方案：增量更新（Incremental Update）和原始快照（Snapshot At The Beginning，SATB）。</p>\n<p>增量更新要破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了。</p>\n<p>原始快照要破坏的是第二个条件，当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索。</p>\n<p>以上无论是对引用关系记录的插入还是删除，虚拟机的记录操作都是通过写屏障实现的。在HotSpot虚拟机中，增量更新和原始快照这两种解决方案都有实际应用，譬如，CMS是基于增量更新来做并发标记的，G1、Shenandoah则是用原始快照来实现。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h5 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h5><p>很多教科书判断对象是否存活的算法是这样的：在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；这种说法是错误的，</p>\n<p>引用计数算法（Reference Counting）虽然占用了一些额外的内存空间来进行计数，但它的原理简单，判定效率也很高，在大多数情况下它都是一个不错的算法。也有一些比较著名的应用案例，例如微软COM（Component Object Model）技术、使用ActionScript 3的FlashPlayer、Python语言以及在游戏脚本领域得到许多应用的Squirrel中都使用了引用计数算法进行内存管理。但是，在Java领域，至少主流的Java虚拟机里面都没有选用引用计数算法来管理内存，主要原因是，这个看似简单的算法有很多例外情况要考虑，必须要配合大量额外处理才能保证正确地工作，譬如单纯的引用计数就很难解决对象之间相互循环引用的问题。</p>\n<p>举个简单的例子：对象objA和objB都有字段instance，赋值令objA.instance=objB及objB.instance=objA，除此之外，这两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着对方，导致它们的引用计数都不为零，引用计数算法也就无法回收它们。所以Java虚拟机并不是通过引用计数算法来判断对象是否存活的。</p>\n<h5 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h5><p>当前主流的商用程序语言（Java、C#，上溯至前面提到的古老的Lisp）的内存管理子系统，都是通过可达性分析（Reachability Analysis）算法来判定对象是否存活的。这个算法的基本思路就是通过一系列称为“GC Roots”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain），如果某个对象到GC Roots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119170850993.png?x-oss-process=style/radio93\" alt=\"image-20201119170850993\"></p>\n<p>如图所示，对象object 5、object 6、object 7虽然互有关联，但是它们到GC Roots是不可达的，因此它们将会被判定为可回收的对象。</p>\n<h6 id=\"在Java技术体系里面，固定可作为GC-Roots的对象包括以下几种：\"><a href=\"#在Java技术体系里面，固定可作为GC-Roots的对象包括以下几种：\" class=\"headerlink\" title=\"在Java技术体系里面，固定可作为GC Roots的对象包括以下几种：\"></a>在Java技术体系里面，固定可作为GC Roots的对象包括以下几种：</h6><ol>\n<li>在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。</li>\n<li>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。</li>\n<li>在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。</li>\n<li>在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</li>\n<li>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。</li>\n<li>所有被同步锁（synchronized关键字）持有的对象。</li>\n<li>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</li>\n</ol>\n<p>除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。譬如后文将会提到的分代收集和局部回收（Partial GC），如果只针对Java堆中某一块区域发起垃圾收集时（如最典型的只针对新生代的垃圾收集），必须考虑到内存区域是虚拟机自己的实现细节（在用户视角里任何内存区域都是不可见的），更不是孤立封闭的，所以某个区域里的对象完全有可能被位于堆中其他区域的对象所引用，这时候就需要将这些关联区域的对象也一并加入GC Roots集合中去，才能保证可达性分析的正确性。</p>\n<h5 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h5><p>无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否引用链可达，判定对象是否存活都和“引用”离不开关系。在JDK1.2版之前，Java里面的引用是很传统的定义：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称该reference数据是代表某块内存、某个对象的引用。这种定义并没有什么不对，只是现在看来有些过于狭隘了，一个对象在这种定义下只有“被引用”或者“未被引用”两种状态，对于描述一些“食之无味，弃之可惜”的对象就显得无能为力。譬如我们希望能描述一类对象：当内存空间还足够时，能保留在内存之中，如果内存空间在进行垃圾收集后仍然非常紧张，那就可以抛弃这些对象——很多系统的缓存功能都符合这样的应用场景。</p>\n<p>在JDK1.2版之后，Java对引用的概念进行了扩充，将引用分为强引用（Strongly Re-ference）、软引用（Soft Reference）、弱引用（Weak Reference）和虚引用（Phantom Reference）4种，这4种引用强度依次逐渐减弱。</p>\n<ol>\n<li>强引用是最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似“Object obj=new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</li>\n<li>软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK1.2版之后提供了SoftReference类来实现软引用。</li>\n<li>弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2版之后提供了WeakReference类来实现弱引用。</li>\n<li>虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK1.2版之后提供了PhantomReference类来实现虚引用。</li>\n</ol>\n<h5 id=\"finalize\"><a href=\"#finalize\" class=\"headerlink\" title=\"finalize\"></a>finalize</h5><p>即使在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记，随后进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。假如对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。</p>\n<p>如果这个对象被判定为确有必要执行finalize()方法，那么该对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低调度优先级的Finalizer线程去执行它们的finalize()方法。这里所说的“执行”是指虚拟机会触发这个方法开始运行，但并不承诺一定会等待它运行结束。这样做的原因是，如果某个对象的finalize()方法执行缓慢，或者更极端地发生了死循环，将很可能导致F-Queue队列中的其他对象永久处于等待，甚至导致整个内存回收子系统的崩溃。finalize()方法是对象逃脱死亡命运的最后一次机会，稍后收集器将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或者对象的成员变量，那在第二次标记时它将被移出“即将回收”的集合；如果对象这时候还没有逃脱，那基本上它就真的要被回收了。</p>\n<p>下面这个例子我们可以看到一个对象的finalize()被执行，但是它仍然可以存活。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> effectiveJava.functionTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 此代码演示了两点：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.对象可以在被GC时自我拯救。</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalizeEscapeGC</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FinalizeEscapeGC SAVE_HOOK = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">isAlive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;yes, i am still alive;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.finalize();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;finalize method executed!&quot;</span>);</span><br><span class=\"line\">        SAVE_HOOK = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        SAVE_HOOK = <span class=\"keyword\">new</span> FinalizeEscapeGC();</span><br><span class=\"line\">        SAVE_HOOK = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 因为finalize方法优先级很低，暂停0.5秒，以等待它</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SAVE_HOOK != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            SAVE_HOOK.isAlive();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;no , i am dead&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finalize method executed!</span><br><span class=\"line\">yes, i am still alive;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们接着在main方法后面再写一遍，那它就会被回收了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//下面这段代码与上面的完全相同，但是这次自救却失败了。</span></span><br><span class=\"line\"><span class=\"comment\">//这是因为任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临</span></span><br><span class=\"line\"><span class=\"comment\">//下一次回收，它的finalize()方法不会被再次执行，因此第二段代码的自救行动失败了。</span></span><br><span class=\"line\">SAVE_HOOK = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">System.gc();</span><br><span class=\"line\">Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (SAVE_HOOK != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    SAVE_HOOK.isAlive();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;no , i am dead&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finalize method executed!</span><br><span class=\"line\">yes, i am still alive;</span><br><span class=\"line\">no , i am dead</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>有一点需要特别说明，上面关于对象死亡时finalize()方法的描述可能带点悲情的艺术加工，我们并不鼓励大家使用这个方法来拯救对象。相反，建议大家尽量避免使用它，因为它并不能等同于C和C++语言中的析构函数，而是Java刚诞生时为了使传统C、C++程序员更容易接受Java所做出的一项妥协。它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序，如今已被官方明确声明为不推荐使用的语法。有些教材中描述它适合做“关闭外部资源”之类的清理性工作，这完全是对finalize()方法用途的一种自我安慰。finalize()能做的所有工作，使用try-finally或者其他方式都可以做得更好、更及时，所以笔者建议大家完全可以忘掉Java语言里面的这个方法。</p>\n</blockquote>\n<h5 id=\"回收方法区\"><a href=\"#回收方法区\" class=\"headerlink\" title=\"回收方法区\"></a>回收方法区</h5><p>有些人认为方法区（如HotSpot虚拟机中的元空间或者永久代）是没有垃圾收集行为的，《Java虚拟机规范》中提到过可以不要求虚拟机在方法区中实现垃圾收集，事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如JDK11时期的ZGC收集器就不支持类卸载），方法区垃圾收集的“性价比”通常也是比较低的：在Java堆中，尤其是在新生代中，对常规应用进行一次垃圾收集通常可以回收70%至99%的内存空间，相比之下，方法区回收囿于苛刻的判定条件，其区域垃圾收集的回收成果往往远低于此。</p>\n<p>方法区的垃圾收集主要回收两部分内容：<strong>废弃的常量</strong>和<strong>不再使用的类型</strong>。回收废弃常量与回收Java堆中的对象非常类似。举个常量池中字面量回收的例子，假如一个字符串“java”曾经进入常量池中，但是当前系统又没有任何一个字符串对象的值是“java”，换句话说，已经没有任何字符串对象引用常量池中的“java”常量，且虚拟机中也没有其他地方引用这个字面量。如果在这时发生内存回收，而且垃圾收集器判断确有必要的话，这个“java”常量就将会被系统清理出常量池。常量池中其他类（接口）、方法、字段的符号引用也与此类似。</p>\n<p>判定一个常量是否“废弃”还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足下面三个条件：</p>\n<ol>\n<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。</li>\n<li>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的。</li>\n<li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>\n</ol>\n<p>Java虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，HotSpot虚拟机提供了Xnoclassgc参数进行控制，还可以使用-verbose：class以及-XX：+TraceClass-Loading、-XX：+TraceClassUnLoading查看类加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，-XX：+TraceClassUnLoading参数需要FastDebug版的虚拟机支持。</p>\n<p>在大量使用反射、动态代理、CGLib等字节码框架，动态生成JSP以及OSGi这类频繁自定义类加载器的场景中，通常都需要Java虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力。</p>\n<h5 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h5><p>从如何判定对象消亡的角度出发，垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。由于引用计数式垃圾收集算法在主流Java虚拟机中均未涉及，所以我们暂不介绍，后面涉及到的算法均属于追踪式垃圾收集的范畴。</p>\n<h6 id=\"分代收集理论\"><a href=\"#分代收集理论\" class=\"headerlink\" title=\"分代收集理论\"></a>分代收集理论</h6><p>当前商业虚拟机的垃圾收集器，大多数都遵循了“分代收集”（Generational Collection）的理论进行设计，分代收集名为理论，实质是一套符合大多数程序运行实际情况的经验法则，它建立在两个分代假说之上：</p>\n<ol>\n<li>弱分代假说（Weak Generational Hypothesis）：绝大多数对象都是朝生夕灭的。</li>\n<li>强分代假说（Strong Generational Hypothesis）：熬过越多次垃圾收集过程的对象就越难以消亡。</li>\n</ol>\n<p>这两个分代假说共同奠定了多款常用的垃圾收集器的一致的设计原则：收集器应该将Java堆划分出不同的区域，然后将回收对象依据其年龄（年龄即对象熬过垃圾收集过程的次数）分配到不同的区域之中存储。显而易见，如果一个区域中大多数对象都是朝生夕灭，难以熬过垃圾收集过程的话，那么把它们集中放在一起，每次回收时只关注如何保留少量存活而不是去标记那些大量将要被回收的对象，就能以较低代价回收到大量的空间；如果剩下的都是难以消亡的对象，那把它们集中放在一块，虚拟机便可以使用较低的频率来回收这个区域，这就同时兼顾了垃圾收集的时间开销和内存的空间有效利用。</p>\n<p>在Java堆划分出不同的区域之后，垃圾收集器才可以每次只回收其中某一个或者某些部分的区域——因而才有了“Minor GC”“Major GC”“Full GC”这样的回收类型的划分；也才能够针对不同的区域安排与里面存储对象存亡特征相匹配的垃圾收集算法——因而发展出了“标记-复制算法”“标记-清除算法”“标记-整理算法”等针对性的垃圾收集算法。这里我们需要知道，这一切的出现都始于分代收集理论。</p>\n<p>把分代收集理论具体放到现在的商用Java虚拟机里，设计者一般至少会把Java堆划分为新生代（Young Generation）和老年代（Old Generation）两个区域。顾名思义，在新生代中，每次垃圾收集时都发现有大批对象死去，而每次回收后存活的少量对象，将会逐步晋升到老年代中存放。如果读者有兴趣阅读HotSpot虚拟机源码的话，会发现里面存在着一些名为“*Generation”的实现，如“DefNewGeneration”和“ParNewGeneration”等，这些就是HotSpot的“分代式垃圾收集器框架”。原本HotSpot鼓励开发者尽量在这个框架内开发新的垃圾收集器，但除了最早期的两组四款收集器之外，后来的开发者并没有继续遵循。导致此事的原因有很多，最根本的是分代收集理论仍在不断发展之中，如何实现也有许多细节可以改进，被既定的代码框架约束反而不便。其实我们只要仔细思考一下，也很容易发现分代收集并非只是简单划分一下内存区域那么容易，它至少存在一个明显的困难：对象不是孤立的，对象之间会存在跨代引用。</p>\n<p>假如要现在进行一次只局限于新生代区域内的收集（Minor GC），但新生代中的对象是完全有可能被老年代所引用的，为了找出该区域中的存活对象，不得不在固定的GC Roots之外，再额外遍历整个老年代中所有对象来确保可达性分析结果的正确性，反过来也是一样。遍历整个老年代所有对象的方案虽然理论上可行，但无疑会为内存回收带来很大的性能负担。为了解决这个问题，就需要对分代收集理论添加第三条经验法则：</p>\n<ol start=\"3\">\n<li>跨代引用假说（Intergenerational Reference Hypothesis）：跨代引用相对于同代引用来说仅占极少数。</li>\n</ol>\n<p>这其实是可根据前两条假说逻辑推理得出的隐含推论：存在互相引用关系的两个对象，是应该倾向于同时生存或者同时消亡的。举个例子，如果某个新生代对象存在跨代引用，由于老年代对象难以消亡，该引用会使得新生代对象在收集时同样得以存活，进而在年龄增长之后晋升到老年代中，这时跨代引用也随即被消除了。</p>\n<p>依据这条假说，我们就不应再为了少量的跨代引用去扫描整个老年代，也不必浪费空间专门记录每一个对象是否存在及存在哪些跨代引用，只需在新生代上建立一个全局的数据结构（该结构被称为“记忆集”，Remembered Set），这个结构把老年代划分成若干小块，标识出老年代的哪一块内存会存在跨代引用。此后当发生Minor GC时，只有包含了跨代引用的小块内存里的对象才会被加入到GC Roots进行扫描。虽然这种方法需要在对象改变引用关系（如将自己或者某个属性赋值）时维护记录数据的正确性，会增加一些运行时的开销，但比起收集时扫描整个老年代来说仍然是划算的。</p>\n<p>这里我们提到了一些垃圾收集的名词，我们整理一下</p>\n<ol>\n<li>部分收集（Partial GC）：指目标不是完整收集整个Java堆的垃圾收集，其中又分为：<ol>\n<li>新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。</li>\n<li>老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。另外请注意“Major GC”这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集。</li>\n<li>混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。</li>\n</ol>\n</li>\n<li>整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。</li>\n</ol>\n<blockquote>\n<p>值得注意的是，分代收集理论也有其缺陷，最新出现（或在实验中）的几款垃圾收集器都展现出了面向全区域收集设计的思想，或者可以支持全区域不分代的收集的工作模式。</p>\n<p>新生代（Young）、老年代（Old）是HotSpot虚拟机，也是现在业界主流的命名方式。在IBM J9虚拟机中对应称为婴儿区（Nursery）和长存区（Tenured），名字不同但其含义是一样的。</p>\n<p>通常能单独发生收集行为的只是新生代，所以这里“反过来”的情况只是理论上允许，实际上除了CMS收集器，其他都不存在只针对老年代的收集。</p>\n</blockquote>\n<h6 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h6><p>最早出现也是最基础的垃圾收集算法是“标记-清除”（Mark-Sweep）算法，在1960年由Lisp之父John McCarthy所提出。如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，也可以反过来，标记存活的对象，统一回收所有未被标记的对象。标记过程就是对象是否属于垃圾的判定过程，这在上面讲述垃圾对象标记判定算法时其实已经介绍过了。</p>\n<p>之所以说它是最基础的收集算法，是因为后续的收集算法大多都是以标记-清除算法为基础，对其缺点进行改进而得到的。它的主要缺点有两个：</p>\n<ol>\n<li>第一个是执行效率不稳定，如果Java堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低。</li>\n<li>第二个是内存空间的碎片化问题，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>\n</ol>\n<p>标记-清除算法的执行过程如图所示：</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119174808185.png?x-oss-process=style/radio93\" alt=\"image-20201119174808185\"></p>\n<h6 id=\"标记-复制算法\"><a href=\"#标记-复制算法\" class=\"headerlink\" title=\"标记-复制算法\"></a>标记-复制算法</h6><p>标记-复制算法常被简称为复制算法。为了解决标记-清除算法面对大量可回收对象时执行效率低的问题，1969年Fenichel提出了一种称为“半区复制”（Semispace Copying）的垃圾收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。如果内存中多数对象都是存活的，这种算法将会产生大量的内存间复制的开销，但对于多数对象都是可回收的情况，算法需要复制的就是占少数的存活对象，而且每次都是针对整个半区进行内存回收，分配内存时也就不用考虑有空间碎片的复杂情况，只要移动堆顶指针，按顺序分配即可。这样实现简单，运行高效，不过其缺陷也显而易见，这种复制回收算法的代价是将可用内存缩小为了原来的一半，空间浪费未免太多了一点。</p>\n<p>标记-复制算法的执行过程如图所示：</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119174918095.png?x-oss-process=style/radio93\" alt=\"image-20201119174918095\"></p>\n<p>现在的商用Java虚拟机大多都优先采用了这种收集算法去回收新生代，IBM公司曾有一项专门研究对新生代“朝生夕灭”的特点做了更量化的诠释——新生代中的对象有98%熬不过第一轮收集。因此并不需要按照1∶1的比例来划分新生代的内存空间。</p>\n<p>在1989年，Andrew Appel针对具备“朝生夕灭”特点的对象，提出了一种更优化的半区复制分代策略，现在称为“Appel式回收”。HotSpot虚拟机的Serial、ParNew等新生代收集器均采用了这种策略来设计新生代的内存布局。Appel式回收的具体做法是把新生代分为一块较大的Eden空间和两块较小的Survivor空间，每次分配内存只使用Eden和其中一块Survivor。发生垃圾搜集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8∶1，也即每次新生代中可用内存空间为整个新生代容量的90%（Eden的80%加上一个Survivor的10%），只有一个Survivor空间，即10%的新生代是会被“浪费”的。当然，98%的对象可被回收仅仅是“普通场景”下测得的数据，任何人都没有办法百分百保证每次回收都只有不多于10%的对象存活，因此Appel式回收还有一个充当罕见情况的“逃生门”的安全设计，当Survivor空间不足以容纳一次Minor GC之后存活的对象时，就需要依赖其他内存区域（实际上大多就是老年代）进行分配担保（Handle Promotion）。</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119175401527.png?x-oss-process=style/radio93\" alt=\"image-20201119175401527\"></p>\n<p> 内存的分配担保好比我们去银行借款，如果我们信誉很好，在98%的情况下都能按时偿还，于是银行可能会默认我们下一次也能按时按量地偿还贷款，只需要有一个担保人能保证如果我不能还款时，可以从他的账户扣钱，那银行就认为没有什么风险了。内存的分配担保也一样，如果另外一块Survivor空间没有足够空间存放上一次新生代收集下来的存活对象，这些对象便将通过分配担保机制直接进入老年代，这对虚拟机来说就是安全的。</p>\n<blockquote>\n<p>这里需要说明一下，HotSpot中的这种分代方式从最初就是这种布局，和IBM的研究并没有什么实际关系。这里列举IBM的研究只是为了说明这种分代布局的意义所在。</p>\n</blockquote>\n<h6 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h6><p>标记-复制算法在对象存活率较高时就要进行较多的复制操作，效率将会降低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。</p>\n<p>针对老年代对象的存亡特征，1974年Edward Lueders提出了另外一种有针对性的“标记-整理”（Mark-Compact）算法，其中的标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。</p>\n<p>标记-整理算法的示意图如图所示：</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119191802016.png?x-oss-process=style/radio93\" alt=\"image-20201119191802016\"></p>\n<blockquote>\n<p>标记-清除算法与标记-整理算法的本质差异在于前者是一种非移动式的回收算法，而后者是移动式的。是否移动回收后的存活对象是一项优缺点并存的风险决策。</p>\n</blockquote>\n<p>如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活区域，移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作，而且这种对象移动操作必须全程暂停用户应用程序才能进行，这就更加让使用者不得不小心翼翼地权衡其弊端了，像这样的停顿被最初的虚拟机设计者形象地描述为“Stop The World”。</p>\n<p>但如果跟标记-清除算法那样完全不考虑移动和整理存活对象的话，弥散于堆中的存活对象导致的空间碎片化问题就只能依赖更为复杂的内存分配器和内存访问器来解决。譬如通过“分区空闲分配链表”来解决内存分配问题（计算机硬盘存储大文件就不要求物理连续的磁盘空间，能够在碎片化的硬盘上存储和访问就是通过硬盘分区表实现的）。内存的访问是用户程序最频繁的操作，甚至都没有之一，假如在这个环节上增加了额外的负担，势必会直接影响应用程序的吞吐量。</p>\n<p>基于以上两点，是否移动对象都存在弊端，移动则内存回收时会更复杂，不移动则内存分配时会更复杂。从垃圾收集的停顿时间来看，不移动对象停顿时间会更短，甚至可以不需要停顿，但是从整个程序的吞吐量来看，移动对象会更划算。此语境中，吞吐量的实质是赋值器（Mutator，可以理解为使用垃圾收集的用户程序，本书为便于理解，多数地方用“用户程序”或“用户线程”代替）与收集器的效率总和。即使不移动对象会使得收集器的效率提升一些，但因内存分配和访问相比垃圾收集频率要高得多，这部分的耗时增加，总吞吐量仍然是下降的。HotSpot虚拟机里面关注吞吐量的Parallel Scavenge收集器是基于标记-整理算法的，而关注延迟的CMS收集器则是基于标记-清除算法的，这也从侧面印证这点。</p>\n<p>另外，还有一种“和稀泥式”解决方案可以不在内存分配和访问上增加太大额外负担，做法是让虚拟机平时多数时间都采用标记-清除算法，暂时容忍内存碎片的存在，直到内存空间的碎片化程度已经大到影响对象分配时，再采用标记-整理算法收集一次，以获得规整的内存空间。前面提到的基于标记-清除算法的CMS收集器面临空间碎片过多时采用的就是这种处理办法。</p>\n<blockquote>\n<p>最新的ZGC和Shenandoah收集器使用读屏障（Read Barrier）技术实现了整理过程与用户线程的并发执行。</p>\n<p>通常标记-清除算法也是需要停顿用户线程来标记、清理可回收对象的，只是停顿时间相对而言要来的短而已。</p>\n</blockquote>\n<h5 id=\"HotSpot的算法细节实现——-根节点枚举\"><a href=\"#HotSpot的算法细节实现——-根节点枚举\" class=\"headerlink\" title=\"HotSpot的算法细节实现——-根节点枚举\"></a>HotSpot的算法细节实现——-根节点枚举</h5><p>我们以可达性分析算法中从GC Roots集合找引用链这个操作作为介绍虚拟机高效实现的第一个例子。固定可作为GC Roots的节点主要在全局性的引用（例如常量或类静态属性）与执行上下文（例如栈帧中的本地变量表）中，尽管目标明确，但查找过程要做到高效并非一件容易的事情，现在Java应用越做越庞大，光是方法区的大小就常有数百上千兆，里面的类、常量等更是恒河沙数，若要逐个检查以这里为起源的引用肯定得消耗不少时间。</p>\n<p>迄今为止，所有收集器在根节点枚举这一步骤时都是必须暂停用户线程的，因此毫无疑问根节点枚举与之前提及的整理内存碎片一样会面临相似的“Stop The World”的困扰。现在可达性分析算法耗时最长的查找引用链的过程已经可以做到与用户线程一起并发，但根节点枚举始终还是必须在一个能保障一致性的快照中才得以进行——这里“一致性”的意思是整个枚举期间执行子系统看起来就像被冻结在某个时间点上，不会出现分析过程中，根节点集合的对象引用关系还在不断变化的情况，若这点不能满足的话，分析结果准确性也就无法保证。这是导致垃圾收集过程必须停顿所有用户线程的其中一个重要原因，即使是号称停顿时间可控，或者（几乎）不会发生停顿的CMS、G1、ZGC等收集器，枚举根节点时也是必须要停顿的。</p>\n<p>由于目前主流Java虚拟机使用的都是准确式垃圾收集，所以当用户线程停顿下来之后，其实并不需要一个不漏地检查完所有执行上下文和全局的引用位置，虚拟机应当是有办法直接得到哪些地方存放着对象引用的。在HotSpot的解决方案里，是使用一组称为<strong>OopMap</strong>的数据结构来达到这个目的。一旦类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么类型的数据计算出来，在即时编译过程中，也会在特定的位置记录下栈里和寄存器里哪些位置是引用。这样收集器在扫描时就可以直接得知这些信息了，并不需要真正一个不漏地从方法区等GC Roots开始查找。</p>\n<h5 id=\"HotSpot的算法细节实现——-安全点\"><a href=\"#HotSpot的算法细节实现——-安全点\" class=\"headerlink\" title=\"HotSpot的算法细节实现——-安全点\"></a>HotSpot的算法细节实现——-安全点</h5><p>在OopMap的协助下，HotSpot可以快速准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说导致OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外存储空间，这样垃圾收集伴随而来的空间成本就会变得无法忍受的高昂。</p>\n<p>实际上HotSpot也的确没有为每条指令都生成OopMap，前面已经提到，只是在“特定的位置”记录了这些信息，这些位置被称为安全点（Safepoint）。有了安全点的设定，也就决定了用户程序执行时并非在代码指令流的任意位置都能够停顿下来开始垃圾收集，而是<strong>强制要求必须执行到达安全点后能够暂停</strong>。因此，安全点的选定既不能太少以至于让收集器等待时间过长，也不能太过频繁以至于过分增大运行时的内存负荷。安全点位置的选取基本上是以“是否具有让程序长时间执行的特征”为标准进行选定的，因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这样的原因而长时间执行，“长时间执行”的最明显特征就是指令序列的复用，例如方法调用、循环跳转、异常跳转等都属于指令序列复用，所以只有具有这些功能的指令才会产生安全点。</p>\n<p>对于安全点，另外一个需要考虑的问题是，如何在垃圾收集发生时让所有线程（这里其实不包括执行JNI调用的线程）都跑到最近的安全点，然后停顿下来。这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和<strong>主动式中断</strong>（Voluntary Suspension），抢先式中断不需要线程的执行代码主动去配合，在垃圾收集发生时，系统首先把所有用户线程全部中断，如果发现有用户线程中断的地方不在安全点上，就恢复这条线程执行，让它一会再重新中断，直到跑到安全点上。现在几乎没有虚拟机实现采用抢先式中断来暂停线程响应GC事件。</p>\n<p>而主动式中断的思想是当垃圾收集需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志位，各个线程执行过程时会不停地主动去轮询这个标志，<strong>一旦发现中断标志为真时就自己在最近的安全点上主动中断挂起</strong>。轮询标志的地方和安全点是重合的，另外还要加上所有创建对象和其他需要在Java堆上分配内存的地方，这是为了检查是否即将要发生垃圾收集，避免没有足够内存分配新对象。</p>\n<blockquote>\n<p>由于轮询操作在代码中会频繁出现，这要求它必须足够高效。HotSpot使用内存保护陷阱的方式，把轮询操作精简至只有一条汇编指令的程度。</p>\n</blockquote>\n<h5 id=\"HotSpot的算法细节实现——-安全区域\"><a href=\"#HotSpot的算法细节实现——-安全区域\" class=\"headerlink\" title=\"HotSpot的算法细节实现——-安全区域\"></a>HotSpot的算法细节实现——-安全区域</h5><p>使用安全点的设计似乎已经完美解决如何停顿用户线程，让虚拟机进入垃圾回收状态的问题了，但实际情况却并不一定。安全点机制保证了程序执行时，在不太长的时间内就会遇到可进入垃圾收集过程的安全点。但是，程序“不执行”的时候呢？所谓的程序不执行就是没有分配处理器时间，典型的场景便是用户<strong>线程处于Sleep状态或者Blocked状态</strong>，这时候线程无法响应虚拟机的中断请求，不能再走到安全的地方去中断挂起自己，虚拟机也显然不可能持续等待线程重新被激活分配处理器时间。对于这种情况，就必须引入安全区域（Safe Region）来解决。</p>\n<p><strong>安全区域是指能够确保在某一段代码片段之中，引用关系不会发生变化，因此，在这个区域中任意地方开始垃圾收集都是安全的。</strong>我们也可以把安全区域看作被扩展拉伸了的安全点。</p>\n<p>当用户线程执行到安全区域里面的代码时，首先会标识自己已经进入了安全区域，那样当这段时间里虚拟机要发起垃圾收集时就不必去管这些已声明自己在安全区域内的线程了。当线程要离开安全区域时，它要检查虚拟机是否已经完成了根节点枚举（或者垃圾收集过程中其他需要暂停用户线程的阶段），如果完成了，那线程就当作没事发生过，继续执行；否则它就必须一直等待，直到收到可以离开安全区域的信号为止。</p>\n<h5 id=\"HotSpot的算法细节实现——-记忆集与卡表\"><a href=\"#HotSpot的算法细节实现——-记忆集与卡表\" class=\"headerlink\" title=\"HotSpot的算法细节实现——-记忆集与卡表\"></a>HotSpot的算法细节实现——-记忆集与卡表</h5><p>上面我们再说分代收集理论的时候，提到了为解决对象跨代引用所带来的问题，垃圾收集器在新生代中建立了名为记忆集（Remembered Set）的数据结构，用以避免把整个老年代加进GC Roots扫描范围。事实上并不只是新生代、老年代之间才有跨代引用的问题，所有涉及部分区域收集（Partial GC）行为的垃圾收集器，典型的如G1、ZGC和Shenandoah收集器，都会面临相同的问题。</p>\n<p>记忆集是一种用于记录从非收集区域指向收集区域的指针集合的抽象数据结构。如果我们不考虑效率和成本的话，最简单的实现可以用非收集区域中所有含跨代引用的对象数组来实现这个数据结构。如代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class RememberedSet &#123;</span><br><span class=\"line\">\tObject[] set[OBJECT_INTERGENERATIONAL_REFERENCE_SIZE];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种记录全部含跨代引用对象的实现方案，无论是空间占用还是维护成本都相当高昂。而在垃圾收集的场景中，收集器只需要通过记忆集判断出某一块非收集区域是否存在有指向了收集区域的指针就可以了，并不需要了解这些跨代指针的全部细节。那设计者在实现记忆集的时候，便可以选择更为粗犷的记录粒度来节省记忆集的存储和维护成本，下面列举了一些可供选择（当然也可以选择这个范围以外的）的记录精度：</p>\n<ol>\n<li>字长精度：每个记录精确到一个机器字长（就是处理器的寻址位数，如常见的32位或64位，这个精度决定了机器访问物理内存地址的指针长度），该字包含跨代指针。</li>\n<li>对象精度：每个记录精确到一个对象，该对象里有字段含有跨代指针。</li>\n<li>卡精度：每个记录精确到一块内存区域，该区域内有对象含有跨代指针。</li>\n</ol>\n<p>其中，<strong>第三种“卡精度”所指的是用一种称为“卡表”</strong>（Card Table）的方式去实现记忆集，这也是目前最常用的一种记忆集实现形式，一些资料中甚至直接把它和记忆集混为一谈。前面定义中提到记忆集其实是一种“抽象”的数据结构，抽象的意思是只定义了记忆集的行为意图，并没有定义其行为的具体实现。卡表就是记忆集的一种具体实现，它定义了记忆集的记录精度、与堆内存的映射关系等。</p>\n<p>卡表最简单的形式可以只是一个字节数组，而HotSpot虚拟机确实也是这样做的。以下这行代码是HotSpot默认的卡表标记逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CARD_TABLE [<span class=\"keyword\">this</span> address &gt;&gt; <span class=\"number\">9</span>] = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>字节数组CARD_TABLE的每一个元素都对应着其标识的内存区域中一块特定大小的内存块，这个内存块被称作“卡页”（Card Page）。一般来说，卡页大小都是以2的N次幂的字节数，通过上面代码可以看出HotSpot中使用的卡页是2的9次幂，即512字节（地址右移9位，相当于用地址除以512）。那如果卡表标识内存区域的起始地址是0x0000的话，数组CARD_TABLE的第0、1、2号元素，分别对应了地址范围为0x0000～0x01FF、0x0200～0x03FF、0x0400～0x05FF的卡页内存块，如图所示：</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119194852586.png?x-oss-process=style/radio93\" alt=\"image-20201119194852586\"></p>\n<p>一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty），没有则标识为0。在垃圾收集发生时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，把它们加入GC Roots中一并扫描。</p>\n<blockquote>\n<p>由Antony Hosking在1993年发表的论文《Remembered sets can also play cards》中提出。</p>\n<p>之所以使用byte数组而不是bit数组主要是速度上的考量，现代计算机硬件都是最小按字节寻址的，没有直接存储一个bit的指令，所以要用bit的话就不得不多消耗几条shift+mask指令。</p>\n</blockquote>\n<h5 id=\"HotSpot的算法细节实现——-写屏障\"><a href=\"#HotSpot的算法细节实现——-写屏障\" class=\"headerlink\" title=\"HotSpot的算法细节实现——-写屏障\"></a>HotSpot的算法细节实现——-写屏障</h5><p>我们已经解决了如何使用记忆集来缩减GC Roots扫描范围的问题，但还没有解决卡表元素如何维护的问题，例如它们何时变脏、谁来把它们变脏等。</p>\n<p>卡表元素何时变脏的答案是很明确的——有其他分代区域中对象引用了本区域对象时，其对应的卡表元素就应该变脏，变脏时间点原则上应该发生在引用类型字段赋值的那一刻。但问题是如何变脏，即如何在对象赋值的那一刻去更新维护卡表呢？假如是解释执行的字节码，那相对好处理，虚拟机负责每条字节码指令的执行，有充分的介入空间；但在编译执行的场景中呢？经过即时编译后的代码已经是纯粹的机器指令流了，这就必须找到一个在机器码层面的手段，把维护卡表的动作放到每一个赋值操作之中。</p>\n<p>在HotSpot虚拟机里是通过写屏障（Write Barrier）技术维护卡表状态的。</p>\n<p>写屏障可以看作在虚拟机层面对“引用类型字段赋值”这个动作的AOP切面，在引用对象赋值时会产生一个环形（Around）通知，供程序执行额外的动作，也就是说赋值的前后都在写屏障的覆盖范畴内。在赋值前的部分的写屏障叫作写前屏障（Pre-Write Barrier），在赋值后的则叫作写后屏障（Post-Write Barrier）。HotSpot虚拟机的许多收集器中都有使用到写屏障，但直至G1收集器出现之前，其他收集器都只用到了写后屏障。</p>\n<p>下面这段代码是一段更新卡表状态的简化逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">oop_field_store</span><span class=\"params\">(oop* field, oop new_value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 引用字段赋值操作</span></span><br><span class=\"line\">    *field = new_value;</span><br><span class=\"line\">    <span class=\"comment\">// 写后屏障，在这里完成卡表状态更新</span></span><br><span class=\"line\">    post_write_barrier(field, new_value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>应用写屏障后，虚拟机就会为所有赋值操作生成相应的指令，一旦收集器在写屏障中增加了更新卡表操作，无论更新的是不是老年代对新生代对象的引用，每次只要对引用进行更新，就会产生额外的开销，不过这个开销与Minor GC时扫描整个老年代的代价相比还是低得多的。</p>\n<p>除了写屏障的开销外，卡表在高并发场景下还面临着“伪共享”（False Sharing）问题。伪共享是处理并发底层细节时一种经常需要考虑的问题，现代中央处理器的缓存系统中是以缓存行（Cache Line）为单位存储的，当多线程修改互相独立的变量时，如果这些变量恰好共享同一个缓存行，就会彼此影响（写回、无效化或者同步）而导致性能降低，这就是伪共享问题。</p>\n<p>假设处理器的缓存行大小为64字节，由于一个卡表元素占1个字节，64个卡表元素将共享同一个缓存行。这64个卡表元素对应的卡页总的内存为32KB（64×512字节），也就是说如果不同线程更新的对象正好处于这32KB的内存区域内，就会导致更新卡表时正好写入同一个缓存行而影响性能。为了避免伪共享问题，一种简单的解决方案是不采用无条件的写屏障，而是先检查卡表标记，只有当该卡表元素未被标记过时才将其标记为变脏，即将卡表更新的逻辑变为以下代码所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (CARD_TABLE [<span class=\"keyword\">this</span> address &gt;&gt; <span class=\"number\">9</span>] != <span class=\"number\">0</span>)</span><br><span class=\"line\">\tCARD_TABLE [<span class=\"keyword\">this</span> address &gt;&gt; <span class=\"number\">9</span>] = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在JDK 7之后，HotSpot虚拟机增加了一个新的参数-XX：+UseCondCardMark，用来决定是否开启卡表更新的条件判断。开启会增加一次额外判断的开销，但能够避免伪共享问题，两者各有性能损耗，是否打开要根据应用实际运行情况来进行测试权衡。</p>\n<blockquote>\n<p>这个语境上的内存屏障（Memory Barrier）的目的是为了指令不因编译优化、CPU执行优化等原因而导致乱序执行，它也是可以细分为仅确保读操作顺序正确性和仅确保写操作顺序正确性的内存屏障的。</p>\n<p>AOP为Aspect Oriented Programming的缩写，意为面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。后面提到的“环形通知”也是AOP中的概念。</p>\n</blockquote>\n<h5 id=\"HotSpot的算法细节实现——-并发的可达性分析\"><a href=\"#HotSpot的算法细节实现——-并发的可达性分析\" class=\"headerlink\" title=\"HotSpot的算法细节实现——-并发的可达性分析\"></a>HotSpot的算法细节实现——-并发的可达性分析</h5><p>前面我们曾经提到了当前主流编程语言的垃圾收集器基本上都是依靠可达性分析算法来判定对象是否存活的，可达性分析算法理论上要求全过程都基于一个能保障一致性的快照中才能够进行分析，这意味着必须全程冻结用户线程的运行。在根节点枚举这个步骤中，由于GC Roots相比起整个Java堆中全部的对象毕竟还算是极少数，且在各种优化技巧（如OopMap）的加持下，它带来的停顿已经是非常短暂且相对固定（不随堆容量而增长）的了。可从GC Roots再继续往下遍历对象图，这一步骤的停顿时间就必定会与Java堆容量直接成正比例关系了：堆越大，存储的对象越多，对象图结构越复杂，要标记更多对象而产生的停顿时间自然就更长，这听起来是理所当然的事情。</p>\n<p>要知道包含“标记”阶段是所有追踪式垃圾收集算法的共同特征，如果这个阶段会随着堆变大而等比例增加停顿时间，其影响就会波及几乎所有的垃圾收集器，同理可知，如果能够削减这部分停顿时间的话，那收益也将会是系统性的。</p>\n<p>想解决或者降低用户线程的停顿，就要先搞清楚为什么必须在一个能保障一致性的快照上才能进行对象图的遍历？为了能解释清楚这个问题，我们引入三色标记（Tri-color Marking）作为工具来辅助推导，把遍历对象图过程中遇到的对象，按照“是否访问过”这个条件标记成以下三种颜色：</p>\n<ol>\n<li>白色：表示对象尚未被垃圾收集器访问过。显然在可达性分析刚刚开始的阶段，所有的对象都是白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达。</li>\n<li>黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接（不经过灰色对象）指向某个白色对象。</li>\n<li>灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过。</li>\n</ol>\n<p>关于可达性分析的扫描过程，我们不妨发挥一下想象力，把它看作对象图上一股以灰色为波峰的波纹从黑向白推进的过程，如果用户线程此时是冻结的，只有收集器线程在工作，那不会有任何问题。但如果用户线程与收集器是并发工作呢？收集器在对象图上标记颜色，同时用户线程在修改引用关系——即修改对象图的结构，这样可能出现两种后果。一种是把原本消亡的对象错误标记为存活，这不是好事，但其实是可以容忍的，只不过产生了一点逃过本次收集的浮动垃圾而已，下次收集清理掉就好。另一种是把原本存活的对象错误标记为已消亡，这就是非常致命的后果了，程序肯定会因此发生错误。</p>\n<p>下面演示了这样的致命错误具体是如何产生的：</p>\n<p><img src=\"https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201119202121202.png?x-oss-process=style/radio93\" alt=\"image-20201119202121202\"></p>\n<p>Wilson于1994年在理论上证明了，当且仅当以下两个条件同时满足时，会产生“对象消失”的问题，即原本应该是黑色的对象被误标为白色：</p>\n<ol>\n<li>赋值器插入了一条或多条从黑色对象到白色对象的新引用。</li>\n<li>赋值器删除了全部从灰色对象到该白色对象的直接或间接引用。</li>\n</ol>\n<p>因此，我们要解决并发扫描时的对象消失问题，只需破坏这两个条件的任意一个即可。由此分别产生了两种解决方案：增量更新（Incremental Update）和原始快照（Snapshot At The Beginning，SATB）。</p>\n<p>增量更新要破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了。</p>\n<p>原始快照要破坏的是第二个条件，当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索。</p>\n<p>以上无论是对引用关系记录的插入还是删除，虚拟机的记录操作都是通过写屏障实现的。在HotSpot虚拟机中，增量更新和原始快照这两种解决方案都有实际应用，譬如，CMS是基于增量更新来做并发标记的，G1、Shenandoah则是用原始快照来实现。</p>\n"}],"PostAsset":[{"_id":"source/_posts/hexo使用记录/image-20201027162208507.png","post":"ckhou44w9000arcwo91iu3fxl","slug":"image-20201027162208507.png","modified":1,"renderable":1},{"_id":"source/_posts/hexo使用记录/image-20201027162349781.png","post":"ckhou44w9000arcwo91iu3fxl","slug":"image-20201027162349781.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckhou44w9000arcwo91iu3fxl","category_id":"ckhou44wc000frcwo49op0x62","_id":"ckhou44wk000yrcwogx4b97n1"},{"post_id":"ckhou44w9000arcwo91iu3fxl","category_id":"ckhou44wg000nrcwodth8foqe","_id":"ckhou44wl0011rcwo1yrn3myk"}],"PostTag":[{"post_id":"ckhou44w10001rcwo1xek36vs","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wb000crcwobxsc9fny"},{"post_id":"ckhou44we000ircwofdwbbqx3","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wg000lrcwo1rph6cpz"},{"post_id":"ckhou44we000ircwofdwbbqx3","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wh000orcwoee3736la"},{"post_id":"ckhou44w40003rcwodpke1lr3","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wi000rrcwo58ut2axh"},{"post_id":"ckhou44w40003rcwodpke1lr3","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wi000trcwo0aa58047"},{"post_id":"ckhou44wf000jrcwofzat8w8r","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wj000wrcwoe922fw5v"},{"post_id":"ckhou44wf000jrcwofzat8w8r","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wk000zrcwofpg0fcur"},{"post_id":"ckhou44wg000mrcwo0la5cedm","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wl0012rcwo2kyr8v3x"},{"post_id":"ckhou44wg000mrcwo0la5cedm","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wm0015rcwoabofb365"},{"post_id":"ckhou44w70006rcwo1gvx8vfn","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wm0017rcwo5ftcbzqs"},{"post_id":"ckhou44wh000prcwoaghv53gt","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wp001arcwoef2r4dew"},{"post_id":"ckhou44wh000prcwoaghv53gt","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wp001crcwo6ctx0zcc"},{"post_id":"ckhou44wi000srcwodznmebot","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wq001ercwo47bsgu7w"},{"post_id":"ckhou44wi000srcwodznmebot","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wr001grcwodkgvbiwp"},{"post_id":"ckhou44wi000urcwo1srb51as","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wr001ircwo85zo2mba"},{"post_id":"ckhou44wi000urcwo1srb51as","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44ws001krcwog1ge8qa0"},{"post_id":"ckhou44wj000xrcwoeei7bg5k","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wt001mrcwogtm855b1"},{"post_id":"ckhou44wj000xrcwoeei7bg5k","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wt001orcwo5yks5w9f"},{"post_id":"ckhou44w9000arcwo91iu3fxl","tag_id":"ckhou44wh000qrcwo3zpohnnq","_id":"ckhou44wu001qrcwo8gt6eelv"},{"post_id":"ckhou44w9000arcwo91iu3fxl","tag_id":"ckhou44wj000vrcwo899s72dy","_id":"ckhou44wu001srcwodqb03ynt"},{"post_id":"ckhou44wk0010rcwob8bl25xr","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wv001urcwob5i68af7"},{"post_id":"ckhou44wk0010rcwob8bl25xr","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44ww001wrcwo1bltdonr"},{"post_id":"ckhou44wl0014rcwogk2s6iky","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44ww001yrcwobpqy0952"},{"post_id":"ckhou44wl0014rcwogk2s6iky","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wx0020rcwo48rv8wm7"},{"post_id":"ckhou44wb000ercwoe4wu9r9u","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wy0022rcwobx350r54"},{"post_id":"ckhou44wb000ercwoe4wu9r9u","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wy0023rcwo8mm15nx2"},{"post_id":"ckhou44wm0016rcwoc30ldqgc","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wy0024rcwodtyoc5l0"},{"post_id":"ckhou44wm0016rcwoc30ldqgc","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wy0025rcwo28c43fxj"},{"post_id":"ckhou44wm0019rcwoh4zqdvuu","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wy0026rcwog06c48zm"},{"post_id":"ckhou44wm0019rcwoh4zqdvuu","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wy0027rcwo3dkhhpmj"},{"post_id":"ckhou44wd000grcwo895rcf8t","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wy0028rcwobcsoacmp"},{"post_id":"ckhou44wd000grcwo895rcf8t","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wy0029rcwocj631wp4"},{"post_id":"ckhou44wp001brcwoca3kbipu","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wy002arcwohqv7awsc"},{"post_id":"ckhou44wp001brcwoca3kbipu","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wy002brcwo9hmif3iz"},{"post_id":"ckhou44wp001drcwo2pvg6pdp","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wz002crcwo6h6o7clz"},{"post_id":"ckhou44wp001drcwo2pvg6pdp","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wz002drcwo114f7y9g"},{"post_id":"ckhou44wq001frcwo41z4fz4t","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wz002ercwo67c0cl5q"},{"post_id":"ckhou44wq001frcwo41z4fz4t","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wz002frcwo6sav26tm"},{"post_id":"ckhou44wr001hrcwo81e2d31n","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wz002grcwoetmm5so1"},{"post_id":"ckhou44wr001hrcwo81e2d31n","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wz002hrcwohgrhbnta"},{"post_id":"ckhou44wr001jrcwob1wm0ru8","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wz002ircwo7i0nhx7a"},{"post_id":"ckhou44wr001jrcwob1wm0ru8","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wz002jrcwo69lrg2sv"},{"post_id":"ckhou44ws001lrcwoffgi5l8d","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wz002krcwoag25csix"},{"post_id":"ckhou44ws001lrcwoffgi5l8d","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wz002lrcwo19s6ha8z"},{"post_id":"ckhou44wt001nrcwobdzg55su","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wz002mrcwofsqwcptk"},{"post_id":"ckhou44wt001nrcwobdzg55su","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wz002nrcwoctwp20s5"},{"post_id":"ckhou44wt001prcwof66h5b87","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wz002orcwo8af72yv9"},{"post_id":"ckhou44wt001prcwof66h5b87","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wz002prcwoedws4msi"},{"post_id":"ckhou44wu001rrcwo0e6bglin","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wz002qrcwoav84d2hr"},{"post_id":"ckhou44wu001rrcwo0e6bglin","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wz002rrcwohx1ggazq"},{"post_id":"ckhou44wu001trcwo6aqugkgp","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wz002srcwo1ser8txp"},{"post_id":"ckhou44wu001trcwo6aqugkgp","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wz002trcwo7rlbhs35"},{"post_id":"ckhou44wv001vrcwodc8qc1l0","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wz002urcwoa82xctwn"},{"post_id":"ckhou44wv001vrcwodc8qc1l0","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wz002vrcwo7akhf59h"},{"post_id":"ckhou44ww001xrcwodzmx5zdm","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wz002wrcwo8m364s72"},{"post_id":"ckhou44ww001xrcwodzmx5zdm","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wz002xrcwo687z4abb"},{"post_id":"ckhou44wx001zrcwo1rtn6ghe","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44wz002yrcwoexoof8ml"},{"post_id":"ckhou44wx001zrcwo1rtn6ghe","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44wz002zrcwoeaa5bryj"},{"post_id":"ckhou44wx0021rcwo1q1k370m","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44x00030rcwo9gb47bko"},{"post_id":"ckhou44wx0021rcwo1q1k370m","tag_id":"ckhou44we000hrcwoeu0z7j3y","_id":"ckhou44x00031rcwoda7gh1qs"},{"post_id":"ckhou44x30032rcwobmup939j","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44x30033rcwoebyt1etf"},{"post_id":"ckhou44xu0034rcwohd27g4b9","tag_id":"ckhou44w50004rcwoehel5y18","_id":"ckhou44xy0035rcwod61gcw6l"}],"Tag":[{"name":"java","_id":"ckhou44w50004rcwoehel5y18"},{"name":"设计模式","_id":"ckhou44we000hrcwoeu0z7j3y"},{"name":"hexo","_id":"ckhou44wh000qrcwo3zpohnnq"},{"name":"问题记录","_id":"ckhou44wj000vrcwo899s72dy"}]}}