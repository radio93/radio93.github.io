<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Executors线程池</title>
    <url>/2020/10/28/Executors%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h5 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h5><p>创建一个可缓存的线程池</p>
<blockquote>
<p>如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。</p>
</blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line">executor.submit(<span class="keyword">new</span> Runnable() {</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span> <span class="params">()</span> </span>{</span><br><span class="line">		<span class="comment">//TODO</span></span><br><span class="line">	}</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<h5 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h5><p>创建固定大小的线程池</p>
<blockquote>
<p>每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</p>
</blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedThreadPoolDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FixedThreadPoolDemo</span><span class="params">(<span class="keyword">int</span> index)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            service.execute(<span class="keyword">new</span> FixedThreadPoolDemo(i));</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"finish"</span>);</span><br><span class="line">        service.shutdown();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">finish</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h5><p>创建一个单线程的线程池</p>
<blockquote>
<p>  这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</p>
</blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleThreadPoolDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingleThreadPoolDemo</span><span class="params">(<span class="keyword">int</span> index)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ExecutorService service = Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            service.execute(<span class="keyword">new</span> SingleThreadPoolDemo(i));</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"finish"</span>);</span><br><span class="line">        service.shutdown();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">finish</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h5><p>创建一个周期任务线程池</p>
<blockquote>
<p>此线程池支持定时以及周期性执行任务的需求</p>
</blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledThreadPoolDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">        service.schedule(() -&gt; System.out.println(Thread.currentThread().getName()), <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果(该程序表示延迟2s执行)：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pool-1-thread-1</span><br></pre></td></tr></tbody></table></figure>

<h5 id="scheduleAtFixedRate"><a href="#scheduleAtFixedRate" class="headerlink" title="scheduleAtFixedRate"></a>scheduleAtFixedRate</h5><p>周期线程中的定时任务</p>
<p>示例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledThreadPoolDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">        service.scheduleAtFixedRate(() -&gt; System.out.println(Thread.currentThread().getName()), <span class="number">5</span>, <span class="number">2</span>,TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果(该程序表示程序启动5s后，每隔2s执行一次)：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></tbody></table></figure>

<h5 id="scheduleWithFixedDelay"><a href="#scheduleWithFixedDelay" class="headerlink" title="scheduleWithFixedDelay"></a>scheduleWithFixedDelay</h5><p>周期线程中的定时任务</p>
<p>示例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledThreadPoolDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">        service.scheduleWithFixedDelay(() -&gt; System.out.println(Thread.currentThread().getName()), <span class="number">5</span>, <span class="number">2</span>,TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>说明：scheduleAtFixedRate和scheduleWithFixedDelay的区别在于前者是时间间隔过后，再检查任务是否结束，如果结束了，立即执行下个任务，后者是先等待任务结束，然后再等待时间间隔过后再执行。</p>
</blockquote>
<h5 id="newSingleThreadScheduledExecutor"><a href="#newSingleThreadScheduledExecutor" class="headerlink" title="newSingleThreadScheduledExecutor"></a>newSingleThreadScheduledExecutor</h5><p>定时任务</p>
<p>示例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleThreadScheduledPoolDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">        service.scheduleAtFixedRate(() -&gt; System.out.println(Thread.currentThread().getName()), <span class="number">5</span>, <span class="number">2</span>,TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果(该程序表示程序启动5s后，每隔2s执行一次)：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>ScheduledExecutorService执行的周期任务，如果执行过程中抛出了异常，那么任务就会停止，周期也会停止。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC模式</title>
    <url>/2020/11/06/MVC%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h1><blockquote>
<p>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。</p>
<p><strong>Model（模型）</strong> - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</p>
<p><strong>View（视图）</strong> - 视图代表模型包含的数据的可视化。</p>
<p><strong>Controller（控制器）</strong> - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>新建一个model</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleModel</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>新建view</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleView</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPeople</span><span class="params">(PeopleModel model)</span> </span>{</span><br><span class="line">        System.out.println(model.toString());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>新建controller</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleController</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> PeopleModel model;</span><br><span class="line">    <span class="keyword">private</span> PeopleView view;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PeopleController</span><span class="params">(PeopleModel model, PeopleView view)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.model = model;</span><br><span class="line">        <span class="keyword">this</span>.view = view;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPeopleId</span><span class="params">(Integer id)</span></span>{</span><br><span class="line">        model.setId(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPeopleId</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> model.getId();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPeopleName</span><span class="params">(String name)</span></span>{</span><br><span class="line">        model.setName(name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPeopleName</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> model.getName();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPeople</span><span class="params">()</span></span>{</span><br><span class="line">        view.showPeople(model);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">static</span> PeopleModel <span class="title">getModel</span><span class="params">()</span> </span>{</span><br><span class="line">        PeopleModel model = <span class="keyword">new</span> PeopleModel();</span><br><span class="line">        model.setId(<span class="number">1</span>);</span><br><span class="line">        model.setName(<span class="string">"abc"</span>);</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//模拟数据库取值</span></span><br><span class="line">        PeopleModel model = getModel();</span><br><span class="line">        <span class="comment">//创建视图</span></span><br><span class="line">        PeopleView view = <span class="keyword">new</span> PeopleView();</span><br><span class="line">        <span class="comment">//把people信息输出给控制台</span></span><br><span class="line">        PeopleController controller = <span class="keyword">new</span> PeopleController(model, view);</span><br><span class="line">        controller.showPeople();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新数据</span></span><br><span class="line">        controller.setPeopleId(<span class="number">2</span>);</span><br><span class="line">        controller.setPeopleName(<span class="string">"def"</span>);</span><br><span class="line">        <span class="comment">//再次输出</span></span><br><span class="line">        controller.showPeople();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">PeopleModel(id=<span class="number">1</span>, name=abc)</span><br><span class="line">PeopleModel(id=<span class="number">2</span>, name=def)</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p>MVC模式是典型的前后端数据交互模式。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo使用记录</title>
    <url>/2020/10/27/hexo%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h5 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Ctrl+B对选中字体加粗</span><br><span class="line">$$+Enter 公式</span><br></pre></td></tr></tbody></table></figure>

<h5 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a><a href="https://hexo.io/zh-cn/docs/">Hexo</a></h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new 新博客名字</span><br><span class="line"><span class="comment">#编译md文件为静态页面</span></span><br><span class="line">$ hexo generate</span><br><span class="line"><span class="comment">#推送public文件夹到main，github收到main发生变化，会自动重启，需要等待一会</span></span><br><span class="line">$ hexo deploy</span><br><span class="line"><span class="comment">#编辑+部署</span></span><br><span class="line">$ hexo g -d</span><br><span class="line"></span><br><span class="line">$ hexo new page <span class="string">"页面名称"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>source源码维护，方便不同计算机维护博客</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">更新本地源码到<span class="built_in">source</span></span><br><span class="line">git init</span><br><span class="line">git checkout -b <span class="built_in">source</span></span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">"init blog"</span></span><br><span class="line">git remote add origin git@github.com:radio93/radio93.github.io.git</span><br><span class="line">git push origin <span class="built_in">source</span></span><br></pre></td></tr></tbody></table></figure>



<h5 id="新环境博客维护"><a href="#新环境博客维护" class="headerlink" title="新环境博客维护"></a>新环境博客维护</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#从git上的source分支down下来的源码</span></span><br><span class="line">$ <span class="built_in">cd</span> 项目</span><br><span class="line"><span class="comment">#Hexo 3.0 把服务器独立成了个别模块，必须先安装 hexo-server 才能使用</span></span><br><span class="line">$ npm install hexo-server --save</span><br><span class="line"><span class="comment">#编译博客源码为静态页面</span></span><br><span class="line">$ hexo generate</span><br><span class="line"><span class="comment">#尝试启动博客 默认端口4000</span></span><br><span class="line">$ hexo server</span><br><span class="line"><span class="comment">#如果端口冲突 可以修改端口</span></span><br><span class="line">$ hexo server -p 5000</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h5 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h5><h6 id="如果radio93-github-io无法访问，需要修改此处，博客主页在main下的index-html"><a href="#如果radio93-github-io无法访问，需要修改此处，博客主页在main下的index-html" class="headerlink" title="如果radio93.github.io无法访问，需要修改此处，博客主页在main下的index.html"></a>如果radio93.github.io无法访问，需要修改此处，博客主页在main下的index.html</h6><p><img src="https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201027162208507.png?x-oss-process=style/radio93"></p>
<h6 id="项目名称需要和github名称保持一致"><a href="#项目名称需要和github名称保持一致" class="headerlink" title="项目名称需要和github名称保持一致"></a>项目名称需要和github名称保持一致</h6><p><img src="https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201027162349781.png?x-oss-process=style/radio93"></p>
<h6 id="如果Gitalk控制台总是报错，可以查看下-themes-next-layout-third-party-comments-gitalk-swig中的链接是否最新，因为原域名已被更新"><a href="#如果Gitalk控制台总是报错，可以查看下-themes-next-layout-third-party-comments-gitalk-swig中的链接是否最新，因为原域名已被更新" class="headerlink" title="如果Gitalk控制台总是报错，可以查看下\themes\next\layout_third-party\comments\gitalk.swig中的链接是否最新，因为原域名已被更新"></a>如果Gitalk控制台总是报错，可以查看下\themes\next\layout_third-party\comments\gitalk.swig中的链接是否最新，因为原域名已被更新</h6><p>gitalk.swig源码如下：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{%- <span class="keyword">if</span> page.comments %}</span><br><span class="line">{%- set gitalk_css_uri = theme.vendors.gitalk_css or <span class="string">'https://unpkg.com/gitalk/dist/gitalk.css'</span> %}</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"{{ gitalk_css_uri }}"</span>&gt;</span><br><span class="line"></span><br><span class="line">{%- set gitalk_js_uri = theme.vendors.gitalk_js or <span class="string">'https://unpkg.com/gitalk/dist/gitalk.min.js'</span> %}</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">NexT.utils.loadComments(<span class="built_in">document</span>.querySelector(<span class="string">'#gitalk-container'</span>), <span class="function">() =&gt;</span> {</span><br><span class="line">  NexT.utils.getScript(<span class="string">'{{ gitalk_js_uri }}'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk({</span><br><span class="line">      clientID    : <span class="string">'{{ theme.gitalk.client_id }}'</span>,</span><br><span class="line">      clientSecret: <span class="string">'{{ theme.gitalk.client_secret }}'</span>,</span><br><span class="line">      repo        : <span class="string">'{{ theme.gitalk.repo }}'</span>,</span><br><span class="line">      owner       : <span class="string">'{{ theme.gitalk.github_id }}'</span>,</span><br><span class="line">      admin       : [<span class="string">'{{ theme.gitalk.admin_user }}'</span>],</span><br><span class="line">      id          : <span class="string">'{{ gitalk_md5(page.path) }}'</span>,</span><br><span class="line">      {%- <span class="keyword">if</span> theme.gitalk.language == <span class="string">''</span> %}</span><br><span class="line">        language: <span class="built_in">window</span>.navigator.language || <span class="built_in">window</span>.navigator.userLanguage,</span><br><span class="line">      {% <span class="keyword">else</span> %}</span><br><span class="line">        language: <span class="string">'{{ theme.gitalk.language }}'</span>,</span><br><span class="line">      {%- endif %}</span><br><span class="line">      distractionFreeMode: {{ theme.gitalk.distraction_free_mode }}</span><br><span class="line">    });</span><br><span class="line">    gitalk.render(<span class="string">'gitalk-container'</span>);</span><br><span class="line">  }, <span class="built_in">window</span>.Gitalk);</span><br><span class="line">});</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">{%- endif %}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>文档操作</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>问题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>业务代表模式</title>
    <url>/2020/11/06/%E4%B8%9A%E5%8A%A1%E4%BB%A3%E8%A1%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="业务代表模式"><a href="#业务代表模式" class="headerlink" title="业务代表模式"></a>业务代表模式</h1><blockquote>
<p>业务代表模式（Business Delegate Pattern）用于对表示层和业务层解耦。它基本上是用来减少通信或对表示层代码中的业务层代码的远程查询功能。在业务层中我们有以下实体。</p>
<p><strong>客户端（Client）</strong> - 表示层代码可以是 JSP、servlet 或 UI java 代码。</p>
<p><strong>业务代表（Business Delegate）</strong> - 一个为客户端实体提供的入口类，它提供了对业务服务方法的访问。</p>
<p><strong>查询服务（LookUp Service）</strong> - 查找服务对象负责获取相关的业务实现，并提供业务对象对业务代表对象的访问。</p>
<p><strong>业务服务（Business Service）</strong> - 业务服务接口。实现了该业务服务的实体类，提供了实际的业务实现逻辑。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>创建peopleService接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.business;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PeopleService</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建两个服务实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.business;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EatService</span> <span class="keyword">implements</span> <span class="title">PeopleService</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"eat..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.business;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepService</span> <span class="keyword">implements</span> <span class="title">PeopleService</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"sleep..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建查询服务</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.business;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessSeach</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PeopleService <span class="title">seach</span><span class="params">(String serviceType)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (serviceType.equalsIgnoreCase(<span class="string">"eat"</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EatService();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SleepService();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建业务代表</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.business;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessDelegate</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> BusinessSeach businessSeach = <span class="keyword">new</span> BusinessSeach();</span><br><span class="line">    <span class="keyword">private</span> PeopleService peopleService;</span><br><span class="line">    <span class="keyword">private</span> String servcieType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServiceType</span><span class="params">(String servcieType)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.servcieType = servcieType;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTask</span><span class="params">()</span> </span>{</span><br><span class="line">        peopleService = businessSeach.seach(servcieType);</span><br><span class="line">        peopleService.doSomething();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.business;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessDelegateDemo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        BusinessDelegate businessDelegate = <span class="keyword">new</span> BusinessDelegate();</span><br><span class="line">        Client client = <span class="keyword">new</span> Client(businessDelegate);</span><br><span class="line"></span><br><span class="line">        businessDelegate.setServiceType(<span class="string">"eat"</span>);</span><br><span class="line">        client.doTask();</span><br><span class="line"></span><br><span class="line">        businessDelegate.setServiceType(<span class="string">"sleep"</span>);</span><br><span class="line">        client.doTask();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">eat...</span><br><span class="line">sleep...</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>中介者模式</title>
    <url>/2020/11/05/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h1><blockquote>
<p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合， 使代码易于维护。中介者模式属于行为型模式。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>创建一个people类，并将其中的say方法单独提取</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String message)</span> </span>{</span><br><span class="line">        Say.say(<span class="keyword">this</span>, message);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Say</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(People people, String message)</span> </span>{</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">" ["</span> + people.getName() + <span class="string">"]:"</span> + message);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediatorDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        People people1 = <span class="keyword">new</span> People(<span class="string">"people1"</span>);</span><br><span class="line">        People people2 = <span class="keyword">new</span> People(<span class="string">"people2"</span>);</span><br><span class="line">        people1.say(<span class="string">"hello1"</span>);</span><br><span class="line">        people2.say(<span class="string">"hello2"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Thu Nov <span class="number">05</span> <span class="number">11</span>:<span class="number">43</span>:<span class="number">05</span> CST <span class="number">2020</span> [people1]:hello1</span><br><span class="line">Thu Nov <span class="number">05</span> <span class="number">11</span>:<span class="number">43</span>:<span class="number">05</span> CST <span class="number">2020</span> [people2]:hello2</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。</p>
<p><strong>缺点：</strong>中介者会庞大，变得复杂难以维护。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>享元模式</title>
    <url>/2020/10/31/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><blockquote>
<p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p>
<p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。典型的 String str = “abc”;如果有，则返回，如果没有则在字符串常量池中创建。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>我们定义一个生物接口，生物接口中有一个说话的功能。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有生物的标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Organism</span> </span>{</span><br><span class="line">    <span class="comment">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class="line">    <span class="function">String <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>定义一个动物实体类，让他具有生物的性质。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Organism</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my name is :"</span> + name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建一个工厂，用来创建和存储animal实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrganismFactory</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;String, Organism&gt; animalMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Organism <span class="title">getAnimal</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        Animal animal = (Animal) animalMap.get(name);</span><br><span class="line">        <span class="keyword">if</span> (animal == <span class="keyword">null</span>) {</span><br><span class="line">            animal = <span class="keyword">new</span> Animal(name);</span><br><span class="line">            animalMap.put(name, animal);</span><br><span class="line">            System.out.println(animal.say()+<span class="string">"第一次创建"</span>);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            System.out.println(animal.say()+<span class="string">"从池中取出"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> animal;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightDemo</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String[] names = {<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>};</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">            OrganismFactory.getAnimal(names[getIndex()]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Integer <span class="title">getIndex</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (Math.random() * <span class="number">4</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">my name is :d第一次创建</span><br><span class="line">my name is :d从池中取出</span><br><span class="line">my name is :a第一次创建</span><br><span class="line">my name is :b第一次创建</span><br><span class="line">my name is :c第一次创建</span><br><span class="line">my name is :c从池中取出</span><br><span class="line">my name is :c从池中取出</span><br><span class="line">my name is :c从池中取出</span><br><span class="line">my name is :a从池中取出</span><br><span class="line">my name is :d从池中取出</span><br></pre></td></tr></tbody></table></figure>

<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p>在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。大大减少对象的创建，降低系统的内存，使效率提高；缺点是提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2020/11/03/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><blockquote>
<p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。</p>
<p>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。最典型的就是SpringAOP，我们不再直接new对象了，而是通过spring动态代理来获取对象。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>我们创建一个people的接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">People</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建一个实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleImpl</span> <span class="keyword">implements</span> <span class="title">People</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PeopleImpl</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">"Loading..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"my name is "</span> + name);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建一个实现类的代理类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPeople</span> <span class="keyword">implements</span> <span class="title">People</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> PeopleImpl peopleImpl;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyPeople</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (peopleImpl == <span class="keyword">null</span>) {</span><br><span class="line">            peopleImpl = <span class="keyword">new</span> PeopleImpl(name);</span><br><span class="line">        }</span><br><span class="line">        peopleImpl.say();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        People people = <span class="keyword">new</span> ProxyPeople(<span class="string">"radio"</span>);</span><br><span class="line">        people.say();</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line">        people.say();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Loading...</span><br><span class="line">my name is radio</span><br><span class="line">---------------------------------</span><br><span class="line">my name is radio</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、职责清晰。 2、高扩展性。 3、智能化。</p>
<p><strong>缺点：</strong> 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/2020/11/02/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><blockquote>
<p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>创建一个抽象类，实现Cloneable接口，提供一个抽象方法，重写Object的clone方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>{</span><br><span class="line">        Object clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            clone = <span class="keyword">super</span>.clone();</span><br><span class="line">        } <span class="keyword">catch</span> (CloneNotSupportedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建两个people实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleOne</span> <span class="keyword">extends</span> <span class="title">People</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PeopleOne</span><span class="params">()</span></span>{</span><br><span class="line">        type=<span class="string">"peopleone"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"my name is peopleone"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleTwo</span> <span class="keyword">extends</span> <span class="title">People</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PeopleTwo</span><span class="params">()</span></span>{</span><br><span class="line">        type=<span class="string">"peopletwo"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"my name is peopletwo"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建一个存放原型对象的注册表，提供一个获取新实例的方法，用来复制原型，默认初始化两个实例</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleCache</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Hashtable&lt;Integer, People&gt; peopleMap = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> People <span class="title">getPeople</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        People people = peopleMap.get(id);</span><br><span class="line">        <span class="comment">//复制一个新的实例，属于浅拷贝</span></span><br><span class="line">        <span class="keyword">return</span> (People) people.clone();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadCache</span><span class="params">()</span> </span>{</span><br><span class="line">        PeopleOne peopleOne = <span class="keyword">new</span> PeopleOne();</span><br><span class="line">        peopleOne.setId(<span class="number">1</span>);</span><br><span class="line">        peopleMap.put(peopleOne.getId(), peopleOne);</span><br><span class="line"></span><br><span class="line">        PeopleTwo peopleTwo = <span class="keyword">new</span> PeopleTwo();</span><br><span class="line">        peopleTwo.setId(<span class="number">2</span>);</span><br><span class="line">        peopleMap.put(peopleTwo.getId(), peopleTwo);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        PeopleCache.loadCache();</span><br><span class="line">        People peopleOne = PeopleCache.getPeople(<span class="number">1</span>);</span><br><span class="line">        System.out.println(peopleOne.type);</span><br><span class="line">        peopleOne.say();</span><br><span class="line"></span><br><span class="line">        People peopleTwo = PeopleCache.getPeople(<span class="number">2</span>);</span><br><span class="line">        System.out.println(peopleTwo.type);</span><br><span class="line">        peopleTwo.say();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>新生成的两个实例就是通过原型clone出来的</p>
<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">peopleone</span><br><span class="line">my name is peopleone</span><br><span class="line">peopletwo</span><br><span class="line">my name is peopletwo</span><br></pre></td></tr></tbody></table></figure>

<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、性能提高。 2、逃避构造函数的约束。</p>
<p><strong>缺点：</strong> 1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。</p>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/11/06/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><blockquote>
<p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
<p>单例类只能有一个实例。</p>
<p>单例类必须自己创建自己的唯一实例。</p>
<p>单例类必须给所有其他对象提供这一实例。</p>
</blockquote>
<p>单例模式的5种实现方式</p>
<h5 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式-线程不安全"></a>懒汉式-线程不安全</h5><p>懒得创建，你调用我的时候再创建</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonOne</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonOne instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonOne</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonOne <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonOne();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h5 id="饿汉式-天生线程安全"><a href="#饿汉式-天生线程安全" class="headerlink" title="饿汉式-天生线程安全"></a>饿汉式-天生线程安全</h5><p>早就创建好了，随时等着调用</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTwo</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonTwo instance = <span class="keyword">new</span> SingletonTwo();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTwo</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonTwo <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h5 id="双检锁-双重校验锁（DCL，即-double-checked-locking）"><a href="#双检锁-双重校验锁（DCL，即-double-checked-locking）" class="headerlink" title="双检锁/双重校验锁（DCL，即 double-checked locking）"></a>双检锁/双重校验锁（DCL，即 double-checked locking）</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双检锁/双重校验锁（DCL，即 double-checked locking）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonThree</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonThree instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonThree</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonThree <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">//synchronize加在这儿的好处是，第一是为了线程安全，第二是如果已经被实例化了，那么就不用加锁，直接获取对象，相比把锁加在方法上效率要高一些。</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonThree.class) {</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonThree();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>需要加volatile关键字，否则会出现错误。问题的原因在于JVM指令重排优化的存在。在某个线程创建单例对象时，在构造方法被调用之前，就为该对象分配了内存空间并将对象的字段设置为默认值，此时就可以将分配的内存地址赋值给instance字段了。然而该对象可能还没有初始化（写完还未同步主存），若紧接着另外一个线程来调用getInstance，取到的就是状态不正确的对象，程序就会出错。</p>
<p>由于 synchronized 并不是对 instance实例进行加锁（因为现在还并没有实例），所以线程在执行完instance = new SingletonThree()修改 instance 的值后，应该将修改后的 instance立即写入主存（main memory），而不是暂时存在寄存器或者高速缓冲区（caches）中，以保证新的值对其它线程可见。</p>
<p>至此，我们要加volatile关键字，保证内存可见性。</p>
</blockquote>
<h5 id="登记式-静态内部类"><a href="#登记式-静态内部类" class="headerlink" title="登记式/静态内部类"></a>登记式/静态内部类</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登记式/静态内部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFour</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonFour</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFourHolder</span> </span>{</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonFour INSTANCE = <span class="keyword">new</span> SingletonFour();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonFour <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> SingletonFourHolder.INSTANCE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h5 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span>  <span class="title">SingletonFive</span> </span>{</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"123321"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>使用：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//枚举调用方式</span></span><br><span class="line">SingletonFive.INSTANCE.doSomeThing();</span><br></pre></td></tr></tbody></table></figure>

<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p>一般情况下，不建议使用第 1 种方式，建议使用第 2 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 4 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 5 种枚举方式。如果有其他特殊的需求，可以考虑使用第 3 种双检锁方式。</p>
</blockquote>
<h3 id="破坏单例模式的三种方式"><a href="#破坏单例模式的三种方式" class="headerlink" title="破坏单例模式的三种方式"></a>破坏单例模式的三种方式</h3><blockquote>
<p>反射，克隆，序列化</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 破坏单例的两种方式</span></span><br><span class="line"><span class="comment"> * 1，反射</span></span><br><span class="line"><span class="comment"> * 2，克隆   需要单例实现Cloneable接口</span></span><br><span class="line"><span class="comment"> * 3，序列化  需要单例实现Serializable接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"---------------序列化------------------"</span>);</span><br><span class="line">        SingletonOne singleton = SingletonOne.getInstance();</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        oos.writeObject(singleton);</span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">        ObjectInputStream ois =<span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">        SingletonOne serializeSingleton = (SingletonOne) ois.readObject();</span><br><span class="line">        System.out.println(singleton == serializeSingleton);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------克隆------------------"</span>);</span><br><span class="line">        SingletonOne cloneSingleton = (SingletonOne) singleton.clone();</span><br><span class="line">        System.out.println(singleton == cloneSingleton);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------反射------------------"</span>);</span><br><span class="line">        Constructor&lt;SingletonOne&gt; cons = SingletonOne.class.getDeclaredConstructor();</span><br><span class="line">        cons.setAccessible(<span class="keyword">true</span>);<span class="comment">//SingletonOne类中的成员变量为private,故必须进行此操作</span></span><br><span class="line">        SingletonOne reflextSingleton = cons.newInstance();</span><br><span class="line">        System.out.println(singleton == reflextSingleton);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">---------------序列化------------------</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">---------------克隆------------------</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">---------------反射------------------</span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></tbody></table></figure>

<p>这三种方式的规避方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonOne</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>{</span><br><span class="line">    <span class="comment">//防止反射</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> isCreate = <span class="keyword">false</span>;<span class="comment">//默认是第一次创建</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonOne instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonOne</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (isCreate) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"已创建过"</span>);</span><br><span class="line">        }</span><br><span class="line">        isCreate = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonOne <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonOne();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">		<span class="comment">//return super.clone();</span></span><br><span class="line">        <span class="comment">//防止克隆</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//防止序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">---------------序列化------------------</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">---------------克隆------------------</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">---------------反射------------------</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.reflect.InvocationTargetException</span><br><span class="line">	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">	at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">	at test.singleton.SingletonDemo.main(SingletonDemo.java:<span class="number">31</span>)</span><br><span class="line">Caused by: java.lang.RuntimeException: 已创建过</span><br><span class="line">	at test.singleton.SingletonOne.&lt;init&gt;(SingletonOne.java:<span class="number">16</span>)</span><br><span class="line">	... <span class="number">5</span> more</span><br></pre></td></tr></tbody></table></figure>

<p>这里我们简单说一下 为什么防止序列化要添加readResolve(),返回Object对象</p>
<blockquote>
<p>一般来说, 一个类实现了 Serializable接口, 我们就可以把它往内存地写再从内存里读出而”组装”成一个跟原来一模一样的对象.</p>
<p>不过当序列化遇到单例时,这里边就有了个问题: 从内存读出而组装的对象破坏了单例的规则. 单例是要求一个JVM中只有一个类对象的, 而现在通过反序列化,一个新的对象克隆了出来,与以前序列化的对象不能equlas。</p>
<p>如果被反序列化的对象的类存在readResolve这个方法，他会调用这个方法来返回一个“array”，然后浅拷贝一份，作为返回值，并且无视掉反序列化的值，即使那个字节码已经被解析。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>命令模式</title>
    <url>/2020/11/04/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><blockquote>
<p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>我们创建一个people实体，并提供两个方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"add id: "</span> + id + <span class="string">" name:"</span> + name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"remove id: "</span> + id + <span class="string">" name:"</span> + name);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>新建一个order命令的接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Order</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>分别对people的add和remove方法创建order接口的实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleAdd</span> <span class="keyword">implements</span> <span class="title">Order</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> People people;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PeopleAdd</span><span class="params">(People people)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.people = people;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>{</span><br><span class="line">        people.add();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleRemove</span> <span class="keyword">implements</span> <span class="title">Order</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> People people;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PeopleRemove</span><span class="params">(People people)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.people = people;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>{</span><br><span class="line">        people.remove();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建一个命令调用实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Broker</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeOrder</span><span class="params">(Order order)</span> </span>{</span><br><span class="line">        orders.add(order);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">placeOrders</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (Order order : orders) {</span><br><span class="line">            order.execute();</span><br><span class="line">        }</span><br><span class="line">        orders.clear();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        People people = <span class="keyword">new</span> People();</span><br><span class="line">        PeopleAdd peopleAdd = <span class="keyword">new</span> PeopleAdd(people);</span><br><span class="line">        PeopleRemove peopleRemove = <span class="keyword">new</span> PeopleRemove(people);</span><br><span class="line"></span><br><span class="line">        Broker broker = <span class="keyword">new</span> Broker();</span><br><span class="line">        broker.takeOrder(peopleAdd);</span><br><span class="line">        broker.takeOrder(peopleRemove);</span><br><span class="line">        broker.placeOrders();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">add id: <span class="number">1</span>name:<span class="number">1</span></span><br><span class="line">remove id: <span class="number">1</span>name:<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。</p>
<p><strong>缺点：</strong>使用命令模式可能会导致某些系统有过多的具体命令类。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录模式</title>
    <url>/2020/11/05/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h1><blockquote>
<p>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。</p>
<p>比如：Windows 里的 ctrl + z；浏览器的后退；    数据库的事务管理等</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>我们创建三个类，一个people类，包含一个status状态的字段，一个存储people状态的类，一个获取people状态的类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.memento;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String status)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.memento;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleStatusSave</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> People <span class="title">saveStatus</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> People(status);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStatus</span><span class="params">(People people)</span> </span>{</span><br><span class="line">        status = people.getStatus();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.memento;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleRecover</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> List&lt;People&gt; peopleList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(People people)</span> </span>{</span><br><span class="line">        peopleList.add(people);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> People <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> peopleList.get(index);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.memento;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MementoDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        PeopleStatusSave peopleStatus = <span class="keyword">new</span> PeopleStatusSave();</span><br><span class="line">        PeopleRecover peopleRecover = <span class="keyword">new</span> PeopleRecover();</span><br><span class="line"></span><br><span class="line">        peopleStatus.setStatus(<span class="string">"11111"</span>);</span><br><span class="line">        peopleRecover.add(peopleStatus.saveStatus());</span><br><span class="line"></span><br><span class="line">        peopleStatus.setStatus(<span class="string">"22222"</span>);</span><br><span class="line">        peopleRecover.add(peopleStatus.saveStatus());</span><br><span class="line"></span><br><span class="line">        peopleStatus.setStatus(<span class="string">"33333"</span>);</span><br><span class="line">        peopleRecover.add(peopleStatus.saveStatus());</span><br><span class="line"></span><br><span class="line">        peopleStatus.setStatus(<span class="string">"44444"</span>);</span><br><span class="line">        peopleRecover.add(peopleStatus.saveStatus());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"current: "</span> + peopleStatus.getStatus());</span><br><span class="line"></span><br><span class="line">        peopleStatus.getStatus(peopleRecover.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">"first: "</span>+ peopleStatus.getStatus());</span><br><span class="line"></span><br><span class="line">        peopleStatus.getStatus(peopleRecover.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"second: "</span>+ peopleStatus.getStatus());</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">current: <span class="number">44444</span></span><br><span class="line">first: <span class="number">11111</span></span><br><span class="line">second: <span class="number">22222</span></span><br></pre></td></tr></tbody></table></figure>


</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。</p>
<p><strong>缺点：</strong>消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>/2020/11/03/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><blockquote>
<p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。</p>
<p>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>创建一个people实体和一个animal实体</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"my name is people"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"my name is animal"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建一个组合</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> People people;</span><br><span class="line">    <span class="keyword">private</span> Animal animal;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Facade</span><span class="params">()</span> </span>{</span><br><span class="line">        people = <span class="keyword">new</span> People();</span><br><span class="line">        animal = <span class="keyword">new</span> Animal();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">peopleSay</span><span class="params">()</span> </span>{</span><br><span class="line">        people.say();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">animalSay</span><span class="params">()</span> </span>{</span><br><span class="line">        animal.say();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadeDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">        facade.peopleSay();</span><br><span class="line">        facade.animalSay();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">my name is people</span><br><span class="line">my name is animal</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p>上诉示例达到的效果就是我们说的开局一人一狗，默认绑定</p>
<p><strong>优点：</strong> 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。</p>
<p><strong>缺点：</strong>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2020/10/31/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><blockquote>
<p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>我们定义一个生物接口，生物接口中有一个说话的功能。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有生物的标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Organism</span> </span>{</span><br><span class="line">    <span class="comment">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建两个实体类，让其拥有Organism的属性</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">Organism</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"people say"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Organism</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"animal say"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建产生对象的工厂</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrganismFactory</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Organism <span class="title">getOrganism</span><span class="params">(String type)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(type)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"people"</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> People();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"animal"</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Animal();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        OrganismFactory organismFactory = <span class="keyword">new</span> OrganismFactory();</span><br><span class="line">        Organism o1 = organismFactory.getOrganism(<span class="string">"people"</span>);</span><br><span class="line">        o1.say();</span><br><span class="line">        Organism o2 = organismFactory.getOrganism(<span class="string">"animal"</span>);</span><br><span class="line">        o2.say();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">people say</span><br><span class="line">animal say</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点</strong>：1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。</p>
<p><strong>缺点</strong>：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/2020/11/02/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><blockquote>
<p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p>
<p>StringBuilder就是典型的建造者模式</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>这次我们的类会变的复杂一些，我们还是老规矩，先创建一个Organism接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有生物的标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Organism</span> </span>{</span><br><span class="line">    <span class="comment">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class="line">    <span class="function">String <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>我们先不创建people和animal，我们先创建一个条目，让这个条目来融合Organism，同时我们新增两个属性</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleItem</span> <span class="keyword">implements</span> <span class="title">Item</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Organism <span class="title">organism</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> People();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Integer <span class="title">Height</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalItem</span> <span class="keyword">implements</span> <span class="title">Item</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Organism <span class="title">organism</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Animal();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Integer <span class="title">Height</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>两个抽象的条目创建好了，我们只实现其中的Organism，名字和身高，我们让具体类去实现，我们创建两个人，两个动物分别实现名字和身高。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleItemOne</span> <span class="keyword">extends</span> <span class="title">PeopleItem</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my name is peopleOne"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">Height</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleItemTwo</span> <span class="keyword">extends</span> <span class="title">PeopleItem</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my name is peopleTwo"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">Height</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalItemOne</span> <span class="keyword">extends</span> <span class="title">AnimalItem</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my name is animalOne"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">Height</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalItemTwo</span> <span class="keyword">extends</span> <span class="title">AnimalItem</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my name is animalTwo"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">Height</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>我们创建一个家庭成员的类，让他帮我们归纳一下哪些人，哪些动物属于哪个家庭，做一下统计</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Family</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> List&lt;Item&gt; items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(Item item)</span> </span>{</span><br><span class="line">        items.add(item);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getHeight</span><span class="params">()</span> </span>{</span><br><span class="line">        Integer height = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Item item : items) {</span><br><span class="line">            height += item.Height();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showItems</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (Item item : items) {</span><br><span class="line">            System.out.println(<span class="string">"Item: "</span> + item.name());</span><br><span class="line">            System.out.println(<span class="string">"say："</span> + item.organism().say());</span><br><span class="line">            System.out.println(<span class="string">"height："</span> + item.Height());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>方便起见，我们创建两个家庭，分别设置一些成员</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FamilyBuilder</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Family <span class="title">familyOne</span><span class="params">()</span> </span>{</span><br><span class="line">        Family family = <span class="keyword">new</span> Family();</span><br><span class="line">        family.addItem(<span class="keyword">new</span> PeopleItemOne());</span><br><span class="line">        family.addItem(<span class="keyword">new</span> PeopleItemTwo());</span><br><span class="line">        family.addItem(<span class="keyword">new</span> AnimalItemOne());</span><br><span class="line">        <span class="keyword">return</span> family;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Family <span class="title">familyTwo</span><span class="params">()</span> </span>{</span><br><span class="line">        Family family = <span class="keyword">new</span> Family();</span><br><span class="line">        family.addItem(<span class="keyword">new</span> PeopleItemTwo());</span><br><span class="line">        family.addItem(<span class="keyword">new</span> AnimalItemTwo());</span><br><span class="line">        <span class="keyword">return</span> family;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        FamilyBuilder familyBuilder = <span class="keyword">new</span> FamilyBuilder();</span><br><span class="line">        Family familyOne = familyBuilder.familyOne();</span><br><span class="line">        familyOne.showItems();</span><br><span class="line">        System.out.println(<span class="string">"身高和："</span> + familyOne.getHeight());</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line">        Family familyTwo = familyBuilder.familyTwo();</span><br><span class="line">        familyTwo.showItems();</span><br><span class="line">        familyTwo.getHeight();</span><br><span class="line">        System.out.println(<span class="string">"身高和："</span> + familyTwo.getHeight());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Item: my name is peopleOne</span><br><span class="line">say：people say</span><br><span class="line">height：<span class="number">100</span></span><br><span class="line">Item: my name is peopleTwo</span><br><span class="line">say：people say</span><br><span class="line">height：<span class="number">200</span></span><br><span class="line">Item: my name is animalOne</span><br><span class="line">say：animal say</span><br><span class="line">height：<span class="number">50</span></span><br><span class="line">身高和：<span class="number">350</span></span><br><span class="line">---------------------------------</span><br><span class="line">Item: my name is peopleTwo</span><br><span class="line">say：people say</span><br><span class="line">height：<span class="number">200</span></span><br><span class="line">Item: my name is animalTwo</span><br><span class="line">say：animal say</span><br><span class="line">height：<span class="number">100</span></span><br><span class="line">身高和：<span class="number">300</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong>1、建造者独立，易扩展。 2、便于控制细节风险。</p>
<p><strong>缺点：</strong> 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。</p>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/2020/11/01/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><blockquote>
<p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p>
<p>相当于把所有工厂又封装了一遍。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>模仿工厂模式，我们创建两个接口，一个生物，一个性别，分别有两个实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.abstractFactory;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有生物的标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Organism</span> </span>{</span><br><span class="line">    <span class="comment">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">Organism</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"people say"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Organism</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"animal say"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.abstractFactory;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有生物都有性别</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sex</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sex</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Male</span> <span class="keyword">implements</span> <span class="title">Sex</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sex</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"male"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Female</span> <span class="keyword">implements</span> <span class="title">Sex</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sex</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"female"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建一个超级工厂</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Organism <span class="title">getOrganism</span><span class="params">(String type)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Sex <span class="title">getSex</span><span class="params">(String type)</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>通过继承超级工厂来分别来实现各自的工厂</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrganismFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Organism <span class="title">getOrganism</span><span class="params">(String type)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(type)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"people"</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> People();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"animal"</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Animal();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sex <span class="title">getSex</span><span class="params">(String type)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SexFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Organism <span class="title">getOrganism</span><span class="params">(String type)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sex <span class="title">getSex</span><span class="params">(String type)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(type)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"male"</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Male();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"female"</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Female();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建一个工厂创造器</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryProducer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">getFactory</span><span class="params">(String type)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(type)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"organism"</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OrganismFactory();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"sex"</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SexFactory();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        AbstractFactory organismFactory = FactoryProducer.getFactory(<span class="string">"organism"</span>);</span><br><span class="line">        Organism people = organismFactory.getOrganism(<span class="string">"people"</span>);</span><br><span class="line">        people.say();</span><br><span class="line"></span><br><span class="line">        Organism animal = organismFactory.getOrganism(<span class="string">"animal"</span>);</span><br><span class="line">        animal.say();</span><br><span class="line"></span><br><span class="line">        AbstractFactory sexFactory = FactoryProducer.getFactory(<span class="string">"sex"</span>);</span><br><span class="line"></span><br><span class="line">        Sex male = sexFactory.getSex(<span class="string">"male"</span>);</span><br><span class="line">        male.sex();</span><br><span class="line"></span><br><span class="line">        Sex female = sexFactory.getSex(<span class="string">"female"</span>);</span><br><span class="line">        female.sex();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">people say</span><br><span class="line">animal say</span><br><span class="line">male</span><br><span class="line">female</span><br></pre></td></tr></tbody></table></figure>

<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p>
<p><strong>缺点：</strong>产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</p>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>桥接模式</title>
    <url>/2020/11/03/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><blockquote>
<p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p>
<p>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>我们创建一个性别api接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.bridge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SexApi</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sex</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建两个接口实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.bridge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Male</span> <span class="keyword">implements</span> <span class="title">SexApi</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sex</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"my sex is male"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.bridge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Female</span> <span class="keyword">implements</span> <span class="title">SexApi</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sex</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"my sex is female"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建一个people的抽象类，并赋予性别api的接口功能，为people提供一个性别</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.bridge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>{</span><br><span class="line">    <span class="keyword">protected</span> SexApi sexApi;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">People</span><span class="params">(SexApi sexApi)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.sexApi = sexApi;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">peopleSex</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建people的实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.bridge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleImpl</span> <span class="keyword">extends</span> <span class="title">People</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">PeopleImpl</span><span class="params">(SexApi sexApi)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(sexApi);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">peopleSex</span><span class="params">()</span> </span>{</span><br><span class="line">        sexApi.sex();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.bridge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgeDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        People male = <span class="keyword">new</span> PeopleImpl(<span class="keyword">new</span> Male());</span><br><span class="line">        People female = <span class="keyword">new</span> PeopleImpl(<span class="keyword">new</span> Female());</span><br><span class="line"></span><br><span class="line">        male.peopleSex();</span><br><span class="line">        female.peopleSex();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">my sex is male</span><br><span class="line">my sex is female</span><br></pre></td></tr></tbody></table></figure>

<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。</p>
<p><strong>缺点：</strong>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>模板模式</title>
    <url>/2020/11/06/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="模版模式"><a href="#模版模式" class="headerlink" title="模版模式"></a>模版模式</h1><blockquote>
<p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>我们定义一个抽象类，并提供一个final的方法，防止被重写</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">awake</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>{</span><br><span class="line">        awake();</span><br><span class="line">        eat();</span><br><span class="line">        sleep();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建两个实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleOne</span> <span class="keyword">extends</span> <span class="title">People</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">awake</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"peopleOne awake"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"peopleOne eat"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"peopleOne sleep"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleTwo</span> <span class="keyword">extends</span> <span class="title">People</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">awake</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"peopleTwo awake"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"peopleTwo eat"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"peopleTwo sleep"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        People peopleOne =<span class="keyword">new</span> PeopleOne();</span><br><span class="line">        peopleOne.action();</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line">        People peopleTwo =<span class="keyword">new</span> PeopleTwo();</span><br><span class="line">        peopleTwo.action();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">peopleOne awake</span><br><span class="line">peopleOne eat</span><br><span class="line">peopleOne sleep</span><br><span class="line">---------------------------------</span><br><span class="line">peopleTwo awake</span><br><span class="line">peopleTwo eat</span><br><span class="line">peopleTwo sleep</span><br></pre></td></tr></tbody></table></figure>


</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。</p>
<p><strong>缺点：</strong>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>状态模式</title>
    <url>/2020/11/05/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><blockquote>
<p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>我们创建一个people实体和一个state接口，提供两个方法，一个吃，一个睡</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(People people)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(People people)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">        getState().eat(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">        getState().sleep(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建两个状态类，分别实现eat和sleep接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EatState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(People people)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(People people)</span> </span>{</span><br><span class="line">        people.setState(<span class="keyword">new</span> SleepState());</span><br><span class="line">        System.out.println(<span class="string">"sleep"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(People people)</span> </span>{</span><br><span class="line">        people.setState(<span class="keyword">new</span> EatState());</span><br><span class="line">        System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(People people)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了，我们给people一个初始状态，然后让他来回切换状态</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        People people = <span class="keyword">new</span> People();</span><br><span class="line">        people.setState(<span class="keyword">new</span> EatState());</span><br><span class="line"></span><br><span class="line">        people.sleep();</span><br><span class="line">        people.eat();</span><br><span class="line">        people.sleep();</span><br><span class="line">        people.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">sleep</span><br><span class="line">eat</span><br><span class="line">sleep</span><br><span class="line">eat</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、封装了转换规则。 2、枚举可能的状态，在枚举状态之前需要确定状态种类。 3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</p>
<p><strong>缺点：</strong> 1、状态模式的使用必然会增加系统类和对象的个数。 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 3、状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>空对象模式</title>
    <url>/2020/11/05/%E7%A9%BA%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="空对象模式"><a href="#空对象模式" class="headerlink" title="空对象模式"></a>空对象模式</h1><blockquote>
<p>在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。</p>
<p>在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>新建一个people的抽象类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.nullObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>分别创建两个对象，一个存在的，一个不存在的</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.nullObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealPeople</span> <span class="keyword">extends</span> <span class="title">People</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RealPeople</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.nullObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullPeople</span> <span class="keyword">extends</span> <span class="title">People</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"non-existent"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.nullObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullDemo</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] names = {<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>};</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> People <span class="title">getPeople</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;names.length;i++) {</span><br><span class="line">            <span class="keyword">if</span>(names[i].equalsIgnoreCase(name)){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> RealPeople(name);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NullPeople();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        People a = getPeople(<span class="string">"a"</span>);</span><br><span class="line">        People b = getPeople(<span class="string">"b"</span>);</span><br><span class="line">        People c = getPeople(<span class="string">"c"</span>);</span><br><span class="line">        People d = getPeople(<span class="string">"d"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(a.getName());</span><br><span class="line">        System.out.println(b.getName());</span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">        System.out.println(d.getName());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">non-existent</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p>空对象模式就是对于不存在的值，单独进行封装，如果返回为null，我们在最开始就做好null值的处理。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/2020/11/06/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><blockquote>
<p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p>
<p>与状态模式的比较</p>
<p>状态模式的类图和策略模式类似，并且都是能够动态改变对象的行为。但是状态模式是通过状态转移来改变 People 所组合的 State 对象，而策略模式是通过 Num 本身的决策来改变组合的 Strategy 对象。所谓的状态转移，是指 People 在运行过程中由于一些条件发生改变而使得 State 对象发生改变，注意必须要是在运行过程中。</p>
<p>状态模式主要是用来解决状态转移的问题，当状态发生转移了，那么 People 对象就会改变它的行为；而策略模式主要是用来封装一组可以互相替代的算法族，并且可以根据需要动态地去替换 People 使用的算法。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>创建一个策略接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">execute</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>分别写一个加法，一个减法的具体实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">execute</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subtract</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">execute</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>编写Num具体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Num</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetStrategy</span><span class="params">(Strategy strategy)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">execute</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> strategy.execute(num1, num2);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Num num = <span class="keyword">new</span> Num();</span><br><span class="line">        num.SetStrategy(<span class="keyword">new</span> Add());</span><br><span class="line">        System.out.println(<span class="string">"10+6="</span> + num.execute(<span class="number">10</span>, <span class="number">6</span>));</span><br><span class="line">        num.SetStrategy(<span class="keyword">new</span> Subtract());</span><br><span class="line">        System.out.println(<span class="string">"10-6="</span> + num.execute(<span class="number">10</span>, <span class="number">6</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>演示结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">10</span>+<span class="number">6</span>=<span class="number">16</span></span><br><span class="line"><span class="number">10</span>-<span class="number">6</span>=<span class="number">4</span></span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。</p>
<p><strong>缺点：</strong> 1、策略类会增多。 2、所有策略类都需要对外暴露。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/2020/11/03/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><blockquote>
<p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p>
<p>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>创建一个people实体类，让这个实体类里面依然包含people的对象集合</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;People&gt; peoples;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(Integer id, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        peoples = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(People people)</span> </span>{</span><br><span class="line">        peoples.add(people);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">         People people = <span class="keyword">new</span> People(<span class="number">1</span>,<span class="string">"1"</span>);</span><br><span class="line">         People people2 = <span class="keyword">new</span> People(<span class="number">2</span>,<span class="string">"2"</span>);</span><br><span class="line">         People people3 = <span class="keyword">new</span> People(<span class="number">3</span>,<span class="string">"3"</span>);</span><br><span class="line">         People people4 = <span class="keyword">new</span> People(<span class="number">4</span>,<span class="string">"4"</span>);</span><br><span class="line"></span><br><span class="line">        people.add(people2);</span><br><span class="line">        people.add(people3);</span><br><span class="line">        people.add(people4);</span><br><span class="line"></span><br><span class="line">        System.out.println(people.toString());</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">People(id=<span class="number">1</span>, name=<span class="number">1</span>, peoples=[People(id=<span class="number">2</span>, name=<span class="number">2</span>, peoples=[]), People(id=<span class="number">3</span>, name=<span class="number">3</span>, peoples=[]), People(id=<span class="number">4</span>, name=<span class="number">4</span>, peoples=[])])</span><br></pre></td></tr></tbody></table></figure>

<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p>1、组合模式，就是在一个对象中包含其他对象，这些被包含的对象可能是终点对象（不再包含别的对象），也有可能是非终点对象（其内部还包含其他对象，或叫组对象），我们将对象称为节点，即一个根节点包含许多子节点，这些子节点有的不再包含子节点，而有的仍然包含子节点，以此类推。</p>
<p>2、所谓组合模式，其实说的是对象包含对象的问题，通过组合的方式（在对象内部引用对象）来进行布局，我认为这种组合是区别于继承的，而另一层含义是指树形结构子节点的抽象（将叶子节点与数枝节点抽象为子节点），区别于普通的分别定义叶子节点与数枝节点的方式。</p>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器模式</title>
    <url>/2020/10/31/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><blockquote>
<p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p>
<p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p>
<p>我们通过下面的实例来演示装饰器模式的用法。</p>
</blockquote>
<h5 id="示例演示"><a href="#示例演示" class="headerlink" title="示例演示"></a>示例演示</h5><ol>
<li><p>我们定义一个生物接口，生物接口中有一个说话的功能。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有生物的标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Organism</span> </span>{</span><br><span class="line">    <span class="comment">//所有生物共有的一个功能，有自己的沟通方式</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



</li>
</ol>
<ol start="2">
<li><p>定义一个人类实体类，让他具有生物的性质。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">Organism</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"people say"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



</li>
</ol>
<ol start="3">
<li><p>接下来，重点来了，我们要对这个生物的接口进行拓展，但是其是一个原始属性的接口，所以我们定义一个抽象类，来装饰这个接口。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrganismDecorator</span> <span class="keyword">implements</span> <span class="title">Organism</span> </span>{</span><br><span class="line">    <span class="keyword">protected</span> Organism organism;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrganismDecorator</span><span class="params">(Organism organism)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.organism = organism;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        organism.say();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>现在我们再对这个接口进行实际拓展，比如可以说中文，也可以说英文。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChineseOrganismDecorator</span> <span class="keyword">extends</span> <span class="title">OrganismDecorator</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChineseOrganismDecorator</span><span class="params">(Organism organism)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(organism);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>{</span><br><span class="line">        organism.say();</span><br><span class="line">        <span class="keyword">this</span>.language(organism);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">language</span><span class="params">(Organism organism)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"say Chinese"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnglishOrganismDecorator</span> <span class="keyword">extends</span> <span class="title">OrganismDecorator</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnglishOrganismDecorator</span><span class="params">(Organism organism)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(organism);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        organism.say();</span><br><span class="line">        <span class="keyword">this</span>.language(organism);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">language</span><span class="params">(Organism organism)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"say English"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上面的步骤，我们的接口拓展就完成了，这时候我们演示一下这个接口，让某个人同时可以说中文和英文。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Organism people = <span class="keyword">new</span> People();</span><br><span class="line"></span><br><span class="line">        OrganismDecorator speak = <span class="keyword">new</span> OrganismDecorator(people);</span><br><span class="line"></span><br><span class="line">        ChineseOrganismDecorator chinese = <span class="keyword">new</span> ChineseOrganismDecorator(speak);</span><br><span class="line">        EnglishOrganismDecorator english = <span class="keyword">new</span> EnglishOrganismDecorator(chinese);</span><br><span class="line">        english.say();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">people say</span><br><span class="line">say Chinese</span><br><span class="line">say English</span><br></pre></td></tr></tbody></table></figure>



</li>
</ol>
<ol start="6">
<li><p>我们也可以接着创建一个动物，动物也有自己说话的方式。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Organism</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"animal say"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalOrganismDecorator</span> <span class="keyword">extends</span> <span class="title">OrganismDecorator</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnimalOrganismDecorator</span><span class="params">(Organism organism)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(organism);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        organism.say();</span><br><span class="line">        <span class="keyword">this</span>.language(organism);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">language</span><span class="params">(Organism organism)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"say animal"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>实例化动物，让其有Organism的属性，但是有自己独特的说话方式</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        Organism animal = <span class="keyword">new</span> Animal();</span><br><span class="line">        OrganismDecorator animalSpeak = <span class="keyword">new</span> OrganismDecorator(animal);</span><br><span class="line">        AnimalOrganismDecorator animLan = <span class="keyword">new</span> AnimalOrganismDecorator(animalSpeak);</span><br><span class="line">        animLan.say();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">animal say</span><br><span class="line">say animal</span><br></pre></td></tr></tbody></table></figure>

<h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><blockquote>
<p>以上就是装饰器模式，这种模式的出现是为了更好的拓展功能，而尽可能的减小原结构的改造，各个类都可以独立发展，互相不耦合；缺点就是随着功能的多样化，子类会变得越来越复杂。</p>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/2020/11/05/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><blockquote>
<p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>我们创建一个观察者的抽象类observer和被观察的对象people</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> People people;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> status)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> status)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">        <span class="keyword">this</span>.notifyAll(status);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Observer observer)</span> </span>{</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">(<span class="keyword">int</span> status)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) {</span><br><span class="line">            observer.update(status);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建三个观察者对象</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverOne</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObserverOne</span><span class="params">(People people)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.people = people;</span><br><span class="line">        <span class="keyword">this</span>.people.add(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> status)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"ObserverOne status change: "</span> + people.getStatus());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverTwo</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObserverTwo</span><span class="params">(People people)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.people = people;</span><br><span class="line">        people.add(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> status)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"ObserverTwo status change: "</span> + people.getStatus());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverThree</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObserverThree</span><span class="params">(People people)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.people = people;</span><br><span class="line">        people.add(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> status)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"ObserverThree status change: "</span> + people.getStatus());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        People people = <span class="keyword">new</span> People();</span><br><span class="line">        <span class="keyword">new</span> ObserverOne(people);</span><br><span class="line">        <span class="keyword">new</span> ObserverTwo(people);</span><br><span class="line">        <span class="keyword">new</span> ObserverThree(people);</span><br><span class="line"></span><br><span class="line">        people.setStatus(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line">        people.setStatus(<span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">ObserverOne status change: <span class="number">1</span></span><br><span class="line">ObserverTwo status change: <span class="number">1</span></span><br><span class="line">ObserverThree status change: <span class="number">1</span></span><br><span class="line">---------------------------------</span><br><span class="line">ObserverOne status change: <span class="number">2</span></span><br><span class="line">ObserverTwo status change: <span class="number">2</span></span><br><span class="line">ObserverThree status change: <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。</p>
<p><strong>缺点：</strong> 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>解释器模式</title>
    <url>/2020/11/05/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h1><blockquote>
<p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>创建一个生物接口，并提供一个判断的方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.interpreter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有生物的标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Organism</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOrganism</span><span class="params">(String context)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建一个people实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">Organism</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String data)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOrganism</span><span class="params">(String context)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (context.contains(data)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>分别编写两个判断是否是people的实体，一个是或，一个是且</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrPeople</span> <span class="keyword">implements</span> <span class="title">Organism</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Organism org1 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Organism org2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrPeople</span><span class="params">(Organism org1, Organism org2)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.org1 = org1;</span><br><span class="line">        <span class="keyword">this</span>.org2 = org2;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOrganism</span><span class="params">(String context)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> org1.isOrganism(context) || org2.isOrganism(context);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndPeople</span> <span class="keyword">implements</span> <span class="title">Organism</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Organism org1 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Organism org2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AndPeople</span><span class="params">(Organism org1, Organism org2)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.org1 = org1;</span><br><span class="line">        <span class="keyword">this</span>.org2 = org2;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOrganism</span><span class="params">(String context)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> org1.isOrganism(context) &amp;&amp; org2.isOrganism(context);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterpreterDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Organism <span class="title">getOrPeople</span><span class="params">()</span></span>{</span><br><span class="line">        Organism o1 = <span class="keyword">new</span> People(<span class="string">"people"</span>);</span><br><span class="line">        Organism o2 = <span class="keyword">new</span> People(<span class="string">"animal"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrPeople(o1,o2);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Organism <span class="title">getAndPeople</span><span class="params">()</span></span>{</span><br><span class="line">        Organism o1 = <span class="keyword">new</span> People(<span class="string">"people"</span>);</span><br><span class="line">        Organism o2 = <span class="keyword">new</span> People(<span class="string">"animal"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AndPeople(o1,o2);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Organism orPeople = getOrPeople();</span><br><span class="line">        Organism andPeople = getAndPeople();</span><br><span class="line">        System.out.println(<span class="string">"people or animal is people? "</span>+orPeople.isOrganism(<span class="string">"people"</span>));</span><br><span class="line">        System.out.println(<span class="string">"people and animal is people? "</span>+andPeople.isOrganism(<span class="string">"people"</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>演示结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">people or animal is people? <span class="keyword">true</span></span><br><span class="line">people and animal is people? <span class="keyword">false</span></span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。</p>
<p><strong>缺点：</strong> 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式总结</title>
    <url>/2020/11/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201106193216406.png?x-oss-process=style/radio93" alt="image-20201106193216406"></p>
<p><img src="https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201106193242897.png?x-oss-process=style/radio93" alt="image-20201106193242897"></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>访问者模式</title>
    <url>/2020/11/06/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h1><blockquote>
<p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>定义一个people接口和三个动作的实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">People</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">(PeopleVisitor peopleVisitor)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleAwake</span> <span class="keyword">implements</span> <span class="title">People</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">(PeopleVisitor peopleVisitor)</span> </span>{</span><br><span class="line">        peopleVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleEat</span> <span class="keyword">implements</span> <span class="title">People</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">(PeopleVisitor peopleVisitor)</span> </span>{</span><br><span class="line">        peopleVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleSleep</span> <span class="keyword">implements</span> <span class="title">People</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">(PeopleVisitor peopleVisitor)</span> </span>{</span><br><span class="line">        peopleVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>定义一个访问者接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PeopleVisitor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(PeopleAwake peopleAwake)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(PeopleEat peopleEat)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(PeopleSleep peopleSleep)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>新建一个实现了访问者接口的访问者实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleDisplayVisitor</span> <span class="keyword">implements</span> <span class="title">PeopleVisitor</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(PeopleAwake peopleAwake)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"peopleAwake..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(PeopleEat peopleEat)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"peopleEat..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(PeopleSleep peopleSleep)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"peopleSleep..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisitorDemo</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;People&gt; peoples = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">(PeopleVisitor peopleVisitor)</span> </span>{</span><br><span class="line">        peoples.add(<span class="keyword">new</span> PeopleAwake());</span><br><span class="line">        peoples.add(<span class="keyword">new</span> PeopleEat());</span><br><span class="line">        peoples.add(<span class="keyword">new</span> PeopleSleep());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; peoples.size(); i++) {</span><br><span class="line">            peoples.get(i).action(peopleVisitor);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        action(<span class="keyword">new</span> PeopleDisplayVisitor());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">peopleAwake...</span><br><span class="line">peopleEat...</span><br><span class="line">peopleSleep...</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。</p>
<p><strong>缺点：</strong> 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链模式</title>
    <url>/2020/11/03/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><blockquote>
<p>责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。</p>
<p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>我们举个例子，王者荣耀中，如果你是黄金，那么你肯定要经历白银和青铜，如果你是白银，那么你肯定要经历青铜，就是等级是一级一级来的，我们创建一个people的抽象类，来说明这个级别</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.chain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractPeople</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> gold = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> silver = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> bronze = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> level;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> AbstractPeople nextPeople;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextPeople</span><span class="params">(AbstractPeople nextPeople)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.nextPeople = nextPeople;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadMessage</span><span class="params">(<span class="keyword">int</span> level, String message)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.level &lt;= level) {</span><br><span class="line">            write(message);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (nextPeople != <span class="keyword">null</span>) {</span><br><span class="line">            nextPeople.loadMessage(level, message);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>分别创建各个等级的实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.chain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoldPeople</span> <span class="keyword">extends</span> <span class="title">AbstractPeople</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GoldPeople</span><span class="params">(<span class="keyword">int</span> level)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"write goldpeople："</span> + message);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.chain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SilverPeople</span> <span class="keyword">extends</span> <span class="title">AbstractPeople</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SilverPeople</span><span class="params">(<span class="keyword">int</span> level)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"write silverpeople："</span> + message);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.chain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BronzePeople</span> <span class="keyword">extends</span> <span class="title">AbstractPeople</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BronzePeople</span><span class="params">(<span class="keyword">int</span> level)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"write bronzepeople："</span> + message);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.chain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractPeople <span class="title">getPeople</span><span class="params">()</span> </span>{</span><br><span class="line">        AbstractPeople goldPeople = <span class="keyword">new</span> GoldPeople(AbstractPeople.gold);</span><br><span class="line">        AbstractPeople silverPeople = <span class="keyword">new</span> SilverPeople(AbstractPeople.silver);</span><br><span class="line">        AbstractPeople bronzePeople = <span class="keyword">new</span> BronzePeople(AbstractPeople.bronze);</span><br><span class="line"></span><br><span class="line">        goldPeople.setNextPeople(silverPeople);</span><br><span class="line">        silverPeople.setNextPeople(bronzePeople);</span><br><span class="line">        <span class="keyword">return</span> goldPeople;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        AbstractPeople  abstractPeople = getPeople();</span><br><span class="line">        abstractPeople.loadMessage(AbstractPeople.gold,<span class="string">"this is gold"</span>);</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line">        abstractPeople.loadMessage(AbstractPeople.silver,<span class="string">"this is silver"</span>);</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line">        abstractPeople.loadMessage(AbstractPeople.bronze,<span class="string">"this is bronze"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">write goldpeople：<span class="keyword">this</span> is gold</span><br><span class="line">---------------------------------</span><br><span class="line">write goldpeople：<span class="keyword">this</span> is silver</span><br><span class="line">write silverpeople：<span class="keyword">this</span> is silver</span><br><span class="line">---------------------------------</span><br><span class="line">write goldpeople：<span class="keyword">this</span> is bronze</span><br><span class="line">write silverpeople：<span class="keyword">this</span> is bronze</span><br><span class="line">write bronzepeople：<span class="keyword">this</span> is bronze</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。</p>
<p><strong>缺点：</strong> 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>过滤器模式</title>
    <url>/2020/11/03/%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="过滤器模式"><a href="#过滤器模式" class="headerlink" title="过滤器模式"></a>过滤器模式</h1><blockquote>
<p>过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>我们创建一个people实体</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(Integer id, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建一个peopleId的接口，用于通过id对people分组</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PeopleId</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;People&gt; <span class="title">group</span><span class="params">(List&lt;People&gt; peoples)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>接下来我们按照奇偶对id进行分类，我们创建两个实现类分班对group进行实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OddPeople</span> <span class="keyword">implements</span> <span class="title">PeopleId</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;People&gt; <span class="title">group</span><span class="params">(List&lt;People&gt; peoples)</span> </span>{</span><br><span class="line">        List&lt;People&gt; oddPeoples = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (People people : peoples) {</span><br><span class="line">            <span class="keyword">if</span> (people.getId() % <span class="number">2</span> != <span class="number">0</span>) {</span><br><span class="line">                oddPeoples.add(people);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> oddPeoples;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvenPeople</span> <span class="keyword">implements</span> <span class="title">PeopleId</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;People&gt; <span class="title">group</span><span class="params">(List&lt;People&gt; peoples)</span> </span>{</span><br><span class="line">        List&lt;People&gt; evenPeoples = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (People people : peoples) {</span><br><span class="line">            <span class="keyword">if</span> (people.getId() % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">                evenPeoples.add(people);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> evenPeoples;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        List&lt;People&gt; peoples = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        peoples.add(<span class="keyword">new</span> People(<span class="number">1</span>,<span class="string">"1"</span>));</span><br><span class="line">        peoples.add(<span class="keyword">new</span> People(<span class="number">2</span>,<span class="string">"2"</span>));</span><br><span class="line">        peoples.add(<span class="keyword">new</span> People(<span class="number">3</span>,<span class="string">"3"</span>));</span><br><span class="line">        peoples.add(<span class="keyword">new</span> People(<span class="number">4</span>,<span class="string">"4"</span>));</span><br><span class="line">        peoples.add(<span class="keyword">new</span> People(<span class="number">5</span>,<span class="string">"5"</span>));</span><br><span class="line">        peoples.add(<span class="keyword">new</span> People(<span class="number">6</span>,<span class="string">"6"</span>));</span><br><span class="line">        peoples.add(<span class="keyword">new</span> People(<span class="number">7</span>,<span class="string">"7"</span>));</span><br><span class="line">        peoples.add(<span class="keyword">new</span> People(<span class="number">8</span>,<span class="string">"8"</span>));</span><br><span class="line">        peoples.add(<span class="keyword">new</span> People(<span class="number">9</span>,<span class="string">"9"</span>));</span><br><span class="line">        peoples.add(<span class="keyword">new</span> People(<span class="number">10</span>,<span class="string">"10"</span>));</span><br><span class="line"></span><br><span class="line">        PeopleId oddPeople = <span class="keyword">new</span> OddPeople();</span><br><span class="line">        System.out.println(oddPeople.group(peoples).toString());</span><br><span class="line"></span><br><span class="line">        PeopleId evenPeople = <span class="keyword">new</span> EvenPeople();</span><br><span class="line">        System.out.println(evenPeople.group(peoples).toString());</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">[People(id=<span class="number">1</span>, name=<span class="number">1</span>), People(id=<span class="number">3</span>, name=<span class="number">3</span>), People(id=<span class="number">5</span>, name=<span class="number">5</span>), People(id=<span class="number">7</span>, name=<span class="number">7</span>), People(id=<span class="number">9</span>, name=<span class="number">9</span>)]</span><br><span class="line">[People(id=<span class="number">2</span>, name=<span class="number">2</span>), People(id=<span class="number">4</span>, name=<span class="number">4</span>), People(id=<span class="number">6</span>, name=<span class="number">6</span>), People(id=<span class="number">8</span>, name=<span class="number">8</span>), People(id=<span class="number">10</span>, name=<span class="number">10</span>)]</span><br></pre></td></tr></tbody></table></figure>

<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p>过滤器模式就是我们对一组对象进行过滤，java8提供了里面就提供了很多方法来过滤数据，比如刚才的按照奇偶分类我们就可以直接使用java8提供的方法：</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;People&gt;&gt; groupList = peoples.stream().collect(Collectors.groupingBy(c -&gt; c.getId()%<span class="number">2</span>));</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器模式</title>
    <url>/2020/11/05/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><blockquote>
<p>迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。迭代器模式属于行为型模式。java中的 iterator。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>首先我们创建一个迭代器接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>然后创建一个获取迭代器的接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Container</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建两个接口的实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">Container</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; names;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NameIterator();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">NameIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (index &lt; names.size()) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.hasNext()) {</span><br><span class="line">                <span class="keyword">return</span> names.get(index++);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        People people = <span class="keyword">new</span> People();</span><br><span class="line">        people.names = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        people.names.add(<span class="string">"a"</span>);</span><br><span class="line">        people.names.add(<span class="string">"b"</span>);</span><br><span class="line">        people.names.add(<span class="string">"c"</span>);</span><br><span class="line">        people.names.add(<span class="string">"d"</span>);</span><br><span class="line">        Iterator iter = people.getIterator();</span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()){</span><br><span class="line">            System.out.println(iter.next());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>演示结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。 4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</p>
<p><strong>缺点：</strong>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/2020/11/03/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><blockquote>
<p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p>
<p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。</p>
</blockquote>
<h5 id="示例演示："><a href="#示例演示：" class="headerlink" title="示例演示："></a>示例演示：</h5><ol>
<li><p>由于我们之前的例子都是围绕people和animal来的，所以我们依然用people来举例，例子可能不太恰当，网上有更好的例子；这次我们把people设计成一个接口，这个接口提供了一个eat的方法，方法有两个参数，什么类型的食物，和食物名称</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">People</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String type, String name)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>这时候我们新增两个接口，一个吃荤，一个吃素</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AdvancedPeople</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatMeat</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatVege</span><span class="params">(String name)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>然后我们创建两个实体类，分别来实现这俩方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleEatMeat</span> <span class="keyword">implements</span> <span class="title">AdvancedPeople</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatMeat</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"eat meat :"</span>+name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatVege</span><span class="params">(String name)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleEatVege</span> <span class="keyword">implements</span> <span class="title">AdvancedPeople</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatMeat</span><span class="params">(String name)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatVege</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"eat vege :"</span>+name);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>接下来重点来了，我们创建一个适配eat的适配器实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleAdapter</span> <span class="keyword">implements</span> <span class="title">People</span> </span>{</span><br><span class="line">    AdvancedPeople advancedPeople;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PeopleAdapter</span><span class="params">(String type)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"meat"</span>)) {</span><br><span class="line">            advancedPeople = <span class="keyword">new</span> PeopleEatMeat();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"vege"</span>)) {</span><br><span class="line">            advancedPeople = <span class="keyword">new</span> PeopleEatVege();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String type, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"meat"</span>)) {</span><br><span class="line">            advancedPeople.eatMeat(name);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"vege"</span>)) {</span><br><span class="line">            advancedPeople.eatVege(name);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>创建一个people接口实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleImpl</span> <span class="keyword">implements</span> <span class="title">People</span> </span>{</span><br><span class="line">    PeopleAdapter peopleAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String type, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"food"</span>)) {</span><br><span class="line">            System.out.println(<span class="string">"eat food :"</span>+name);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"meat"</span>) || type.equalsIgnoreCase(<span class="string">"vege"</span>)){</span><br><span class="line">            peopleAdapter = <span class="keyword">new</span> PeopleAdapter(type);</span><br><span class="line">            peopleAdapter.eat(type,name);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"fruit"</span>)){</span><br><span class="line">            System.out.println(name+<span class="string">" not supported"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>完成上述步骤，我们就可以开始演示了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        PeopleImpl people = <span class="keyword">new</span> PeopleImpl();</span><br><span class="line">        people.eat(<span class="string">"food"</span>,<span class="string">"rice"</span>);</span><br><span class="line">        people.eat(<span class="string">"meat"</span>,<span class="string">"fish"</span>);</span><br><span class="line">        people.eat(<span class="string">"vege"</span>,<span class="string">"tomato"</span>);</span><br><span class="line">        people.eat(<span class="string">"fruit"</span>,<span class="string">"apple"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">eat food :rice</span><br><span class="line">eat meat :fish</span><br><span class="line">eat vege :tomato</span><br><span class="line">apple not supported</span><br></pre></td></tr></tbody></table></figure>

<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote>
<p><strong>优点：</strong> 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。</p>
<p><strong>缺点：</strong> 1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</p>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>java日记</title>
    <url>/2020/11/09/java%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h5 id="1，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱"><a href="#1，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱" class="headerlink" title="1，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱"></a>1，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱</h5><p>比如下面这段代码</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.out.println(DateUtil.now());</span><br><span class="line">        sum();</span><br><span class="line">        System.out.println(DateUtil.now());</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">()</span> </span>{</span><br><span class="line">        Long sum = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) {</span><br><span class="line">            sum += i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>我们运行一下</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">11</span>-<span class="number">09</span> <span class="number">19</span>:<span class="number">57</span>:<span class="number">12</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">11</span>-<span class="number">09</span> <span class="number">19</span>:<span class="number">57</span>:<span class="number">20</span></span><br></pre></td></tr></tbody></table></figure>

<p>这段程序是没有问题的，慢的原因在哪，在<code>Long sum = 0L</code>这里，意味着程序构造了大约 2^31 个多余的 Long 实例（大约每次往 Long sum 中增加 long 时构造一个实例） 。将sum 的声明从 Long 改成 long ，我们再试一下</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">11</span>-<span class="number">09</span> <span class="number">19</span>:<span class="number">59</span>:<span class="number">44</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">11</span>-<span class="number">09</span> <span class="number">19</span>:<span class="number">59</span>:<span class="number">45</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="2，避免创建不必要的对象"><a href="#2，避免创建不必要的对象" class="headerlink" title="2，避免创建不必要的对象"></a>2，避免创建不必要的对象</h5><p>比如下面这个例子</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.out.println(isNumber(<span class="string">"312"</span>));</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> s.matches(<span class="string">"^[0-9]*$"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>一个正则表达式，判断传过来的字符串是不是数字，这个方案看起来没有问题，但是如果这个方法使用的非常频繁，那么这种写法就不太合适了，我们先来看看<code>matcher</code>这个方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> Pattern.matches(regex, <span class="keyword">this</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>再往里走</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex, CharSequence input)</span> </span>{</span><br><span class="line">    Pattern p = Pattern.compile(regex);</span><br><span class="line">    Matcher m = p.matcher(input);</span><br><span class="line">    <span class="keyword">return</span> m.matches();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>再往里走</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pattern <span class="title">compile</span><span class="params">(String regex)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Pattern(regex, <span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>它在内部为正则表达式创建了一个 <code>Pattern</code> 实例，却只用了1次，之后就可以进行垃圾回收了，创建 <code>Pattenr</code>实例的成本很高 ，因为需要将正则表达式编译成一个有限状态机（ finite state machine）。</p>
<p>为了提升性能，应该显式地将正则表达式编译成一个 <code>Pattern</code> 实例（不可变），让它成为类初始化的一部分，并将它缓存起来，每当调用 <code>isNumber</code>方法的时候就重用同一个实例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern ISNUM = Pattern.compile(<span class="string">"^[0-9]*$"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.out.println(isNumber(<span class="string">"312"</span>));</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> ISNUM.matcher(s).matches();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h5 id="3，覆盖equals必须覆盖hashCode"><a href="#3，覆盖equals必须覆盖hashCode" class="headerlink" title="3，覆盖equals必须覆盖hashCode"></a>3，覆盖equals必须覆盖hashCode</h5><p>在每个覆盖了equals方法的类中，也必须覆盖hashCode方法。如果不这样做的话，就会违反Object.hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，这样的集合包括HashMap、HashSet和Hashtable</p>
<ol>
<li>只要对象的equals方法的比较操作所用到的信息未被修改，那么对同一个对象调用多次其hashCode返回值不变</li>
<li>若两个对象通过equals得到是相等的，那么调用这两个对象任意一个对象的hashCode方法产生整数结果一样</li>
<li>若两个对象通过equals得到是不相等的，那么调用这两个对象任意一个对象的hashCode方法产生的结果也可能相等,但是从提高散列表(hash table)的性能分析，给不相等的对象产生不同的结果会更好</li>
</ol>
<h5 id="4，Lambda-优先于匿名类，和-java-util-function使用"><a href="#4，Lambda-优先于匿名类，和-java-util-function使用" class="headerlink" title="4，Lambda 优先于匿名类，和 java.util.function使用"></a>4，Lambda 优先于匿名类，和 java.util.function使用</h5><p>举个例子，我们看下面这个代码</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> effectiveJava.enumTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">OpemrationOld</span> </span>{</span><br><span class="line">    PLUS(<span class="string">"+"</span>) {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    MINUS(<span class="string">"-"</span>) {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> x - y;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    TIMES(<span class="string">"*"</span>) {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> x * y;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    DIVIDE(<span class="string">"/"</span>) {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> x / y;</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line"></span><br><span class="line">    OpemrationOld(String symbol) {</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testold</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">double</span> value = OpemrationOld.DIVIDE.apply(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>这个代码表示对任意两个数进行加减乘除运算，jdk1.8新增了Lambda表达式后，我们就可以简写这段代码</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> effectiveJava.enumTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.DoubleBinaryOperator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Opemration</span> </span>{</span><br><span class="line">    PLUS(<span class="string">"+"</span>, (x, y) -&gt; x + y),</span><br><span class="line">    MINUS(<span class="string">"-"</span>, (x, y) -&gt; x - y),</span><br><span class="line">    TIMES(<span class="string">"*"</span>, (x, y) -&gt; x * y),</span><br><span class="line">    DIVIDE(<span class="string">"/"</span>, (x, y) -&gt; x / y);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DoubleBinaryOperator op;</span><br><span class="line"></span><br><span class="line">    Opemration(String symbol, DoubleBinaryOperator op) {</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">        <span class="keyword">this</span>.op = op;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> symbol;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> op.applyAsDouble(x, y);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">double</span> value = Opemration.DIVIDE.apply(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>这里我们提一下<code>DoubleBinaryOperator</code>这个接口，这个接口是java.util.function包中的，也属于jdk1.8新增的包，用来支持 Java的函数式编程。</p>
<p>那这个接口是什么意思呢 表示：代表了作用于两个double值操作符的操作，并且返回了一个double值的结果。</p>
<p>这个包下提供了非常多的函数</p>
<p><img src="https://radio93.oss-cn-beijing.aliyuncs.com/gitbub/image-20201110202033145.png?x-oss-process=style/radio93" alt="image-20201110202033145"></p>
<table>
<thead>
<tr>
<th>序号</th>
<th><strong>接口</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><strong>BiConsumer&lt;T,U&gt;</strong></td>
<td>代表了一个接受两个输入参数的操作，并且不返回任何结果</td>
</tr>
<tr>
<td>2</td>
<td><strong>BiFunction&lt;T,U,R&gt;</strong></td>
<td>代表了一个接受两个输入参数的方法，并且返回一个结果</td>
</tr>
<tr>
<td>3</td>
<td><strong>BinaryOperator<t></t></strong></td>
<td>代表了一个作用于于两个同类型操作符的操作，并且返回了操作符同类型的结果</td>
</tr>
<tr>
<td>4</td>
<td><strong>BiPredicate&lt;T,U&gt;</strong></td>
<td>代表了一个两个参数的boolean值方法</td>
</tr>
<tr>
<td>5</td>
<td><strong>BooleanSupplier</strong></td>
<td>代表了boolean值结果的提供方</td>
</tr>
<tr>
<td>6</td>
<td><strong>Consumer<t></t></strong></td>
<td>代表了接受一个输入参数并且无返回的操作</td>
</tr>
<tr>
<td>7</td>
<td><strong>DoubleBinaryOperator</strong></td>
<td>代表了作用于两个double值操作符的操作，并且返回了一个double值的结果。</td>
</tr>
<tr>
<td>8</td>
<td><strong>DoubleConsumer</strong></td>
<td>代表一个接受double值参数的操作，并且不返回结果。</td>
</tr>
<tr>
<td>9</td>
<td><strong>DoubleFunction<r></r></strong></td>
<td>代表接受一个double值参数的方法，并且返回结果</td>
</tr>
<tr>
<td>10</td>
<td><strong>DoublePredicate</strong></td>
<td>代表一个拥有double值参数的boolean值方法</td>
</tr>
<tr>
<td>11</td>
<td><strong>DoubleSupplier</strong></td>
<td>代表一个double值结构的提供方</td>
</tr>
<tr>
<td>12</td>
<td><strong>DoubleToIntFunction</strong></td>
<td>接受一个double类型输入，返回一个int类型结果。</td>
</tr>
<tr>
<td>13</td>
<td><strong>DoubleToLongFunction</strong></td>
<td>接受一个double类型输入，返回一个long类型结果</td>
</tr>
<tr>
<td>14</td>
<td><strong>DoubleUnaryOperator</strong></td>
<td>接受一个参数同为类型double,返回值类型也为double 。</td>
</tr>
<tr>
<td>15</td>
<td><strong>Function&lt;T,R&gt;</strong></td>
<td>接受一个输入参数，返回一个结果。</td>
</tr>
<tr>
<td>16</td>
<td><strong>IntBinaryOperator</strong></td>
<td>接受两个参数同为类型int,返回值类型也为int 。</td>
</tr>
<tr>
<td>17</td>
<td><strong>IntConsumer</strong></td>
<td>接受一个int类型的输入参数，无返回值 。</td>
</tr>
<tr>
<td>18</td>
<td><strong>IntFunction<r></r></strong></td>
<td>接受一个int类型输入参数，返回一个结果 。</td>
</tr>
<tr>
<td>19</td>
<td><strong>IntPredicate</strong></td>
<td>接受一个int输入参数，返回一个布尔值的结果。</td>
</tr>
<tr>
<td>20</td>
<td><strong>IntSupplier</strong></td>
<td>无参数，返回一个int类型结果。</td>
</tr>
<tr>
<td>21</td>
<td><strong>IntToDoubleFunction</strong></td>
<td>接受一个int类型输入，返回一个double类型结果 。</td>
</tr>
<tr>
<td>22</td>
<td><strong>IntToLongFunction</strong></td>
<td>接受一个int类型输入，返回一个long类型结果。</td>
</tr>
<tr>
<td>23</td>
<td><strong>IntUnaryOperator</strong></td>
<td>接受一个参数同为类型int,返回值类型也为int 。</td>
</tr>
<tr>
<td>24</td>
<td><strong>LongBinaryOperator</strong></td>
<td>接受两个参数同为类型long,返回值类型也为long。</td>
</tr>
<tr>
<td>25</td>
<td><strong>LongConsumer</strong></td>
<td>接受一个long类型的输入参数，无返回值。</td>
</tr>
<tr>
<td>26</td>
<td><strong>LongFunction<r></r></strong></td>
<td>接受一个long类型输入参数，返回一个结果。</td>
</tr>
<tr>
<td>27</td>
<td><strong>LongPredicate</strong></td>
<td>接受一个long输入参数，返回一个布尔值类型结果。</td>
</tr>
<tr>
<td>28</td>
<td><strong>LongSupplier</strong></td>
<td>无参数，返回一个结果long类型的值。</td>
</tr>
<tr>
<td>29</td>
<td><strong>LongToDoubleFunction</strong></td>
<td>接受一个long类型输入，返回一个double类型结果。</td>
</tr>
<tr>
<td>30</td>
<td><strong>LongToIntFunction</strong></td>
<td>接受一个long类型输入，返回一个int类型结果。</td>
</tr>
<tr>
<td>31</td>
<td><strong>LongUnaryOperator</strong></td>
<td>接受一个参数同为类型long,返回值类型也为long。</td>
</tr>
<tr>
<td>32</td>
<td><strong>ObjDoubleConsumer<t></t></strong></td>
<td>接受一个object类型和一个double类型的输入参数，无返回值。</td>
</tr>
<tr>
<td>33</td>
<td><strong>ObjIntConsumer<t></t></strong></td>
<td>接受一个object类型和一个int类型的输入参数，无返回值。</td>
</tr>
<tr>
<td>34</td>
<td><strong>ObjLongConsumer<t></t></strong></td>
<td>接受一个object类型和一个long类型的输入参数，无返回值。</td>
</tr>
<tr>
<td>35</td>
<td><strong>Predicate<t></t></strong></td>
<td>接受一个输入参数，返回一个布尔值结果。</td>
</tr>
<tr>
<td>36</td>
<td><strong>Supplier<t></t></strong></td>
<td>无参数，返回一个结果。</td>
</tr>
<tr>
<td>37</td>
<td><strong>ToDoubleBiFunction&lt;T,U&gt;</strong></td>
<td>接受两个输入参数，返回一个double类型结果</td>
</tr>
<tr>
<td>38</td>
<td><strong>ToDoubleFunction<t></t></strong></td>
<td>接受一个输入参数，返回一个double类型结果</td>
</tr>
<tr>
<td>39</td>
<td><strong>ToIntBiFunction&lt;T,U&gt;</strong></td>
<td>接受两个输入参数，返回一个int类型结果。</td>
</tr>
<tr>
<td>40</td>
<td><strong>ToIntFunction<t></t></strong></td>
<td>接受一个输入参数，返回一个int类型结果。</td>
</tr>
<tr>
<td>41</td>
<td><strong>ToLongBiFunction&lt;T,U&gt;</strong></td>
<td>接受两个输入参数，返回一个long类型结果。</td>
</tr>
<tr>
<td>42</td>
<td><strong>ToLongFunction<t></t></strong></td>
<td>接受一个输入参数，返回一个long类型结果。</td>
</tr>
<tr>
<td>43</td>
<td><strong>UnaryOperator<t></t></strong></td>
<td>接受一个参数为类型T,返回值类型也为T。</td>
</tr>
</tbody></table>
<p>我们用35  <strong>Predicate<t></t></strong>  接受一个输入参数，返回一个布尔值结果。来举个例子</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> effectiveJava.functionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Predicate&lt;Integer&gt; predicate = n -&gt; true</span></span><br><span class="line">        <span class="comment">// n 是一个参数传递到 Predicate 接口的 test 方法</span></span><br><span class="line">        <span class="comment">// n 如果存在则 test 方法返回 true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"输出所有数据:"</span>);</span><br><span class="line">        eval(list, n -&gt; <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Predicate&lt;Integer&gt; predicate1 = n -&gt; n%2 == 0</span></span><br><span class="line">        <span class="comment">// n 是一个参数传递到 Predicate 接口的 test 方法</span></span><br><span class="line">        <span class="comment">// 如果 n%2 为 0 test 方法返回 true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"输出所有偶数:"</span>);</span><br><span class="line">        eval(list, n -&gt; n % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Predicate&lt;Integer&gt; predicate2 = n -&gt; n &gt; 3</span></span><br><span class="line">        <span class="comment">// n 是一个参数传递到 Predicate 接口的 test 方法</span></span><br><span class="line">        <span class="comment">// 如果 n 大于 3 test 方法返回 true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"输出大于 3 的所有数字:"</span>);</span><br><span class="line">        eval(list, n -&gt; n &gt; <span class="number">3</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eval</span><span class="params">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (Integer i : list) {</span><br><span class="line">            <span class="keyword">if</span> (predicate.test(i)) {</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>当然是用Lambda后，<code>eval</code>就可以简写为</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eval</span><span class="params">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> </span>{</span><br><span class="line">    list.stream().filter(predicate).forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>java.util.Function 中共有43个接口。别指望能够全部记住它们，但是如果能记住其中6个基础接口，必要时就可以推断出其余接口了。</p>
<ol>
<li>基础接口作用于对象引用类型</li>
<li>Operator 接口代表其结果与参数类型一致的函数</li>
<li>Predicate 接口代表带有一个参数 并返回一个 boolean 的函数</li>
<li>Function 接口代表其参数与返回的类型不一致的函数</li>
<li>Supplier 接口代表没有参数并且返回（或“提供”）一个值的函数</li>
<li>Consumer 表的是带有一个函数但不返回任何值的函数，相当于消费掉了其参数</li>
</ol>
<p>比如下面这个代码</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">list.stream().filter(a -&gt; a &gt; <span class="number">6</span>).forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure>

<p>这是个很常见的用来打印大于6的值，我们来看下这个<code>filter</code>接口。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns a stream consisting of the elements of this stream that match</span></span><br><span class="line"><span class="comment">    * the given predicate.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This is an &lt;a href="package-summary.html#StreamOps"&gt;intermediate</span></span><br><span class="line"><span class="comment">    * operation&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> predicate a &lt;a href="package-summary.html#NonInterference"&gt;non-interfering&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">    *                  &lt;a href="package-summary.html#Statelessness"&gt;stateless&lt;/a&gt;</span></span><br><span class="line"><span class="comment">    *                  predicate to apply to each element to determine if it</span></span><br><span class="line"><span class="comment">    *                  should be included</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the new stream</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span></span>;</span><br></pre></td></tr></tbody></table></figure>

<p>这里用到的就是我们的函数式编程。再比如</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//求最大值</span></span><br><span class="line">Optional&lt;Integer&gt; max1 = list.stream().reduce(Integer::max);</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</span><br></pre></td></tr></tbody></table></figure>

<p>等等，java8给我们提供了大量的示例，告诉我们要尽量使用函数式编程。</p>
<p>jdk8对于许多常用的类都扩展了一些面向函数，lambda表达式，方法引用的功能，使得java面向函数编程更为方便。其中Map.merge方法就是其中一个，merge方法有三个参数，<strong>key</strong>：map中的键，<strong>value</strong>：使用者传入的值，<strong>remappingFunction</strong>：BiFunction函数接口(该接口接收两个值，执行自定义功能并返回最终值)。当map中不存在指定的key时，便将传入的value设置为key的值，当key存在值时，执行一个方法该方法接收key的旧值和传入的value，执行自定义的方法返回最终结果设置为key的值。</p>
<p>举个例子，当map中存在某个key，那么我们把value取出来加上新值，再存进去；传统办法是先判断，如果不存在key，则直接存，如果存在，则取出值加上新值，再把值重新put进去。当使用了merge后，我们的操作就简便多了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> effectiveJava.functionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapMergeTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"id"</span>, <span class="number">1</span>);</span><br><span class="line">        map.merge(<span class="string">"id"</span>, <span class="number">1</span>, (oldValue, newValue) -&gt; oldValue + newValue);</span><br><span class="line">        map.merge(<span class="string">"name"</span>, <span class="number">1</span>, (oldValue, newValue) -&gt; oldValue + newValue);</span><br><span class="line">        System.out.println(map.toString());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">{name=<span class="number">1</span>, id=<span class="number">2</span>}</span><br></pre></td></tr></tbody></table></figure>

<p>与匿名类相比， Lambda 的主要优势在于更加简洁。Java 提供了生成比 Lambda 更简洁函数对象的方法：<strong>方法引用（method reference）</strong>。</p>
<p>比如<code>map.merge("id", 1, (oldValue, newValue) -&gt; oldValue + newValue);</code>这段代码我们就可以简写为</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">map.merge(<span class="string">"id"</span>, <span class="number">1</span>, Integer::sum);</span><br></pre></td></tr></tbody></table></figure>

<p>记住一句话：<strong>只要方法引用更加简洁、清晰，就用方法引用；如果方法引用并不简洁，就坚持使用 Lambda。</strong></p>
<h5 id="5，Stream"><a href="#5，Stream" class="headerlink" title="5，Stream"></a>5，Stream</h5><blockquote>
<p><code>Stream</code>将要处理的元素集合看作一种流，在流的过程中，借助<code>Stream API</code>对流中的元素进行操作，比如：筛选、排序、聚合等。</p>
</blockquote>
<blockquote>
<p><code>Optional</code>类是一个可以为<code>null</code>的容器对象。如果值存在则<code>isPresent()</code>方法会返回<code>true</code>，调用<code>get()</code>方法会返回该对象。</p>
</blockquote>
<p>我们先举个实例</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> effectiveJava.functionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SteamTest</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>{</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">8900</span>, <span class="number">20</span>, <span class="string">"male"</span>, <span class="string">"New York"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Jack"</span>, <span class="number">7000</span>, <span class="number">20</span>, <span class="string">"male"</span>, <span class="string">"Washington"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Lily"</span>, <span class="number">7800</span>, <span class="number">20</span>, <span class="string">"female"</span>, <span class="string">"Washington"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Anni"</span>, <span class="number">8200</span>, <span class="number">20</span>, <span class="string">"female"</span>, <span class="string">"New York"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Owen"</span>, <span class="number">9500</span>, <span class="number">20</span>, <span class="string">"male"</span>, <span class="string">"New York"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Alisa"</span>, <span class="number">7900</span>, <span class="number">20</span>, <span class="string">"female"</span>, <span class="string">"New York"</span>));</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary; <span class="comment">// 薪资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> String sex; <span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> String area;  <span class="comment">// 地区</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ol>
<li><p>筛选（filter）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFilter</span><span class="params">()</span> </span>{</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    list.stream().filter(a -&gt; a &gt; <span class="number">6</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    Optional&lt;Integer&gt; first = list.stream().filter(a -&gt; a &gt; <span class="number">6</span>).findFirst();</span><br><span class="line"></span><br><span class="line">    Optional&lt;Integer&gt; any = list.stream().filter(a -&gt; a &gt; <span class="number">6</span>).findAny();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否包含符合特定条件的元素</span></span><br><span class="line">    <span class="keyword">boolean</span> anyMatch = list.stream().anyMatch(x -&gt; x &lt; <span class="number">6</span>);</span><br><span class="line">    System.out.println(<span class="string">"匹配第一个值："</span> + first.get());</span><br><span class="line">    System.out.println(<span class="string">"匹配任意一个值："</span> + any.get());</span><br><span class="line">    System.out.println(<span class="string">"是否存在大于6的值："</span> + anyMatch);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>聚合（max/min/count）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMinMaxCount</span><span class="params">()</span> </span>{</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">	<span class="comment">//最小值</span></span><br><span class="line">    Optional&lt;Integer&gt; min = list.stream().filter(a -&gt; a &gt; <span class="number">6</span>).min(Integer::compareTo);</span><br><span class="line">    System.out.println(min.get());</span><br><span class="line">	<span class="comment">//最大值</span></span><br><span class="line">    Optional&lt;Integer&gt; max = list.stream().filter(a -&gt; a &gt; <span class="number">6</span>).max(Comparator.comparingInt(a -&gt; a));</span><br><span class="line">    System.out.println(max.get());</span><br><span class="line">	<span class="comment">//长度</span></span><br><span class="line">    <span class="keyword">long</span> count = list.stream().filter(a -&gt; a &gt; <span class="number">6</span>).count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>映射（map/flatMap）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * map：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span></span><br><span class="line"><span class="comment"> * flatMap：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"ghi"</span>, <span class="string">"jkl"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; strList = list.stream().map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line">    System.out.println(strList.toString());</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; numList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">    List&lt;Integer&gt; newNumList = numList.stream().map(a -&gt; a + <span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(newNumList.toString());</span><br><span class="line"></span><br><span class="line">    list();</span><br><span class="line">    <span class="comment">//不改变</span></span><br><span class="line">    List&lt;Person&gt; newPersonList = personList.stream().map(a -&gt; {</span><br><span class="line">        Person p = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            p = (Person) a.clone();</span><br><span class="line">        } <span class="keyword">catch</span> (CloneNotSupportedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        p.setSalary(a.getSalary() + <span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    }).collect(Collectors.toList());</span><br><span class="line">    System.out.println(personList.toString());</span><br><span class="line">    System.out.println(newPersonList.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//改变</span></span><br><span class="line">    personList.stream().map(a -&gt; {</span><br><span class="line">        a.setSalary(a.getSalary() + <span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }).collect(Collectors.toList());</span><br><span class="line">    System.out.println(personList.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; flatList = Arrays.asList(<span class="string">"m,k,l,a"</span>, <span class="string">"1,3,5,7"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; newFlatList = flatList.stream().flatMap(a -&gt; {</span><br><span class="line">        String[] strArr = a.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(strArr);</span><br><span class="line">    }).collect(Collectors.toList());</span><br><span class="line">    System.out.println(flatList.toString());</span><br><span class="line">    System.out.println(newFlatList.toString());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>归约（reduce）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * reduce 归约</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReduce</span><span class="params">()</span> </span>{</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求和</span></span><br><span class="line">    Optional&lt;Integer&gt; sum = list.stream().reduce(Integer::sum);</span><br><span class="line">    System.out.println(sum.get());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求最大值</span></span><br><span class="line">    Optional&lt;Integer&gt; max1 = list.stream().reduce((a, b) -&gt; a &gt; b ? a : b);</span><br><span class="line">    Optional&lt;Integer&gt; max2 = list.stream().reduce(Integer::max);</span><br><span class="line">    Integer max3 = list.stream().reduce(<span class="number">100</span>, Integer::max);</span><br><span class="line">    System.out.println(max1.get());</span><br><span class="line">    System.out.println(max2.get());</span><br><span class="line">    System.out.println(max3);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>收集（collect）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCollect</span><span class="params">()</span> </span>{</span><br><span class="line">    list();</span><br><span class="line">    List&lt;Person&gt; newList = personList.stream().filter(a -&gt; a.getSalary() &gt; <span class="number">8000</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(newList.toString());</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; nameList = personList.stream().filter(a -&gt; a.getSalary() &gt; <span class="number">8000</span>).map(Person::getName).collect(Collectors.toList());</span><br><span class="line">    System.out.println(nameList.toString());</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Person&gt; nameMap = personList.stream().collect(Collectors.toMap(Person::getName, b -&gt; b, (oldValue, newValue) -&gt; newValue));</span><br><span class="line">    System.out.println(nameMap.toString());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>统计（count/averaging）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAveraging</span><span class="params">()</span> </span>{</span><br><span class="line">    list();</span><br><span class="line">    <span class="comment">//求和</span></span><br><span class="line">    Long count = personList.stream().collect(Collectors.counting());</span><br><span class="line">    <span class="comment">//平均值</span></span><br><span class="line">    <span class="keyword">double</span> average = personList.stream().collect(Collectors.averagingDouble(Person::getSalary));</span><br><span class="line">    <span class="comment">//最大值</span></span><br><span class="line">    Optional&lt;Integer&gt; max = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compareTo));</span><br><span class="line">    <span class="comment">//求和</span></span><br><span class="line">    Integer sum = personList.stream().collect(Collectors.summingInt(Person::getSalary));</span><br><span class="line">    <span class="comment">//统计</span></span><br><span class="line">    DoubleSummaryStatistics statistics = personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));</span><br><span class="line">    statistics.getMax();</span><br><span class="line">    statistics.getMin();</span><br><span class="line">    statistics.getCount();</span><br><span class="line">    statistics.getAverage();</span><br><span class="line">    statistics.getSum();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>分组（partitioningBy/groupingBy）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGroupingBy</span><span class="params">()</span> </span>{</span><br><span class="line">    list();</span><br><span class="line">    Map&lt;Boolean, List&lt;Person&gt;&gt; map = personList.stream().collect(Collectors.partitioningBy(a -&gt; a.getSalary() &gt; <span class="number">8000</span>));</span><br><span class="line">    Map&lt;String, List&lt;Person&gt;&gt; sexMap = personList.stream().collect(Collectors.groupingBy(Person::getSex));</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Map&lt;String, List&lt;Person&gt;&gt;&gt; tmp =</span><br><span class="line">        personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.groupingBy(Person::getArea)));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>接合（joining）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJoin</span><span class="params">()</span> </span>{</span><br><span class="line">    list();</span><br><span class="line">    String str = personList.stream().map(Person::getName).collect(Collectors.joining(<span class="string">","</span>));</span><br><span class="line">    System.out.println(str);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>排序（sorted）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序</span></span><br><span class="line"><span class="comment"> * sorted()：自然排序，流中元素需实现Comparable接口</span></span><br><span class="line"><span class="comment"> * sorted(Comparator com)：Comparator排序器自定义排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSorted</span><span class="params">()</span> </span>{</span><br><span class="line">    list();</span><br><span class="line">    <span class="comment">//正序</span></span><br><span class="line">    List&lt;Person&gt; newList = personList.stream().sorted(Comparator.comparingInt(Person::getSalary)).collect(Collectors.toList());</span><br><span class="line">    System.out.println(newList.toString());</span><br><span class="line">    <span class="comment">//倒序</span></span><br><span class="line">    List&lt;Integer&gt; newList2 = personList.stream().map(Person::getSalary).sorted(Comparator.comparingInt(a -&gt; (<span class="keyword">int</span>) a).reversed()).collect(Collectors.toList());</span><br><span class="line">    System.out.println(newList2.toString());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>提取/组合</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDistinct</span><span class="params">()</span> </span>{</span><br><span class="line">    String[] arr1 = {<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>};</span><br><span class="line">    String[] arr2 = {<span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>};</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(arr1));</span><br><span class="line"></span><br><span class="line">    Stream&lt;String&gt; stream1 = Stream.of(arr1);</span><br><span class="line">    Stream&lt;String&gt; stream2 = Stream.of(arr2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// concat:合并两个流</span></span><br><span class="line">    <span class="comment">// distinct：去重</span></span><br><span class="line">    List&lt;String&gt; list = Stream.concat(stream1, stream2).distinct().collect(Collectors.toList());</span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// limit：限制从流中获得前n个数据</span></span><br><span class="line">    List&lt;String&gt; list2 = strList.stream().limit(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(list2.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// skip：跳过前n个数据</span></span><br><span class="line">    List&lt;String&gt; list3 = strList.stream().skip(<span class="number">1</span>).limit(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(list3.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// iterate：遍历</span></span><br><span class="line">    List&lt;Integer&gt; list4 = Stream.iterate(<span class="number">1</span>, x -&gt; x + <span class="number">2</span>).skip(<span class="number">1</span>).limit(<span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(list4);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
